ARM GAS  C:\Users\82057\AppData\Local\Temp\ccSniiMh.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"freertos.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.configureTimerForRunTimeStats,"ax",%progbits
  18              		.align	1
  19              		.weak	configureTimerForRunTimeStats
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	configureTimerForRunTimeStats:
  26              	.LFB137:
  27              		.file 1 "Core/Src/freertos.c"
   1:Core/Src/freertos.c **** /* USER CODE BEGIN Header */
   2:Core/Src/freertos.c **** /**
   3:Core/Src/freertos.c ****   ******************************************************************************
   4:Core/Src/freertos.c ****   * File Name          : freertos.c
   5:Core/Src/freertos.c ****   * Description        : Code for freertos applications
   6:Core/Src/freertos.c ****   ******************************************************************************
   7:Core/Src/freertos.c ****   * @attention
   8:Core/Src/freertos.c ****   *
   9:Core/Src/freertos.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/freertos.c ****   * All rights reserved.
  11:Core/Src/freertos.c ****   *
  12:Core/Src/freertos.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/freertos.c ****   * in the root directory of this software component.
  14:Core/Src/freertos.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/freertos.c ****   *
  16:Core/Src/freertos.c ****   ******************************************************************************
  17:Core/Src/freertos.c ****   */
  18:Core/Src/freertos.c **** /* USER CODE END Header */
  19:Core/Src/freertos.c **** 
  20:Core/Src/freertos.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/freertos.c **** #include "FreeRTOS.h"
  22:Core/Src/freertos.c **** #include "task.h"
  23:Core/Src/freertos.c **** #include "main.h"
  24:Core/Src/freertos.c **** 
  25:Core/Src/freertos.c **** /* Private includes ----------------------------------------------------------*/
  26:Core/Src/freertos.c **** /* USER CODE BEGIN Includes */
  27:Core/Src/freertos.c **** 
  28:Core/Src/freertos.c **** /* USER CODE END Includes */
  29:Core/Src/freertos.c **** 
  30:Core/Src/freertos.c **** /* Private typedef -----------------------------------------------------------*/
  31:Core/Src/freertos.c **** /* USER CODE BEGIN PTD */
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccSniiMh.s 			page 2


  32:Core/Src/freertos.c **** 
  33:Core/Src/freertos.c **** /* USER CODE END PTD */
  34:Core/Src/freertos.c **** 
  35:Core/Src/freertos.c **** /* Private define ------------------------------------------------------------*/
  36:Core/Src/freertos.c **** /* USER CODE BEGIN PD */
  37:Core/Src/freertos.c **** 
  38:Core/Src/freertos.c **** /* USER CODE END PD */
  39:Core/Src/freertos.c **** 
  40:Core/Src/freertos.c **** /* Private macro -------------------------------------------------------------*/
  41:Core/Src/freertos.c **** /* USER CODE BEGIN PM */
  42:Core/Src/freertos.c **** 
  43:Core/Src/freertos.c **** /* USER CODE END PM */
  44:Core/Src/freertos.c **** 
  45:Core/Src/freertos.c **** /* Private variables ---------------------------------------------------------*/
  46:Core/Src/freertos.c **** /* USER CODE BEGIN Variables */
  47:Core/Src/freertos.c **** 
  48:Core/Src/freertos.c **** /* USER CODE END Variables */
  49:Core/Src/freertos.c **** 
  50:Core/Src/freertos.c **** /* Private function prototypes -----------------------------------------------*/
  51:Core/Src/freertos.c **** /* USER CODE BEGIN FunctionPrototypes */
  52:Core/Src/freertos.c **** 
  53:Core/Src/freertos.c **** /* USER CODE END FunctionPrototypes */
  54:Core/Src/freertos.c **** 
  55:Core/Src/freertos.c **** /* GetIdleTaskMemory prototype (linked to static allocation support) */
  56:Core/Src/freertos.c **** void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskS
  57:Core/Src/freertos.c **** 
  58:Core/Src/freertos.c **** /* GetTimerTaskMemory prototype (linked to static allocation support) */
  59:Core/Src/freertos.c **** void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTa
  60:Core/Src/freertos.c **** 
  61:Core/Src/freertos.c **** /* Hook prototypes */
  62:Core/Src/freertos.c **** void configureTimerForRunTimeStats(void);
  63:Core/Src/freertos.c **** unsigned long getRunTimeCounterValue(void);
  64:Core/Src/freertos.c **** void vApplicationIdleHook(void);
  65:Core/Src/freertos.c **** void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
  66:Core/Src/freertos.c **** void vApplicationMallocFailedHook(void);
  67:Core/Src/freertos.c **** 
  68:Core/Src/freertos.c **** /* USER CODE BEGIN 1 */
  69:Core/Src/freertos.c **** /* Functions needed when configGENERATE_RUN_TIME_STATS is on */
  70:Core/Src/freertos.c **** __weak void configureTimerForRunTimeStats(void)
  71:Core/Src/freertos.c **** {
  28              		.loc 1 71 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  72:Core/Src/freertos.c **** 
  73:Core/Src/freertos.c **** }
  33              		.loc 1 73 0
  34 0000 7047     		bx	lr
  35              		.cfi_endproc
  36              	.LFE137:
  38              		.section	.text.getRunTimeCounterValue,"ax",%progbits
  39              		.align	1
  40              		.weak	getRunTimeCounterValue
  41              		.syntax unified
  42              		.thumb
  43              		.thumb_func
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccSniiMh.s 			page 3


  44              		.fpu fpv4-sp-d16
  46              	getRunTimeCounterValue:
  47              	.LFB138:
  74:Core/Src/freertos.c **** 
  75:Core/Src/freertos.c **** __weak unsigned long getRunTimeCounterValue(void)
  76:Core/Src/freertos.c **** {
  48              		.loc 1 76 0
  49              		.cfi_startproc
  50              		@ args = 0, pretend = 0, frame = 0
  51              		@ frame_needed = 0, uses_anonymous_args = 0
  52              		@ link register save eliminated.
  77:Core/Src/freertos.c **** return 0;
  78:Core/Src/freertos.c **** }
  53              		.loc 1 78 0
  54 0000 0020     		movs	r0, #0
  55 0002 7047     		bx	lr
  56              		.cfi_endproc
  57              	.LFE138:
  59              		.section	.text.vApplicationIdleHook,"ax",%progbits
  60              		.align	1
  61              		.weak	vApplicationIdleHook
  62              		.syntax unified
  63              		.thumb
  64              		.thumb_func
  65              		.fpu fpv4-sp-d16
  67              	vApplicationIdleHook:
  68              	.LFB139:
  79:Core/Src/freertos.c **** /* USER CODE END 1 */
  80:Core/Src/freertos.c **** 
  81:Core/Src/freertos.c **** /* USER CODE BEGIN 2 */
  82:Core/Src/freertos.c **** __weak void vApplicationIdleHook( void )
  83:Core/Src/freertos.c **** {
  69              		.loc 1 83 0
  70              		.cfi_startproc
  71              		@ args = 0, pretend = 0, frame = 0
  72              		@ frame_needed = 0, uses_anonymous_args = 0
  73              		@ link register save eliminated.
  84:Core/Src/freertos.c ****    /* vApplicationIdleHook() will only be called if configUSE_IDLE_HOOK is set
  85:Core/Src/freertos.c ****    to 1 in FreeRTOSConfig.h. It will be called on each iteration of the idle
  86:Core/Src/freertos.c ****    task. It is essential that code added to this hook function never attempts
  87:Core/Src/freertos.c ****    to block in any way (for example, call xQueueReceive() with a block time
  88:Core/Src/freertos.c ****    specified, or call vTaskDelay()). If the application makes use of the
  89:Core/Src/freertos.c ****    vTaskDelete() API function (as this demo application does) then it is also
  90:Core/Src/freertos.c ****    important that vApplicationIdleHook() is permitted to return to its calling
  91:Core/Src/freertos.c ****    function, because it is the responsibility of the idle task to clean up
  92:Core/Src/freertos.c ****    memory allocated by the kernel to any task that has since been deleted. */
  93:Core/Src/freertos.c **** }
  74              		.loc 1 93 0
  75 0000 7047     		bx	lr
  76              		.cfi_endproc
  77              	.LFE139:
  79              		.section	.text.vApplicationStackOverflowHook,"ax",%progbits
  80              		.align	1
  81              		.weak	vApplicationStackOverflowHook
  82              		.syntax unified
  83              		.thumb
  84              		.thumb_func
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccSniiMh.s 			page 4


  85              		.fpu fpv4-sp-d16
  87              	vApplicationStackOverflowHook:
  88              	.LFB140:
  94:Core/Src/freertos.c **** /* USER CODE END 2 */
  95:Core/Src/freertos.c **** 
  96:Core/Src/freertos.c **** /* USER CODE BEGIN 4 */
  97:Core/Src/freertos.c **** __weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
  98:Core/Src/freertos.c **** {
  89              		.loc 1 98 0
  90              		.cfi_startproc
  91              		@ args = 0, pretend = 0, frame = 0
  92              		@ frame_needed = 0, uses_anonymous_args = 0
  93              		@ link register save eliminated.
  94              	.LVL0:
  99:Core/Src/freertos.c ****    /* Run time stack overflow checking is performed if
 100:Core/Src/freertos.c ****    configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
 101:Core/Src/freertos.c ****    called if a stack overflow is detected. */
 102:Core/Src/freertos.c **** }
  95              		.loc 1 102 0
  96 0000 7047     		bx	lr
  97              		.cfi_endproc
  98              	.LFE140:
 100              		.section	.text.vApplicationMallocFailedHook,"ax",%progbits
 101              		.align	1
 102              		.weak	vApplicationMallocFailedHook
 103              		.syntax unified
 104              		.thumb
 105              		.thumb_func
 106              		.fpu fpv4-sp-d16
 108              	vApplicationMallocFailedHook:
 109              	.LFB141:
 103:Core/Src/freertos.c **** /* USER CODE END 4 */
 104:Core/Src/freertos.c **** 
 105:Core/Src/freertos.c **** /* USER CODE BEGIN 5 */
 106:Core/Src/freertos.c **** __weak void vApplicationMallocFailedHook(void)
 107:Core/Src/freertos.c **** {
 110              		.loc 1 107 0
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 0
 113              		@ frame_needed = 0, uses_anonymous_args = 0
 114              		@ link register save eliminated.
 108:Core/Src/freertos.c ****    /* vApplicationMallocFailedHook() will only be called if
 109:Core/Src/freertos.c ****    configUSE_MALLOC_FAILED_HOOK is set to 1 in FreeRTOSConfig.h. It is a hook
 110:Core/Src/freertos.c ****    function that will get called if a call to pvPortMalloc() fails.
 111:Core/Src/freertos.c ****    pvPortMalloc() is called internally by the kernel whenever a task, queue,
 112:Core/Src/freertos.c ****    timer or semaphore is created. It is also called by various parts of the
 113:Core/Src/freertos.c ****    demo application. If heap_1.c or heap_2.c are used, then the size of the
 114:Core/Src/freertos.c ****    heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
 115:Core/Src/freertos.c ****    FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
 116:Core/Src/freertos.c ****    to query the size of free heap space that remains (although it does not
 117:Core/Src/freertos.c ****    provide information on how the remaining heap might be fragmented). */
 118:Core/Src/freertos.c **** }
 115              		.loc 1 118 0
 116 0000 7047     		bx	lr
 117              		.cfi_endproc
 118              	.LFE141:
 120              		.section	.text.vApplicationGetIdleTaskMemory,"ax",%progbits
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccSniiMh.s 			page 5


 121              		.align	1
 122              		.global	vApplicationGetIdleTaskMemory
 123              		.syntax unified
 124              		.thumb
 125              		.thumb_func
 126              		.fpu fpv4-sp-d16
 128              	vApplicationGetIdleTaskMemory:
 129              	.LFB142:
 119:Core/Src/freertos.c **** /* USER CODE END 5 */
 120:Core/Src/freertos.c **** 
 121:Core/Src/freertos.c **** /* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
 122:Core/Src/freertos.c **** static StaticTask_t xIdleTaskTCBBuffer;
 123:Core/Src/freertos.c **** static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
 124:Core/Src/freertos.c **** 
 125:Core/Src/freertos.c **** void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskS
 126:Core/Src/freertos.c **** {
 130              		.loc 1 126 0
 131              		.cfi_startproc
 132              		@ args = 0, pretend = 0, frame = 0
 133              		@ frame_needed = 0, uses_anonymous_args = 0
 134              		@ link register save eliminated.
 135              	.LVL1:
 127:Core/Src/freertos.c ****   *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 136              		.loc 1 127 0
 137 0000 034B     		ldr	r3, .L7
 138 0002 0360     		str	r3, [r0]
 128:Core/Src/freertos.c ****   *ppxIdleTaskStackBuffer = &xIdleStack[0];
 139              		.loc 1 128 0
 140 0004 034B     		ldr	r3, .L7+4
 141 0006 0B60     		str	r3, [r1]
 129:Core/Src/freertos.c ****   *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 142              		.loc 1 129 0
 143 0008 8023     		movs	r3, #128
 144 000a 1360     		str	r3, [r2]
 130:Core/Src/freertos.c ****   /* place for user code */
 131:Core/Src/freertos.c **** }
 145              		.loc 1 131 0
 146 000c 7047     		bx	lr
 147              	.L8:
 148 000e 00BF     		.align	2
 149              	.L7:
 150 0010 00000000 		.word	.LANCHOR0
 151 0014 00000000 		.word	.LANCHOR1
 152              		.cfi_endproc
 153              	.LFE142:
 155              		.section	.text.vApplicationGetTimerTaskMemory,"ax",%progbits
 156              		.align	1
 157              		.global	vApplicationGetTimerTaskMemory
 158              		.syntax unified
 159              		.thumb
 160              		.thumb_func
 161              		.fpu fpv4-sp-d16
 163              	vApplicationGetTimerTaskMemory:
 164              	.LFB143:
 132:Core/Src/freertos.c **** /* USER CODE END GET_IDLE_TASK_MEMORY */
 133:Core/Src/freertos.c **** 
 134:Core/Src/freertos.c **** /* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccSniiMh.s 			page 6


 135:Core/Src/freertos.c **** static StaticTask_t xTimerTaskTCBBuffer;
 136:Core/Src/freertos.c **** static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
 137:Core/Src/freertos.c **** 
 138:Core/Src/freertos.c **** void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTa
 139:Core/Src/freertos.c **** {
 165              		.loc 1 139 0
 166              		.cfi_startproc
 167              		@ args = 0, pretend = 0, frame = 0
 168              		@ frame_needed = 0, uses_anonymous_args = 0
 169              		@ link register save eliminated.
 170              	.LVL2:
 140:Core/Src/freertos.c ****   *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 171              		.loc 1 140 0
 172 0000 034B     		ldr	r3, .L10
 173 0002 0360     		str	r3, [r0]
 141:Core/Src/freertos.c ****   *ppxTimerTaskStackBuffer = &xTimerStack[0];
 174              		.loc 1 141 0
 175 0004 034B     		ldr	r3, .L10+4
 176 0006 0B60     		str	r3, [r1]
 142:Core/Src/freertos.c ****   *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 177              		.loc 1 142 0
 178 0008 4FF48073 		mov	r3, #256
 179 000c 1360     		str	r3, [r2]
 143:Core/Src/freertos.c ****   /* place for user code */
 144:Core/Src/freertos.c **** }
 180              		.loc 1 144 0
 181 000e 7047     		bx	lr
 182              	.L11:
 183              		.align	2
 184              	.L10:
 185 0010 00000000 		.word	.LANCHOR2
 186 0014 00000000 		.word	.LANCHOR3
 187              		.cfi_endproc
 188              	.LFE143:
 190              		.section	.bss.xIdleStack,"aw",%nobits
 191              		.align	2
 192              		.set	.LANCHOR1,. + 0
 195              	xIdleStack:
 196 0000 00000000 		.space	512
 196      00000000 
 196      00000000 
 196      00000000 
 196      00000000 
 197              		.section	.bss.xIdleTaskTCBBuffer,"aw",%nobits
 198              		.align	2
 199              		.set	.LANCHOR0,. + 0
 202              	xIdleTaskTCBBuffer:
 203 0000 00000000 		.space	108
 203      00000000 
 203      00000000 
 203      00000000 
 203      00000000 
 204              		.section	.bss.xTimerStack,"aw",%nobits
 205              		.align	2
 206              		.set	.LANCHOR3,. + 0
 209              	xTimerStack:
 210 0000 00000000 		.space	1024
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccSniiMh.s 			page 7


 210      00000000 
 210      00000000 
 210      00000000 
 210      00000000 
 211              		.section	.bss.xTimerTaskTCBBuffer,"aw",%nobits
 212              		.align	2
 213              		.set	.LANCHOR2,. + 0
 216              	xTimerTaskTCBBuffer:
 217 0000 00000000 		.space	108
 217      00000000 
 217      00000000 
 217      00000000 
 217      00000000 
 218              		.text
 219              	.Letext0:
 220              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 221              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 222              		.file 4 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 223              		.file 5 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 224              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 225              		.file 7 "Core/Inc/FreeRTOSConfig.h"
 226              		.file 8 "Drivers/CMSIS/Include/core_cm4.h"
 227              		.file 9 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/system_stm32l4xx.h"
 228              		.file 10 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_def.h"
 229              		.file 11 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_flash.h"
 230              		.file 12 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal.h"
 231              		.file 13 "Core/Inc/main.h"
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccSniiMh.s 			page 8


DEFINED SYMBOLS
                            *ABS*:00000000 freertos.c
C:\Users\82057\AppData\Local\Temp\ccSniiMh.s:18     .text.configureTimerForRunTimeStats:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccSniiMh.s:25     .text.configureTimerForRunTimeStats:00000000 configureTimerForRunTimeStats
C:\Users\82057\AppData\Local\Temp\ccSniiMh.s:39     .text.getRunTimeCounterValue:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccSniiMh.s:46     .text.getRunTimeCounterValue:00000000 getRunTimeCounterValue
C:\Users\82057\AppData\Local\Temp\ccSniiMh.s:60     .text.vApplicationIdleHook:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccSniiMh.s:67     .text.vApplicationIdleHook:00000000 vApplicationIdleHook
C:\Users\82057\AppData\Local\Temp\ccSniiMh.s:80     .text.vApplicationStackOverflowHook:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccSniiMh.s:87     .text.vApplicationStackOverflowHook:00000000 vApplicationStackOverflowHook
C:\Users\82057\AppData\Local\Temp\ccSniiMh.s:101    .text.vApplicationMallocFailedHook:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccSniiMh.s:108    .text.vApplicationMallocFailedHook:00000000 vApplicationMallocFailedHook
C:\Users\82057\AppData\Local\Temp\ccSniiMh.s:121    .text.vApplicationGetIdleTaskMemory:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccSniiMh.s:128    .text.vApplicationGetIdleTaskMemory:00000000 vApplicationGetIdleTaskMemory
C:\Users\82057\AppData\Local\Temp\ccSniiMh.s:150    .text.vApplicationGetIdleTaskMemory:00000010 $d
C:\Users\82057\AppData\Local\Temp\ccSniiMh.s:156    .text.vApplicationGetTimerTaskMemory:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccSniiMh.s:163    .text.vApplicationGetTimerTaskMemory:00000000 vApplicationGetTimerTaskMemory
C:\Users\82057\AppData\Local\Temp\ccSniiMh.s:185    .text.vApplicationGetTimerTaskMemory:00000010 $d
C:\Users\82057\AppData\Local\Temp\ccSniiMh.s:191    .bss.xIdleStack:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccSniiMh.s:195    .bss.xIdleStack:00000000 xIdleStack
C:\Users\82057\AppData\Local\Temp\ccSniiMh.s:198    .bss.xIdleTaskTCBBuffer:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccSniiMh.s:202    .bss.xIdleTaskTCBBuffer:00000000 xIdleTaskTCBBuffer
C:\Users\82057\AppData\Local\Temp\ccSniiMh.s:205    .bss.xTimerStack:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccSniiMh.s:209    .bss.xTimerStack:00000000 xTimerStack
C:\Users\82057\AppData\Local\Temp\ccSniiMh.s:212    .bss.xTimerTaskTCBBuffer:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccSniiMh.s:216    .bss.xTimerTaskTCBBuffer:00000000 xTimerTaskTCBBuffer

NO UNDEFINED SYMBOLS
