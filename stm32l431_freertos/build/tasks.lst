ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tasks.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	prvTaskIsTaskSuspended:
  25              	.LFB19:
  26              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FreeRTOS Kernel V10.3.1
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 2


  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "stack_macros.h"
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** for the header files above, but not in this file, in order to generate the
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 3


  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 4


 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 5


 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock 			/* The old naming convention is used to prevent breaking kern
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 6


 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks.
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments in FreeRTOS.h with the definition of
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 7


 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_POSIX_ERRNO == 1 )
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		int iTaskErrno;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** which static variables must be declared volatile. */
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** doing so breaks some kernel aware debuggers and debuggers that rely on removing
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the static qualifier. */
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the errno of the currently running task. */
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	int FreeRTOS_errno = 0;
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xPendedTicks 			= ( TickType_t ) 0U;
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 8


 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Do not move these variables to function scope as doing so prevents the
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	code working with debuggers that need to remove the static qualifier. */
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -restore */
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 9


 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 10


 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 11


 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * called by the function.
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure. */
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 12


 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Store the stack location in the TCB. */
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 13


 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pcName,
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->xRegions );
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task had a statically allocated stack in case it is
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 14


 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 15


 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 16


 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			debugging. */
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 17


 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pcName != NULL )
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configMAX_TASK_NAME_LEN characters just in case the memory after the
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			string is not accessible (extremely unlikely). */
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pcName[ x ] == ( char ) 0x00 )
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				break;
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the name string is terminated in the case that the string length
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was greater or equal to configMAX_TASK_NAME_LEN. */
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The task has not been given a name, so just ensure there is a NULL
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		terminator when it is read out. */
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 18


 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure.
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 19


1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the top of stack variable is updated. */
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 20


1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxCreatedTask != NULL )
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 21


1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list. */
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 22


1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 23


1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 24


1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 25


1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDel
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 26


1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it blocked
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* The task does not appear on the event list item of
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							and of the RTOS objects, but could still be in the
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							blocked state if it is waiting on its notification
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							rather than waiting on an object. */
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eBlocked;
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eSuspended;
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							eReturn = eSuspended;
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 27


1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the task
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 28


1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 29


1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 30


1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change its priority variable. However, if
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 31


1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 32


1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					now suspended, so no notification was received. */
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 33


1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
  27              		.loc 1 1806 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
  33              		.loc 1 1814 0
  34 0000 50B1     		cbz	r0, .L8
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  35              		.loc 1 1817 0
  36 0002 4169     		ldr	r1, [r0, #20]
  37 0004 0C4A     		ldr	r2, .L9
  38 0006 9142     		cmp	r1, r2
  39 0008 0FD1     		bne	.L5
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  40              		.loc 1 1820 0
  41 000a 836A     		ldr	r3, [r0, #40]
  42 000c 0B4A     		ldr	r2, .L9+4
  43 000e 9342     		cmp	r3, r2
  44 0010 0DD0     		beq	.L6
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
  45              		.loc 1 1824 0
  46 0012 73B1     		cbz	r3, .L7
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  47              		.loc 1 1807 0
  48 0014 0020     		movs	r0, #0
  49              	.LVL1:
  50 0016 7047     		bx	lr
  51              	.LVL2:
  52              	.L8:
  53              	.LBB118:
  54              	.LBB119:
  55              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.3.1
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 34


   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 35


  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 36


 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 37


 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
  56              		.loc 2 195 0
  57              		.syntax unified
  58              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
  59 0018 4FF05003 			mov r3, #80												
  60 001c 83F31188 		msr basepri, r3											
  61 0020 BFF36F8F 		isb														
  62 0024 BFF34F8F 		dsb														
  63              	
  64              	@ 0 "" 2
  65              	.LVL3:
  66              		.thumb
  67              		.syntax unified
  68              	.L3:
  69 0028 FEE7     		b	.L3
  70              	.L5:
  71              	.LBE119:
  72              	.LBE118:
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  73              		.loc 1 1807 0
  74 002a 0020     		movs	r0, #0
  75              	.LVL4:
  76 002c 7047     		bx	lr
  77              	.LVL5:
  78              	.L6:
  79 002e 0020     		movs	r0, #0
  80              	.LVL6:
  81 0030 7047     		bx	lr
  82              	.LVL7:
  83              	.L7:
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
  84              		.loc 1 1826 0
  85 0032 0120     		movs	r0, #1
  86              	.LVL8:
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 38


1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  87              		.loc 1 1844 0
  88 0034 7047     		bx	lr
  89              	.L10:
  90 0036 00BF     		.align	2
  91              	.L9:
  92 0038 00000000 		.word	.LANCHOR0
  93 003c 00000000 		.word	.LANCHOR1
  94              		.cfi_endproc
  95              	.LFE19:
  97              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
  98              		.align	1
  99              		.syntax unified
 100              		.thumb
 101              		.thumb_func
 102              		.fpu fpv4-sp-d16
 104              	prvTaskCheckFreeStackSpace:
 105              	.LFB54:
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 39


1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended because this is inside a critical section. */
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 40


1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 41


1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the only macro called by the function. */
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			freertos_tasks_c_additions_init();
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 42


2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first.
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for additional information. */
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		FreeRTOSConfig.h file. */
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 43


2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* portSOFRWARE_BARRIER() is only implemented for emulated/simulated ports that
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	do not otherwise exhibit real time behaviour. */
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSOFTWARE_BARRIER();
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is used to allow calls to vTaskSuspendAll() to nest. */
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Enforces ordering for ports and optimised compilers that may otherwise place
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the above increment elsewhere. */
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portMEMORY_BARRIER();
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 44


2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 45


2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xPendedCounts > ( TickType_t ) 0U )
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 46


2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--xPendedCounts;
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( xPendedCounts > ( TickType_t ) 0U );
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xPendedTicks = 0;
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 47


2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xBreakLoop;
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 48


2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xBreakLoop = pdFALSE;
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xBreakLoop != pdFALSE )
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 49


2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 50


2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxTCB;
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 51


2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 52


2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xYieldRequired = pdFALSE;
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Must not be called with the scheduler suspended as the implementation
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended == 0 );
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vTaskSuspendAll();
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xPendedTicks += xTicksToCatchUp;
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldRequired = xTaskResumeAll();
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xYieldRequired;
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = xTask;
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This lets the task know it was forcibly removed from the
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						blocked state so it should not re-evaluate its block time and
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						then block again. */
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 53


2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 54


2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 55


2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 56


2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xPendedTicks == ( TickType_t ) 0 )
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 1 )
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xYieldPending != pdFALSE )
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++xPendedTicks;
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 57


2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 58


2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = pxCurrentTCB;
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 59


3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the amount of time the task has been running to the
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			accumulated time so far.  The time the task started running was
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			stored in ulTaskSwitchedInTime.  Note that there is no overflow
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protection here so count values are only valid until the timer
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			overflows.  The guard against negative values is to protect
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			against suspect run time stat counter implementations - which
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			are provided by the application, not the kernel. */
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalRunTime > ulTaskSwitchedInTime )
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTaskSwitchedInTime = ulTotalRunTime;
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Before the currently running task is switched out, save its errno. */
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* After the new task is switched in, update the global errno. */
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task.
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for additional information. */
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 60


3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 61


3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TICKLESS_IDLE != 0 )
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			might be set to the blocked task's time out time.  If the task is
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked for a reason other than a timeout xNextTaskUnblockTime is
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			normally left unchanged, because it is automatically reset to a new
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			value when the tick count equals xNextTaskUnblockTime.  However if
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			tickless idling is used it might be more important to enter sleep mode
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			at the earliest possible time - so reset xNextTaskUnblockTime here to
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ensure it is updated at the earliest possible time. */
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvResetNextTaskUnblockTime();
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 62


3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 63


3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a context switch is required.  This function is called with the
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 64


3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait = 0;
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 65


3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	any. */
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 66


3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 67


3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if the application does not want
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function must be called from a critical section. */
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 68


3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB != NULL );
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 69


3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 70


3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TCB_t *pxTCB;
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		being called too often in the idle task. */
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvDeleteTCB( pxTCB );
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 71


3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		state is just set to whatever is passed in. */
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( eState == eSuspended )
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						vTaskSuspendAll();
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) xTaskResumeAll();
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 72


3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 106              		.loc 1 3800 0
 107              		.cfi_startproc
 108              		@ args = 0, pretend = 0, frame = 0
 109              		@ frame_needed = 0, uses_anonymous_args = 0
 110              		@ link register save eliminated.
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 73


 111              	.LVL9:
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
 112              		.loc 1 3801 0
 113 0000 0023     		movs	r3, #0
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 114              		.loc 1 3803 0
 115 0002 01E0     		b	.L12
 116              	.LVL10:
 117              	.L13:
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 118              		.loc 1 3805 0
 119 0004 0130     		adds	r0, r0, #1
 120              	.LVL11:
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
 121              		.loc 1 3806 0
 122 0006 0133     		adds	r3, r3, #1
 123              	.LVL12:
 124              	.L12:
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 125              		.loc 1 3803 0
 126 0008 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 127 000a A52A     		cmp	r2, #165
 128 000c FAD0     		beq	.L13
 129              	.LVL13:
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 130              		.loc 1 3812 0
 131 000e C3F38F00 		ubfx	r0, r3, #2, #16
 132              	.LVL14:
 133 0012 7047     		bx	lr
 134              		.cfi_endproc
 135              	.LFE54:
 137              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 138              		.align	1
 139              		.syntax unified
 140              		.thumb
 141              		.thumb_func
 142              		.fpu fpv4-sp-d16
 144              	prvResetNextTaskUnblockTime:
 145              	.LFB57:
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	user to determine the return type.  It gets around the problem of the value
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	overflowing on 8-bit types without breaking backward compatibility for
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	applications that expect an 8-bit return type. */
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 74


3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxReturn;
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the same except for their return type.  Using configSTACK_DEPTH_TYPE
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		allows the user to determine the return type.  It gets around the
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		problem of the value overflowing on 8-bit types without breaking
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		backward compatibility for applications that expect an 8-bit return
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		type. */
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 75


3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level.
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for additional information. */
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 76


3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 146              		.loc 1 3944 0
 147              		.cfi_startproc
 148              		@ args = 0, pretend = 0, frame = 0
 149              		@ frame_needed = 0, uses_anonymous_args = 0
 150              		@ link register save eliminated.
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 151              		.loc 1 3947 0
 152 0000 084B     		ldr	r3, .L18
 153 0002 1B68     		ldr	r3, [r3]
 154 0004 1B68     		ldr	r3, [r3]
 155 0006 3BB1     		cbz	r3, .L17
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
 156              		.loc 1 3961 0
 157 0008 064B     		ldr	r3, .L18
 158 000a 1B68     		ldr	r3, [r3]
 159 000c DB68     		ldr	r3, [r3, #12]
 160 000e DB68     		ldr	r3, [r3, #12]
 161              	.LVL15:
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 162              		.loc 1 3962 0
 163 0010 5A68     		ldr	r2, [r3, #4]
 164 0012 054B     		ldr	r3, .L18+4
 165              	.LVL16:
 166 0014 1A60     		str	r2, [r3]
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 167              		.loc 1 3964 0
 168 0016 7047     		bx	lr
 169              	.L17:
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 170              		.loc 1 3953 0
 171 0018 034B     		ldr	r3, .L18+4
 172 001a 4FF0FF32 		mov	r2, #-1
 173 001e 1A60     		str	r2, [r3]
 174 0020 7047     		bx	lr
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 77


 175              	.L19:
 176 0022 00BF     		.align	2
 177              	.L18:
 178 0024 00000000 		.word	.LANCHOR2
 179 0028 00000000 		.word	.LANCHOR3
 180              		.cfi_endproc
 181              	.LFE57:
 183              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 184              		.align	1
 185              		.syntax unified
 186              		.thumb
 187              		.thumb_func
 188              		.fpu fpv4-sp-d16
 190              	prvInitialiseNewTask:
 191              	.LFB10:
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 192              		.loc 1 832 0
 193              		.cfi_startproc
 194              		@ args = 16, pretend = 0, frame = 0
 195              		@ frame_needed = 0, uses_anonymous_args = 0
 196              	.LVL17:
 197 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 198              	.LCFI0:
 199              		.cfi_def_cfa_offset 32
 200              		.cfi_offset 4, -32
 201              		.cfi_offset 5, -28
 202              		.cfi_offset 6, -24
 203              		.cfi_offset 7, -20
 204              		.cfi_offset 8, -16
 205              		.cfi_offset 9, -12
 206              		.cfi_offset 10, -8
 207              		.cfi_offset 14, -4
 208 0004 8146     		mov	r9, r0
 209 0006 0D46     		mov	r5, r1
 210 0008 1746     		mov	r7, r2
 211 000a 9A46     		mov	r10, r3
 212 000c 089E     		ldr	r6, [sp, #32]
 213 000e DDF82480 		ldr	r8, [sp, #36]
 214 0012 0A9C     		ldr	r4, [sp, #40]
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 215              		.loc 1 854 0
 216 0014 9200     		lsls	r2, r2, #2
 217              	.LVL18:
 218 0016 A521     		movs	r1, #165
 219              	.LVL19:
 220 0018 206B     		ldr	r0, [r4, #48]
 221              	.LVL20:
 222 001a FFF7FEFF 		bl	memset
 223              	.LVL21:
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 224              		.loc 1 864 0
 225 001e 236B     		ldr	r3, [r4, #48]
 226 0020 07F18042 		add	r2, r7, #1073741824
 227 0024 013A     		subs	r2, r2, #1
 228 0026 03EB8207 		add	r7, r3, r2, lsl #2
 229              	.LVL22:
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 78


 230              		.loc 1 865 0
 231 002a 27F00707 		bic	r7, r7, #7
 232              	.LVL23:
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 233              		.loc 1 874 0
 234 002e 6764     		str	r7, [r4, #68]
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 235              		.loc 1 892 0
 236 0030 95B3     		cbz	r5, .L32
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 237              		.loc 1 894 0
 238 0032 0023     		movs	r3, #0
 239              	.LVL24:
 240              	.L21:
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 241              		.loc 1 894 0 is_stmt 0 discriminator 1
 242 0034 0F2B     		cmp	r3, #15
 243 0036 07D8     		bhi	.L23
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 244              		.loc 1 896 0 is_stmt 1
 245 0038 E95C     		ldrb	r1, [r5, r3]	@ zero_extendqisi2
 246 003a E218     		adds	r2, r4, r3
 247 003c 82F83410 		strb	r1, [r2, #52]
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 248              		.loc 1 901 0
 249 0040 EA5C     		ldrb	r2, [r5, r3]	@ zero_extendqisi2
 250 0042 0AB1     		cbz	r2, .L23
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 251              		.loc 1 894 0 discriminator 2
 252 0044 0133     		adds	r3, r3, #1
 253              	.LVL25:
 254 0046 F5E7     		b	.L21
 255              	.L23:
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 256              		.loc 1 913 0
 257 0048 0023     		movs	r3, #0
 258              	.LVL26:
 259 004a 84F84330 		strb	r3, [r4, #67]
 260              	.L25:
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 261              		.loc 1 924 0
 262 004e 062E     		cmp	r6, #6
 263 0050 00D9     		bls	.L26
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 264              		.loc 1 926 0
 265 0052 0626     		movs	r6, #6
 266              	.L26:
 267              	.LVL27:
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 268              		.loc 1 933 0
 269 0054 E662     		str	r6, [r4, #44]
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 270              		.loc 1 936 0
 271 0056 2665     		str	r6, [r4, #80]
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 272              		.loc 1 937 0
 273 0058 0025     		movs	r5, #0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 79


 274              	.LVL28:
 275 005a 6565     		str	r5, [r4, #84]
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 276              		.loc 1 941 0
 277 005c 201D     		adds	r0, r4, #4
 278 005e FFF7FEFF 		bl	vListInitialiseItem
 279              	.LVL29:
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 280              		.loc 1 942 0
 281 0062 04F11800 		add	r0, r4, #24
 282 0066 FFF7FEFF 		bl	vListInitialiseItem
 283              	.LVL30:
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 284              		.loc 1 946 0
 285 006a 2461     		str	r4, [r4, #16]
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 286              		.loc 1 949 0
 287 006c C6F10706 		rsb	r6, r6, #7
 288              	.LVL31:
 289 0070 A661     		str	r6, [r4, #24]
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 290              		.loc 1 950 0
 291 0072 6462     		str	r4, [r4, #36]
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 292              		.loc 1 960 0
 293 0074 A565     		str	r5, [r4, #88]
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 294              		.loc 1 966 0
 295 0076 E565     		str	r5, [r4, #92]
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 296              		.loc 1 992 0
 297 0078 2566     		str	r5, [r4, #96]
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 298              		.loc 1 993 0
 299 007a 84F86450 		strb	r5, [r4, #100]
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 300              		.loc 1 1058 0
 301 007e 5246     		mov	r2, r10
 302 0080 4946     		mov	r1, r9
 303 0082 3846     		mov	r0, r7
 304 0084 FFF7FEFF 		bl	pxPortInitialiseStack
 305              	.LVL32:
 306 0088 2060     		str	r0, [r4]
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 307              		.loc 1 1064 0
 308 008a B8F1000F 		cmp	r8, #0
 309 008e 01D0     		beq	.L20
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 310              		.loc 1 1068 0
 311 0090 C8F80040 		str	r4, [r8]
 312              	.L20:
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 313              		.loc 1 1074 0
 314 0094 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 315              	.LVL33:
 316              	.L32:
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 80


 317              		.loc 1 919 0
 318 0098 0023     		movs	r3, #0
 319 009a 84F83430 		strb	r3, [r4, #52]
 320 009e D6E7     		b	.L25
 321              		.cfi_endproc
 322              	.LFE10:
 324              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 325              		.align	1
 326              		.syntax unified
 327              		.thumb
 328              		.thumb_func
 329              		.fpu fpv4-sp-d16
 331              	prvInitialiseTaskLists:
 332              	.LFB50:
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
 333              		.loc 1 3608 0
 334              		.cfi_startproc
 335              		@ args = 0, pretend = 0, frame = 0
 336              		@ frame_needed = 0, uses_anonymous_args = 0
 337 0000 38B5     		push	{r3, r4, r5, lr}
 338              	.LCFI1:
 339              		.cfi_def_cfa_offset 16
 340              		.cfi_offset 3, -16
 341              		.cfi_offset 4, -12
 342              		.cfi_offset 5, -8
 343              		.cfi_offset 14, -4
 344              	.LVL34:
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 345              		.loc 1 3611 0
 346 0002 0024     		movs	r4, #0
 347 0004 07E0     		b	.L34
 348              	.LVL35:
 349              	.L35:
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 350              		.loc 1 3613 0 discriminator 3
 351 0006 04EB8402 		add	r2, r4, r4, lsl #2
 352 000a 9300     		lsls	r3, r2, #2
 353 000c 0E48     		ldr	r0, .L37
 354 000e 1844     		add	r0, r0, r3
 355 0010 FFF7FEFF 		bl	vListInitialise
 356              	.LVL36:
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 357              		.loc 1 3611 0 discriminator 3
 358 0014 0134     		adds	r4, r4, #1
 359              	.LVL37:
 360              	.L34:
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 361              		.loc 1 3611 0 is_stmt 0 discriminator 1
 362 0016 062C     		cmp	r4, #6
 363 0018 F5D9     		bls	.L35
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 364              		.loc 1 3616 0 is_stmt 1
 365 001a 0C4D     		ldr	r5, .L37+4
 366 001c 2846     		mov	r0, r5
 367 001e FFF7FEFF 		bl	vListInitialise
 368              	.LVL38:
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 81


 369              		.loc 1 3617 0
 370 0022 0B4C     		ldr	r4, .L37+8
 371              	.LVL39:
 372 0024 2046     		mov	r0, r4
 373 0026 FFF7FEFF 		bl	vListInitialise
 374              	.LVL40:
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 375              		.loc 1 3618 0
 376 002a 0A48     		ldr	r0, .L37+12
 377 002c FFF7FEFF 		bl	vListInitialise
 378              	.LVL41:
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 379              		.loc 1 3622 0
 380 0030 0948     		ldr	r0, .L37+16
 381 0032 FFF7FEFF 		bl	vListInitialise
 382              	.LVL42:
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 383              		.loc 1 3628 0
 384 0036 0948     		ldr	r0, .L37+20
 385 0038 FFF7FEFF 		bl	vListInitialise
 386              	.LVL43:
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 387              		.loc 1 3634 0
 388 003c 084B     		ldr	r3, .L37+24
 389 003e 1D60     		str	r5, [r3]
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 390              		.loc 1 3635 0
 391 0040 084B     		ldr	r3, .L37+28
 392 0042 1C60     		str	r4, [r3]
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 393              		.loc 1 3636 0
 394 0044 38BD     		pop	{r3, r4, r5, pc}
 395              	.L38:
 396 0046 00BF     		.align	2
 397              	.L37:
 398 0048 00000000 		.word	.LANCHOR4
 399 004c 00000000 		.word	.LANCHOR5
 400 0050 00000000 		.word	.LANCHOR6
 401 0054 00000000 		.word	.LANCHOR1
 402 0058 00000000 		.word	.LANCHOR7
 403 005c 00000000 		.word	.LANCHOR0
 404 0060 00000000 		.word	.LANCHOR2
 405 0064 00000000 		.word	.LANCHOR8
 406              		.cfi_endproc
 407              	.LFE50:
 409              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 410              		.align	1
 411              		.syntax unified
 412              		.thumb
 413              		.thumb_func
 414              		.fpu fpv4-sp-d16
 416              	prvAddNewTaskToReadyList:
 417              	.LFB11:
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 418              		.loc 1 1078 0
 419              		.cfi_startproc
 420              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 82


 421              		@ frame_needed = 0, uses_anonymous_args = 0
 422              	.LVL44:
 423 0000 10B5     		push	{r4, lr}
 424              	.LCFI2:
 425              		.cfi_def_cfa_offset 8
 426              		.cfi_offset 4, -8
 427              		.cfi_offset 14, -4
 428 0002 0446     		mov	r4, r0
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 429              		.loc 1 1081 0
 430 0004 FFF7FEFF 		bl	vPortEnterCritical
 431              	.LVL45:
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 432              		.loc 1 1083 0
 433 0008 214A     		ldr	r2, .L46
 434 000a 1368     		ldr	r3, [r2]
 435 000c 0133     		adds	r3, r3, #1
 436 000e 1360     		str	r3, [r2]
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 437              		.loc 1 1084 0
 438 0010 204B     		ldr	r3, .L46+4
 439 0012 1B68     		ldr	r3, [r3]
 440 0014 5BB1     		cbz	r3, .L44
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 441              		.loc 1 1107 0
 442 0016 204B     		ldr	r3, .L46+8
 443 0018 1B68     		ldr	r3, [r3]
 444 001a 6BB9     		cbnz	r3, .L41
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 445              		.loc 1 1109 0
 446 001c 1D4B     		ldr	r3, .L46+4
 447 001e 1B68     		ldr	r3, [r3]
 448 0020 DA6A     		ldr	r2, [r3, #44]
 449 0022 E36A     		ldr	r3, [r4, #44]
 450 0024 9A42     		cmp	r2, r3
 451 0026 07D8     		bhi	.L41
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 452              		.loc 1 1111 0
 453 0028 1A4B     		ldr	r3, .L46+4
 454 002a 1C60     		str	r4, [r3]
 455 002c 04E0     		b	.L41
 456              	.L44:
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 457              		.loc 1 1088 0
 458 002e 194B     		ldr	r3, .L46+4
 459 0030 1C60     		str	r4, [r3]
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 460              		.loc 1 1090 0
 461 0032 1368     		ldr	r3, [r2]
 462 0034 012B     		cmp	r3, #1
 463 0036 27D0     		beq	.L45
 464              	.L41:
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 465              		.loc 1 1124 0
 466 0038 184A     		ldr	r2, .L46+12
 467 003a 1368     		ldr	r3, [r2]
 468 003c 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 83


 469 003e 1360     		str	r3, [r2]
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 470              		.loc 1 1129 0
 471 0040 A364     		str	r3, [r4, #72]
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 472              		.loc 1 1134 0
 473 0042 E36A     		ldr	r3, [r4, #44]
 474 0044 0122     		movs	r2, #1
 475 0046 9A40     		lsls	r2, r2, r3
 476 0048 1549     		ldr	r1, .L46+16
 477 004a 0868     		ldr	r0, [r1]
 478 004c 0243     		orrs	r2, r2, r0
 479 004e 0A60     		str	r2, [r1]
 480 0050 03EB8303 		add	r3, r3, r3, lsl #2
 481 0054 9A00     		lsls	r2, r3, #2
 482 0056 211D     		adds	r1, r4, #4
 483 0058 1248     		ldr	r0, .L46+20
 484 005a 1044     		add	r0, r0, r2
 485 005c FFF7FEFF 		bl	vListInsertEnd
 486              	.LVL46:
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 487              		.loc 1 1138 0
 488 0060 FFF7FEFF 		bl	vPortExitCritical
 489              	.LVL47:
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 490              		.loc 1 1140 0
 491 0064 0C4B     		ldr	r3, .L46+8
 492 0066 1B68     		ldr	r3, [r3]
 493 0068 6BB1     		cbz	r3, .L39
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 494              		.loc 1 1144 0
 495 006a 0A4B     		ldr	r3, .L46+4
 496 006c 1B68     		ldr	r3, [r3]
 497 006e DA6A     		ldr	r2, [r3, #44]
 498 0070 E36A     		ldr	r3, [r4, #44]
 499 0072 9A42     		cmp	r2, r3
 500 0074 07D2     		bcs	.L39
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 501              		.loc 1 1146 0
 502 0076 0C4B     		ldr	r3, .L46+24
 503 0078 4FF08052 		mov	r2, #268435456
 504 007c 1A60     		str	r2, [r3]
 505              		.syntax unified
 506              	@ 1146 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 507 007e BFF34F8F 		dsb
 508              	@ 0 "" 2
 509              	@ 1146 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 510 0082 BFF36F8F 		isb
 511              	@ 0 "" 2
 512              		.thumb
 513              		.syntax unified
 514              	.L39:
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 515              		.loc 1 1157 0
 516 0086 10BD     		pop	{r4, pc}
 517              	.LVL48:
 518              	.L45:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 84


1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 519              		.loc 1 1095 0
 520 0088 FFF7FEFF 		bl	prvInitialiseTaskLists
 521              	.LVL49:
 522 008c D4E7     		b	.L41
 523              	.L47:
 524 008e 00BF     		.align	2
 525              	.L46:
 526 0090 00000000 		.word	.LANCHOR9
 527 0094 00000000 		.word	.LANCHOR10
 528 0098 00000000 		.word	.LANCHOR11
 529 009c 00000000 		.word	.LANCHOR12
 530 00a0 00000000 		.word	.LANCHOR13
 531 00a4 00000000 		.word	.LANCHOR4
 532 00a8 04ED00E0 		.word	-536810236
 533              		.cfi_endproc
 534              	.LFE11:
 536              		.section	.text.prvDeleteTCB,"ax",%progbits
 537              		.align	1
 538              		.syntax unified
 539              		.thumb
 540              		.thumb_func
 541              		.fpu fpv4-sp-d16
 543              	prvDeleteTCB:
 544              	.LFB56:
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 545              		.loc 1 3888 0
 546              		.cfi_startproc
 547              		@ args = 0, pretend = 0, frame = 0
 548              		@ frame_needed = 0, uses_anonymous_args = 0
 549              	.LVL50:
 550 0000 10B5     		push	{r4, lr}
 551              	.LCFI3:
 552              		.cfi_def_cfa_offset 8
 553              		.cfi_offset 4, -8
 554              		.cfi_offset 14, -4
 555 0002 0446     		mov	r4, r0
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 556              		.loc 1 3916 0
 557 0004 90F86530 		ldrb	r3, [r0, #101]	@ zero_extendqisi2
 558 0008 33B9     		cbnz	r3, .L49
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
 559              		.loc 1 3920 0
 560 000a 006B     		ldr	r0, [r0, #48]
 561              	.LVL51:
 562 000c FFF7FEFF 		bl	vPortFree
 563              	.LVL52:
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 564              		.loc 1 3921 0
 565 0010 2046     		mov	r0, r4
 566 0012 FFF7FEFF 		bl	vPortFree
 567              	.LVL53:
 568              	.L48:
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 569              		.loc 1 3938 0
 570 0016 10BD     		pop	{r4, pc}
 571              	.LVL54:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 85


 572              	.L49:
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 573              		.loc 1 3923 0
 574 0018 012B     		cmp	r3, #1
 575 001a 0AD0     		beq	.L54
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 576              		.loc 1 3933 0
 577 001c 022B     		cmp	r3, #2
 578 001e FAD0     		beq	.L48
 579              	.LBB120:
 580              	.LBB121:
 581              		.loc 2 195 0
 582              		.syntax unified
 583              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 584 0020 4FF05003 			mov r3, #80												
 585 0024 83F31188 		msr basepri, r3											
 586 0028 BFF36F8F 		isb														
 587 002c BFF34F8F 		dsb														
 588              	
 589              	@ 0 "" 2
 590              	.LVL55:
 591              		.thumb
 592              		.syntax unified
 593              	.L52:
 594 0030 FEE7     		b	.L52
 595              	.L54:
 596              	.LBE121:
 597              	.LBE120:
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 598              		.loc 1 3927 0
 599 0032 FFF7FEFF 		bl	vPortFree
 600              	.LVL56:
 601 0036 EEE7     		b	.L48
 602              		.cfi_endproc
 603              	.LFE56:
 605              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 606              		.align	1
 607              		.syntax unified
 608              		.thumb
 609              		.thumb_func
 610              		.fpu fpv4-sp-d16
 612              	prvCheckTasksWaitingTermination:
 613              	.LFB51:
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 614              		.loc 1 3640 0
 615              		.cfi_startproc
 616              		@ args = 0, pretend = 0, frame = 0
 617              		@ frame_needed = 0, uses_anonymous_args = 0
 618              	.LBB122:
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 619              		.loc 1 3650 0
 620 0000 0F4B     		ldr	r3, .L62
 621 0002 1B68     		ldr	r3, [r3]
 622 0004 D3B1     		cbz	r3, .L61
 623              	.LBE122:
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 624              		.loc 1 3640 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 86


 625 0006 10B5     		push	{r4, lr}
 626              	.LCFI4:
 627              		.cfi_def_cfa_offset 8
 628              		.cfi_offset 4, -8
 629              		.cfi_offset 14, -4
 630              	.L57:
 631              	.LBB123:
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 632              		.loc 1 3652 0
 633 0008 FFF7FEFF 		bl	vPortEnterCritical
 634              	.LVL57:
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 635              		.loc 1 3654 0
 636 000c 0D4B     		ldr	r3, .L62+4
 637 000e DB68     		ldr	r3, [r3, #12]
 638 0010 DC68     		ldr	r4, [r3, #12]
 639              	.LVL58:
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 640              		.loc 1 3655 0
 641 0012 201D     		adds	r0, r4, #4
 642 0014 FFF7FEFF 		bl	uxListRemove
 643              	.LVL59:
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 644              		.loc 1 3656 0
 645 0018 0B4A     		ldr	r2, .L62+8
 646 001a 1368     		ldr	r3, [r2]
 647 001c 013B     		subs	r3, r3, #1
 648 001e 1360     		str	r3, [r2]
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 649              		.loc 1 3657 0
 650 0020 074A     		ldr	r2, .L62
 651 0022 1368     		ldr	r3, [r2]
 652 0024 013B     		subs	r3, r3, #1
 653 0026 1360     		str	r3, [r2]
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 654              		.loc 1 3659 0
 655 0028 FFF7FEFF 		bl	vPortExitCritical
 656              	.LVL60:
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 657              		.loc 1 3661 0
 658 002c 2046     		mov	r0, r4
 659 002e FFF7FEFF 		bl	prvDeleteTCB
 660              	.LVL61:
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 661              		.loc 1 3650 0
 662 0032 034B     		ldr	r3, .L62
 663 0034 1B68     		ldr	r3, [r3]
 664 0036 002B     		cmp	r3, #0
 665 0038 E6D1     		bne	.L57
 666              	.LBE123:
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 667              		.loc 1 3665 0
 668 003a 10BD     		pop	{r4, pc}
 669              	.LVL62:
 670              	.L61:
 671              	.LCFI5:
 672              		.cfi_def_cfa_offset 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 87


 673              		.cfi_restore 4
 674              		.cfi_restore 14
 675 003c 7047     		bx	lr
 676              	.L63:
 677 003e 00BF     		.align	2
 678              	.L62:
 679 0040 00000000 		.word	.LANCHOR14
 680 0044 00000000 		.word	.LANCHOR7
 681 0048 00000000 		.word	.LANCHOR9
 682              		.cfi_endproc
 683              	.LFE51:
 685              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 686              		.align	1
 687              		.syntax unified
 688              		.thumb
 689              		.thumb_func
 690              		.fpu fpv4-sp-d16
 692              	prvAddCurrentTaskToDelayedList:
 693              	.LFB75:
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 88


4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not being used for anything else. */
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 89


4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Inheritance occurred. */
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					current priority of the mutex holder is not lower than the
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex.
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority, but inheritance would have occurred if that had
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					not been the case. */
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 90


4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding task then it must be the running state task.  Remove
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the holding task from the ready/delayed list. */
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 91


4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			one mutex. */
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holding task's base priority and the priority of the highest
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Does the priority need to change? */
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task has timed out because it already holds the
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					its own priority. */
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority to facilitate determining the subject task's
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only reset the event list item value if the value is not
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 92


4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					being used for anything else. */
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					then the task that holds the mutex could be in either the
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					from its current state list if it is in the Ready state as
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the task's priority is going to change and there is one
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready list per priority. */
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* It is known that the task is in its ready list so
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							there is no need to check again and the port level
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							reset macro can be called directly. */
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 93


4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 94


4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 95


4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eInvalid:		/* Fall through. */
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = ( char ) 0x00;
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 96


4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 97


4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0UL )
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 98


4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 99


4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 100


4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 101


4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
4762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
4791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 102


4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 103


4858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 104


4915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
4925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 105


4972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
5000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
5001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
5002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
5003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
5004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
5007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
5009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
5019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
5027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 106


5029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
5030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
5031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
5033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
5035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
5036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
5037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
5038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
5040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
5042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
5043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
5044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
5045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
5046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
5047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
5048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
5049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
5050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
5051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
5053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
5055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
5057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
5058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
5060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
5061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
5062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
5064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
5066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
5067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
5068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
5070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
5073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
5075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
5076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
5080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
5081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 107


5086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
5087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
5088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
5089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
5090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
5091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
5092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
5095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
5097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
5113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
5115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
5116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
5120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
5122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
5124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
5126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
5127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
5134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
5136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 108


5143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyValueClear( TaskHandle_t xTask, uint32_t ulBitsToClear )
5144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
5146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
5147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
5151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
5153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Return the notification as it was before the bits were cleared,
5155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then clear the bit mask. */
5156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
5157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
5158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
5160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
5162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskGetIdleRunTimeCounter( void )
5170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle->ulRunTimeCounter;
5172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
5175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
5178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 694              		.loc 1 5178 0
 695              		.cfi_startproc
 696              		@ args = 0, pretend = 0, frame = 0
 697              		@ frame_needed = 0, uses_anonymous_args = 0
 698              	.LVL63:
 699 0000 70B5     		push	{r4, r5, r6, lr}
 700              	.LCFI6:
 701              		.cfi_def_cfa_offset 16
 702              		.cfi_offset 4, -16
 703              		.cfi_offset 5, -12
 704              		.cfi_offset 6, -8
 705              		.cfi_offset 14, -4
 706 0002 0446     		mov	r4, r0
 707 0004 0E46     		mov	r6, r1
5179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
5180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 708              		.loc 1 5180 0
 709 0006 1D4B     		ldr	r3, .L72
 710 0008 1D68     		ldr	r5, [r3]
 711              	.LVL64:
5181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 109


5182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
5183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
5185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
5186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
5187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
5188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
5190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
5192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
5193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 712              		.loc 1 5193 0
 713 000a 1D4B     		ldr	r3, .L72+4
 714 000c 1868     		ldr	r0, [r3]
 715              	.LVL65:
 716 000e 0430     		adds	r0, r0, #4
 717 0010 FFF7FEFF 		bl	uxListRemove
 718              	.LVL66:
 719 0014 50B9     		cbnz	r0, .L65
5194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
5196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
5197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
 720              		.loc 1 5197 0
 721 0016 1A4B     		ldr	r3, .L72+4
 722 0018 1B68     		ldr	r3, [r3]
 723 001a DA6A     		ldr	r2, [r3, #44]
 724 001c 0123     		movs	r3, #1
 725 001e 03FA02F2 		lsl	r2, r3, r2
 726 0022 1849     		ldr	r1, .L72+8
 727 0024 0B68     		ldr	r3, [r1]
 728 0026 23EA0203 		bic	r3, r3, r2
 729 002a 0B60     		str	r3, [r1]
 730              	.L65:
5198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
5200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
5202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
5205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 731              		.loc 1 5206 0
 732 002c B4F1FF3F 		cmp	r4, #-1
 733 0030 13D0     		beq	.L70
 734              	.L66:
5207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
5209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
5210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
5211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
5212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 110


5216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
5217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
5218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 735              		.loc 1 5218 0
 736 0032 2C44     		add	r4, r4, r5
 737              	.LVL67:
5219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
5221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 738              		.loc 1 5221 0
 739 0034 124B     		ldr	r3, .L72+4
 740 0036 1B68     		ldr	r3, [r3]
 741 0038 5C60     		str	r4, [r3, #4]
5222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 742              		.loc 1 5223 0
 743 003a A542     		cmp	r5, r4
 744 003c 16D8     		bhi	.L71
5224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
5232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
5233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 745              		.loc 1 5233 0
 746 003e 124B     		ldr	r3, .L72+12
 747 0040 1868     		ldr	r0, [r3]
 748 0042 0F4B     		ldr	r3, .L72+4
 749 0044 1968     		ldr	r1, [r3]
 750 0046 0431     		adds	r1, r1, #4
 751 0048 FFF7FEFF 		bl	vListInsert
 752              	.LVL68:
5234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
5236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
5237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
5238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 753              		.loc 1 5238 0
 754 004c 0F4B     		ldr	r3, .L72+16
 755 004e 1B68     		ldr	r3, [r3]
 756 0050 A342     		cmp	r3, r4
 757 0052 12D9     		bls	.L64
5239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 758              		.loc 1 5240 0
 759 0054 0D4B     		ldr	r3, .L72+16
 760 0056 1C60     		str	r4, [r3]
5241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 111


5247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
5250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
5252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
5253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		will manage it correctly. */
5254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
5255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
5257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
5260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
5262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
5267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
5270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			too. */
5272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
5284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 761              		.loc 1 5286 0
 762 0058 0FE0     		b	.L64
 763              	.LVL69:
 764              	.L70:
5206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 765              		.loc 1 5206 0 discriminator 1
 766 005a 002E     		cmp	r6, #0
 767 005c E9D0     		beq	.L66
5211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 768              		.loc 1 5211 0
 769 005e 084B     		ldr	r3, .L72+4
 770 0060 1968     		ldr	r1, [r3]
 771 0062 0431     		adds	r1, r1, #4
 772 0064 0A48     		ldr	r0, .L72+20
 773 0066 FFF7FEFF 		bl	vListInsertEnd
 774              	.LVL70:
 775 006a 06E0     		b	.L64
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 112


 776              	.LVL71:
 777              	.L71:
5227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 778              		.loc 1 5227 0
 779 006c 094B     		ldr	r3, .L72+24
 780 006e 1868     		ldr	r0, [r3]
 781 0070 034B     		ldr	r3, .L72+4
 782 0072 1968     		ldr	r1, [r3]
 783 0074 0431     		adds	r1, r1, #4
 784 0076 FFF7FEFF 		bl	vListInsert
 785              	.LVL72:
 786              	.L64:
 787              		.loc 1 5286 0
 788 007a 70BD     		pop	{r4, r5, r6, pc}
 789              	.LVL73:
 790              	.L73:
 791              		.align	2
 792              	.L72:
 793 007c 00000000 		.word	.LANCHOR15
 794 0080 00000000 		.word	.LANCHOR10
 795 0084 00000000 		.word	.LANCHOR13
 796 0088 00000000 		.word	.LANCHOR2
 797 008c 00000000 		.word	.LANCHOR3
 798 0090 00000000 		.word	.LANCHOR0
 799 0094 00000000 		.word	.LANCHOR8
 800              		.cfi_endproc
 801              	.LFE75:
 803              		.section	.text.prvIdleTask,"ax",%progbits
 804              		.align	1
 805              		.syntax unified
 806              		.thumb
 807              		.thumb_func
 808              		.fpu fpv4-sp-d16
 810              	prvIdleTask:
 811              	.LFB49:
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
 812              		.loc 1 3393 0
 813              		.cfi_startproc
 814              		@ Volatile: function does not return.
 815              		@ args = 0, pretend = 0, frame = 0
 816              		@ frame_needed = 0, uses_anonymous_args = 0
 817              	.LVL74:
 818 0000 08B5     		push	{r3, lr}
 819              	.LCFI7:
 820              		.cfi_def_cfa_offset 8
 821              		.cfi_offset 3, -8
 822              		.cfi_offset 14, -4
 823 0002 01E0     		b	.L76
 824              	.LVL75:
 825              	.L75:
 826              	.LBB124:
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 827              		.loc 1 3452 0
 828 0004 FFF7FEFF 		bl	vApplicationIdleHook
 829              	.LVL76:
 830              	.L76:
 831              	.LBE124:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 113


3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 832              		.loc 1 3409 0
 833 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 834              	.LVL77:
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 835              		.loc 1 3432 0
 836 000c 064B     		ldr	r3, .L78
 837 000e 1B68     		ldr	r3, [r3]
 838 0010 012B     		cmp	r3, #1
 839 0012 F7D9     		bls	.L75
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 840              		.loc 1 3434 0
 841 0014 054B     		ldr	r3, .L78+4
 842 0016 4FF08052 		mov	r2, #268435456
 843 001a 1A60     		str	r2, [r3]
 844              		.syntax unified
 845              	@ 3434 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 846 001c BFF34F8F 		dsb
 847              	@ 0 "" 2
 848              	@ 3434 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 849 0020 BFF36F8F 		isb
 850              	@ 0 "" 2
 851              		.thumb
 852              		.syntax unified
 853 0024 EEE7     		b	.L75
 854              	.L79:
 855 0026 00BF     		.align	2
 856              	.L78:
 857 0028 00000000 		.word	.LANCHOR4
 858 002c 04ED00E0 		.word	-536810236
 859              		.cfi_endproc
 860              	.LFE49:
 862              		.section	.text.prvWriteNameToBuffer,"ax",%progbits
 863              		.align	1
 864              		.syntax unified
 865              		.thumb
 866              		.thumb_func
 867              		.fpu fpv4-sp-d16
 869              	prvWriteNameToBuffer:
 870              	.LFB63:
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
 871              		.loc 1 4353 0
 872              		.cfi_startproc
 873              		@ args = 0, pretend = 0, frame = 0
 874              		@ frame_needed = 0, uses_anonymous_args = 0
 875              	.LVL78:
 876 0000 10B5     		push	{r4, lr}
 877              	.LCFI8:
 878              		.cfi_def_cfa_offset 8
 879              		.cfi_offset 4, -8
 880              		.cfi_offset 14, -4
 881 0002 0446     		mov	r4, r0
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 882              		.loc 1 4357 0
 883 0004 FFF7FEFF 		bl	strcpy
 884              	.LVL79:
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 114


 885              		.loc 1 4361 0
 886 0008 2046     		mov	r0, r4
 887 000a FFF7FEFF 		bl	strlen
 888              	.LVL80:
 889 000e 02E0     		b	.L81
 890              	.L82:
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 891              		.loc 1 4363 0 discriminator 3
 892 0010 2023     		movs	r3, #32
 893 0012 2354     		strb	r3, [r4, r0]
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 894              		.loc 1 4361 0 discriminator 3
 895 0014 0130     		adds	r0, r0, #1
 896              	.LVL81:
 897              	.L81:
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 898              		.loc 1 4361 0 is_stmt 0 discriminator 1
 899 0016 0E28     		cmp	r0, #14
 900 0018 FAD9     		bls	.L82
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 901              		.loc 1 4367 0 is_stmt 1
 902 001a 0023     		movs	r3, #0
 903 001c 2354     		strb	r3, [r4, r0]
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 904              		.loc 1 4371 0
 905 001e 2044     		add	r0, r0, r4
 906              	.LVL82:
 907 0020 10BD     		pop	{r4, pc}
 908              		.cfi_endproc
 909              	.LFE63:
 911              		.section	.text.xTaskCreateStatic,"ax",%progbits
 912              		.align	1
 913              		.global	xTaskCreateStatic
 914              		.syntax unified
 915              		.thumb
 916              		.thumb_func
 917              		.fpu fpv4-sp-d16
 919              	xTaskCreateStatic:
 920              	.LFB8:
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 921              		.loc 1 588 0
 922              		.cfi_startproc
 923              		@ args = 12, pretend = 0, frame = 8
 924              		@ frame_needed = 0, uses_anonymous_args = 0
 925              	.LVL83:
 926 0000 70B5     		push	{r4, r5, r6, lr}
 927              	.LCFI9:
 928              		.cfi_def_cfa_offset 16
 929              		.cfi_offset 4, -16
 930              		.cfi_offset 5, -12
 931              		.cfi_offset 6, -8
 932              		.cfi_offset 14, -4
 933 0002 86B0     		sub	sp, sp, #24
 934              	.LCFI10:
 935              		.cfi_def_cfa_offset 40
 936 0004 0B9D     		ldr	r5, [sp, #44]
 937 0006 0C9C     		ldr	r4, [sp, #48]
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 115


 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 938              		.loc 1 592 0
 939 0008 45B9     		cbnz	r5, .L85
 940              	.LBB125:
 941              	.LBB126:
 942              		.loc 2 195 0
 943              		.syntax unified
 944              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 945 000a 4FF05003 			mov r3, #80												
 946 000e 83F31188 		msr basepri, r3											
 947 0012 BFF36F8F 		isb														
 948 0016 BFF34F8F 		dsb														
 949              	
 950              	@ 0 "" 2
 951              	.LVL84:
 952              		.thumb
 953              		.syntax unified
 954              	.L86:
 955 001a FEE7     		b	.L86
 956              	.LVL85:
 957              	.L85:
 958              	.LBE126:
 959              	.LBE125:
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 960              		.loc 1 593 0
 961 001c 44B9     		cbnz	r4, .L87
 962              	.LBB127:
 963              	.LBB128:
 964              		.loc 2 195 0
 965              		.syntax unified
 966              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 967 001e 4FF05003 			mov r3, #80												
 968 0022 83F31188 		msr basepri, r3											
 969 0026 BFF36F8F 		isb														
 970 002a BFF34F8F 		dsb														
 971              	
 972              	@ 0 "" 2
 973              	.LVL86:
 974              		.thumb
 975              		.syntax unified
 976              	.L88:
 977 002e FEE7     		b	.L88
 978              	.LVL87:
 979              	.L87:
 980              	.LBE128:
 981              	.LBE127:
 982              	.LBB129:
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 983              		.loc 1 600 0
 984 0030 6C26     		movs	r6, #108
 985 0032 0496     		str	r6, [sp, #16]
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 986              		.loc 1 601 0
 987 0034 049E     		ldr	r6, [sp, #16]
 988 0036 6C2E     		cmp	r6, #108
 989 0038 08D0     		beq	.L89
 990              	.LBB130:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 116


 991              	.LBB131:
 992              		.loc 2 195 0
 993              		.syntax unified
 994              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 995 003a 4FF05003 			mov r3, #80												
 996 003e 83F31188 		msr basepri, r3											
 997 0042 BFF36F8F 		isb														
 998 0046 BFF34F8F 		dsb														
 999              	
 1000              	@ 0 "" 2
 1001              	.LVL88:
 1002              		.thumb
 1003              		.syntax unified
 1004              	.L90:
 1005 004a FEE7     		b	.L90
 1006              	.LVL89:
 1007              	.L89:
 1008              	.LBE131:
 1009              	.LBE130:
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1010              		.loc 1 602 0
 1011 004c 049E     		ldr	r6, [sp, #16]
 1012              	.LVL90:
 1013              	.LBE129:
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1014              		.loc 1 612 0
 1015 004e 2563     		str	r5, [r4, #48]
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1016              		.loc 1 618 0
 1017 0050 0225     		movs	r5, #2
 1018 0052 84F86550 		strb	r5, [r4, #101]
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 1019              		.loc 1 622 0
 1020 0056 0025     		movs	r5, #0
 1021 0058 0395     		str	r5, [sp, #12]
 1022 005a 0294     		str	r4, [sp, #8]
 1023 005c 05AD     		add	r5, sp, #20
 1024 005e 0195     		str	r5, [sp, #4]
 1025 0060 0A9D     		ldr	r5, [sp, #40]
 1026 0062 0095     		str	r5, [sp]
 1027 0064 FFF7FEFF 		bl	prvInitialiseNewTask
 1028              	.LVL91:
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1029              		.loc 1 623 0
 1030 0068 2046     		mov	r0, r4
 1031 006a FFF7FEFF 		bl	prvAddNewTaskToReadyList
 1032              	.LVL92:
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1033              		.loc 1 631 0
 1034 006e 0598     		ldr	r0, [sp, #20]
 1035 0070 06B0     		add	sp, sp, #24
 1036              	.LCFI11:
 1037              		.cfi_def_cfa_offset 16
 1038              		@ sp needed
 1039 0072 70BD     		pop	{r4, r5, r6, pc}
 1040              		.cfi_endproc
 1041              	.LFE8:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 117


 1043              		.section	.text.xTaskCreate,"ax",%progbits
 1044              		.align	1
 1045              		.global	xTaskCreate
 1046              		.syntax unified
 1047              		.thumb
 1048              		.thumb_func
 1049              		.fpu fpv4-sp-d16
 1051              	xTaskCreate:
 1052              	.LFB9:
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 1053              		.loc 1 739 0
 1054              		.cfi_startproc
 1055              		@ args = 8, pretend = 0, frame = 0
 1056              		@ frame_needed = 0, uses_anonymous_args = 0
 1057              	.LVL93:
 1058 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 1059              	.LCFI12:
 1060              		.cfi_def_cfa_offset 28
 1061              		.cfi_offset 4, -28
 1062              		.cfi_offset 5, -24
 1063              		.cfi_offset 6, -20
 1064              		.cfi_offset 7, -16
 1065              		.cfi_offset 8, -12
 1066              		.cfi_offset 9, -8
 1067              		.cfi_offset 14, -4
 1068 0004 85B0     		sub	sp, sp, #20
 1069              	.LCFI13:
 1070              		.cfi_def_cfa_offset 48
 1071 0006 0746     		mov	r7, r0
 1072 0008 8846     		mov	r8, r1
 1073 000a 1546     		mov	r5, r2
 1074 000c 9946     		mov	r9, r3
 1075              	.LBB132:
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1076              		.loc 1 773 0
 1077 000e 9000     		lsls	r0, r2, #2
 1078              	.LVL94:
 1079 0010 FFF7FEFF 		bl	pvPortMalloc
 1080              	.LVL95:
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1081              		.loc 1 775 0
 1082 0014 08B3     		cbz	r0, .L96
 1083 0016 0646     		mov	r6, r0
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1084              		.loc 1 778 0
 1085 0018 6C20     		movs	r0, #108
 1086              	.LVL96:
 1087 001a FFF7FEFF 		bl	pvPortMalloc
 1088              	.LVL97:
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1089              		.loc 1 780 0
 1090 001e 0446     		mov	r4, r0
 1091 0020 B8B1     		cbz	r0, .L94
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1092              		.loc 1 783 0
 1093 0022 0663     		str	r6, [r0, #48]
 1094              	.LVL98:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 118


 1095              	.L95:
 1096              	.LBE132:
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1097              		.loc 1 799 0
 1098 0024 E4B1     		cbz	r4, .L97
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1099              		.loc 1 805 0
 1100 0026 0023     		movs	r3, #0
 1101 0028 84F86530 		strb	r3, [r4, #101]
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 1102              		.loc 1 809 0
 1103 002c 0393     		str	r3, [sp, #12]
 1104 002e 0294     		str	r4, [sp, #8]
 1105 0030 0D9B     		ldr	r3, [sp, #52]
 1106 0032 0193     		str	r3, [sp, #4]
 1107 0034 0C9B     		ldr	r3, [sp, #48]
 1108 0036 0093     		str	r3, [sp]
 1109 0038 4B46     		mov	r3, r9
 1110 003a 2A46     		mov	r2, r5
 1111 003c 4146     		mov	r1, r8
 1112 003e 3846     		mov	r0, r7
 1113 0040 FFF7FEFF 		bl	prvInitialiseNewTask
 1114              	.LVL99:
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 1115              		.loc 1 810 0
 1116 0044 2046     		mov	r0, r4
 1117 0046 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 1118              	.LVL100:
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1119              		.loc 1 811 0
 1120 004a 0120     		movs	r0, #1
 1121              	.LVL101:
 1122              	.L92:
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1123              		.loc 1 819 0
 1124 004c 05B0     		add	sp, sp, #20
 1125              	.LCFI14:
 1126              		.cfi_remember_state
 1127              		.cfi_def_cfa_offset 28
 1128              		@ sp needed
 1129 004e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1130              	.LVL102:
 1131              	.L94:
 1132              	.LCFI15:
 1133              		.cfi_restore_state
 1134              	.LBB133:
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1135              		.loc 1 789 0
 1136 0052 3046     		mov	r0, r6
 1137              	.LVL103:
 1138 0054 FFF7FEFF 		bl	vPortFree
 1139              	.LVL104:
 1140 0058 E4E7     		b	.L95
 1141              	.LVL105:
 1142              	.L96:
 1143              	.LBE133:
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 119


 1144              		.loc 1 815 0
 1145 005a 4FF0FF30 		mov	r0, #-1
 1146              	.LVL106:
 1147 005e F5E7     		b	.L92
 1148              	.LVL107:
 1149              	.L97:
 1150 0060 4FF0FF30 		mov	r0, #-1
 1151              	.LVL108:
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1152              		.loc 1 818 0
 1153 0064 F2E7     		b	.L92
 1154              		.cfi_endproc
 1155              	.LFE9:
 1157              		.section	.text.vTaskDelete,"ax",%progbits
 1158              		.align	1
 1159              		.global	vTaskDelete
 1160              		.syntax unified
 1161              		.thumb
 1162              		.thumb_func
 1163              		.fpu fpv4-sp-d16
 1165              	vTaskDelete:
 1166              	.LFB12:
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1167              		.loc 1 1163 0
 1168              		.cfi_startproc
 1169              		@ args = 0, pretend = 0, frame = 0
 1170              		@ frame_needed = 0, uses_anonymous_args = 0
 1171              	.LVL109:
 1172 0000 38B5     		push	{r3, r4, r5, lr}
 1173              	.LCFI16:
 1174              		.cfi_def_cfa_offset 16
 1175              		.cfi_offset 3, -16
 1176              		.cfi_offset 4, -12
 1177              		.cfi_offset 5, -8
 1178              		.cfi_offset 14, -4
 1179 0002 0446     		mov	r4, r0
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1180              		.loc 1 1166 0
 1181 0004 FFF7FEFF 		bl	vPortEnterCritical
 1182              	.LVL110:
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1183              		.loc 1 1170 0
 1184 0008 002C     		cmp	r4, #0
 1185 000a 34D0     		beq	.L109
 1186              	.LVL111:
 1187              	.L100:
1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1188              		.loc 1 1173 0 discriminator 4
 1189 000c 251D     		adds	r5, r4, #4
 1190 000e 2846     		mov	r0, r5
 1191 0010 FFF7FEFF 		bl	uxListRemove
 1192              	.LVL112:
 1193 0014 70B9     		cbnz	r0, .L101
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1194              		.loc 1 1175 0
 1195 0016 E26A     		ldr	r2, [r4, #44]
 1196 0018 02EB8201 		add	r1, r2, r2, lsl #2
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 120


 1197 001c 8B00     		lsls	r3, r1, #2
 1198 001e 2649     		ldr	r1, .L112
 1199 0020 CB58     		ldr	r3, [r1, r3]
 1200 0022 3BB9     		cbnz	r3, .L101
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1201              		.loc 1 1175 0 is_stmt 0 discriminator 1
 1202 0024 0123     		movs	r3, #1
 1203 0026 03FA02F2 		lsl	r2, r3, r2
 1204 002a 2449     		ldr	r1, .L112+4
 1205 002c 0B68     		ldr	r3, [r1]
 1206 002e 23EA0203 		bic	r3, r3, r2
 1207 0032 0B60     		str	r3, [r1]
 1208              	.L101:
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1209              		.loc 1 1183 0 is_stmt 1
 1210 0034 A36A     		ldr	r3, [r4, #40]
 1211 0036 1BB1     		cbz	r3, .L102
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1212              		.loc 1 1185 0
 1213 0038 04F11800 		add	r0, r4, #24
 1214 003c FFF7FEFF 		bl	uxListRemove
 1215              	.LVL113:
 1216              	.L102:
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1217              		.loc 1 1196 0
 1218 0040 1F4A     		ldr	r2, .L112+8
 1219 0042 1368     		ldr	r3, [r2]
 1220 0044 0133     		adds	r3, r3, #1
 1221 0046 1360     		str	r3, [r2]
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1222              		.loc 1 1198 0
 1223 0048 1E4B     		ldr	r3, .L112+12
 1224 004a 1B68     		ldr	r3, [r3]
 1225 004c A342     		cmp	r3, r4
 1226 004e 15D0     		beq	.L110
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELETE( pxTCB );
 1227              		.loc 1 1225 0
 1228 0050 1D4A     		ldr	r2, .L112+16
 1229 0052 1368     		ldr	r3, [r2]
 1230 0054 013B     		subs	r3, r3, #1
 1231 0056 1360     		str	r3, [r2]
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1232              		.loc 1 1227 0
 1233 0058 2046     		mov	r0, r4
 1234 005a FFF7FEFF 		bl	prvDeleteTCB
 1235              	.LVL114:
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1236              		.loc 1 1231 0
 1237 005e FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1238              	.LVL115:
 1239              	.L104:
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1240              		.loc 1 1234 0
 1241 0062 FFF7FEFF 		bl	vPortExitCritical
 1242              	.LVL116:
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1243              		.loc 1 1238 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 121


 1244 0066 194B     		ldr	r3, .L112+20
 1245 0068 1B68     		ldr	r3, [r3]
 1246 006a 1BB1     		cbz	r3, .L99
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1247              		.loc 1 1240 0
 1248 006c 154B     		ldr	r3, .L112+12
 1249 006e 1B68     		ldr	r3, [r3]
 1250 0070 A342     		cmp	r3, r4
 1251 0072 0CD0     		beq	.L111
 1252              	.L99:
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1253              		.loc 1 1250 0
 1254 0074 38BD     		pop	{r3, r4, r5, pc}
 1255              	.LVL117:
 1256              	.L109:
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1257              		.loc 1 1170 0 discriminator 1
 1258 0076 134B     		ldr	r3, .L112+12
 1259 0078 1C68     		ldr	r4, [r3]
 1260              	.LVL118:
 1261 007a C7E7     		b	.L100
 1262              	.LVL119:
 1263              	.L110:
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1264              		.loc 1 1205 0
 1265 007c 2946     		mov	r1, r5
 1266 007e 1448     		ldr	r0, .L112+24
 1267 0080 FFF7FEFF 		bl	vListInsertEnd
 1268              	.LVL120:
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1269              		.loc 1 1210 0
 1270 0084 134A     		ldr	r2, .L112+28
 1271 0086 1368     		ldr	r3, [r2]
 1272 0088 0133     		adds	r3, r3, #1
 1273 008a 1360     		str	r3, [r2]
 1274 008c E9E7     		b	.L104
 1275              	.L111:
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1276              		.loc 1 1242 0
 1277 008e 124B     		ldr	r3, .L112+32
 1278 0090 1B68     		ldr	r3, [r3]
 1279 0092 43B1     		cbz	r3, .L106
 1280              	.LBB134:
 1281              	.LBB135:
 1282              		.loc 2 195 0
 1283              		.syntax unified
 1284              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1285 0094 4FF05003 			mov r3, #80												
 1286 0098 83F31188 		msr basepri, r3											
 1287 009c BFF36F8F 		isb														
 1288 00a0 BFF34F8F 		dsb														
 1289              	
 1290              	@ 0 "" 2
 1291              	.LVL121:
 1292              		.thumb
 1293              		.syntax unified
 1294              	.L107:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 122


 1295 00a4 FEE7     		b	.L107
 1296              	.L106:
 1297              	.LBE135:
 1298              	.LBE134:
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1299              		.loc 1 1243 0
 1300 00a6 0D4B     		ldr	r3, .L112+36
 1301 00a8 4FF08052 		mov	r2, #268435456
 1302 00ac 1A60     		str	r2, [r3]
 1303              		.syntax unified
 1304              	@ 1243 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1305 00ae BFF34F8F 		dsb
 1306              	@ 0 "" 2
 1307              	@ 1243 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1308 00b2 BFF36F8F 		isb
 1309              	@ 0 "" 2
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1310              		.loc 1 1250 0
 1311              		.thumb
 1312              		.syntax unified
 1313 00b6 DDE7     		b	.L99
 1314              	.L113:
 1315              		.align	2
 1316              	.L112:
 1317 00b8 00000000 		.word	.LANCHOR4
 1318 00bc 00000000 		.word	.LANCHOR13
 1319 00c0 00000000 		.word	.LANCHOR12
 1320 00c4 00000000 		.word	.LANCHOR10
 1321 00c8 00000000 		.word	.LANCHOR9
 1322 00cc 00000000 		.word	.LANCHOR11
 1323 00d0 00000000 		.word	.LANCHOR7
 1324 00d4 00000000 		.word	.LANCHOR14
 1325 00d8 00000000 		.word	.LANCHOR16
 1326 00dc 04ED00E0 		.word	-536810236
 1327              		.cfi_endproc
 1328              	.LFE12:
 1330              		.section	.text.eTaskGetState,"ax",%progbits
 1331              		.align	1
 1332              		.global	eTaskGetState
 1333              		.syntax unified
 1334              		.thumb
 1335              		.thumb_func
 1336              		.fpu fpv4-sp-d16
 1338              	eTaskGetState:
 1339              	.LFB14:
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
 1340              		.loc 1 1387 0
 1341              		.cfi_startproc
 1342              		@ args = 0, pretend = 0, frame = 0
 1343              		@ frame_needed = 0, uses_anonymous_args = 0
 1344              	.LVL122:
 1345 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1346              	.LCFI17:
 1347              		.cfi_def_cfa_offset 24
 1348              		.cfi_offset 3, -24
 1349              		.cfi_offset 4, -20
 1350              		.cfi_offset 5, -16
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 123


 1351              		.cfi_offset 6, -12
 1352              		.cfi_offset 7, -8
 1353              		.cfi_offset 14, -4
 1354              	.LVL123:
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1355              		.loc 1 1392 0
 1356 0002 D0B1     		cbz	r0, .L127
 1357 0004 0446     		mov	r4, r0
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1358              		.loc 1 1394 0
 1359 0006 1D4B     		ldr	r3, .L130
 1360 0008 1B68     		ldr	r3, [r3]
 1361 000a 8342     		cmp	r3, r0
 1362 000c 29D0     		beq	.L119
1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1363              		.loc 1 1401 0
 1364 000e FFF7FEFF 		bl	vPortEnterCritical
 1365              	.LVL124:
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
 1366              		.loc 1 1403 0
 1367 0012 6569     		ldr	r5, [r4, #20]
 1368              	.LVL125:
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1369              		.loc 1 1404 0
 1370 0014 1A4B     		ldr	r3, .L130+4
 1371 0016 1F68     		ldr	r7, [r3]
 1372              	.LVL126:
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1373              		.loc 1 1405 0
 1374 0018 1A4B     		ldr	r3, .L130+8
 1375 001a 1E68     		ldr	r6, [r3]
 1376              	.LVL127:
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1377              		.loc 1 1407 0
 1378 001c FFF7FEFF 		bl	vPortExitCritical
 1379              	.LVL128:
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1380              		.loc 1 1409 0
 1381 0020 BD42     		cmp	r5, r7
 1382 0022 20D0     		beq	.L120
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1383              		.loc 1 1409 0 is_stmt 0 discriminator 1
 1384 0024 B542     		cmp	r5, r6
 1385 0026 20D0     		beq	.L121
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1386              		.loc 1 1417 0 is_stmt 1
 1387 0028 174B     		ldr	r3, .L130+12
 1388 002a 9D42     		cmp	r5, r3
 1389 002c 0ED0     		beq	.L128
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1390              		.loc 1 1453 0
 1391 002e 174B     		ldr	r3, .L130+16
 1392 0030 9D42     		cmp	r5, r3
 1393 0032 20D0     		beq	.L124
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1394              		.loc 1 1453 0 is_stmt 0 discriminator 1
 1395 0034 9DB1     		cbz	r5, .L129
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 124


1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1396              		.loc 1 1466 0 is_stmt 1
 1397 0036 0120     		movs	r0, #1
 1398 0038 14E0     		b	.L117
 1399              	.LVL129:
 1400              	.L127:
 1401              	.LBB136:
 1402              	.LBB137:
 1403              		.loc 2 195 0
 1404              		.syntax unified
 1405              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1406 003a 4FF05003 			mov r3, #80												
 1407 003e 83F31188 		msr basepri, r3											
 1408 0042 BFF36F8F 		isb														
 1409 0046 BFF34F8F 		dsb														
 1410              	
 1411              	@ 0 "" 2
 1412              	.LVL130:
 1413              		.thumb
 1414              		.syntax unified
 1415              	.L116:
 1416 004a FEE7     		b	.L116
 1417              	.LVL131:
 1418              	.L128:
 1419              	.LBE137:
 1420              	.LBE136:
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1421              		.loc 1 1422 0
 1422 004c A36A     		ldr	r3, [r4, #40]
 1423 004e 73B9     		cbnz	r3, .L122
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 1424              		.loc 1 1430 0
 1425 0050 94F86430 		ldrb	r3, [r4, #100]	@ zero_extendqisi2
 1426 0054 DBB2     		uxtb	r3, r3
 1427 0056 012B     		cmp	r3, #1
 1428 0058 0BD1     		bne	.L123
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 1429              		.loc 1 1432 0
 1430 005a 0220     		movs	r0, #2
 1431 005c 02E0     		b	.L117
 1432              	.L129:
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1433              		.loc 1 1458 0
 1434 005e 0420     		movs	r0, #4
 1435 0060 00E0     		b	.L117
 1436              	.LVL132:
 1437              	.L119:
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1438              		.loc 1 1397 0
 1439 0062 0020     		movs	r0, #0
 1440              	.LVL133:
 1441              	.L117:
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1442              		.loc 1 1471 0
 1443 0064 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1444              	.LVL134:
 1445              	.L120:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 125


1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1446              		.loc 1 1413 0
 1447 0066 0220     		movs	r0, #2
 1448 0068 FCE7     		b	.L117
 1449              	.L121:
 1450 006a 0220     		movs	r0, #2
 1451 006c FAE7     		b	.L117
 1452              	.L122:
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1453              		.loc 1 1447 0
 1454 006e 0220     		movs	r0, #2
 1455 0070 F8E7     		b	.L117
 1456              	.L123:
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 1457              		.loc 1 1436 0
 1458 0072 0320     		movs	r0, #3
 1459 0074 F6E7     		b	.L117
 1460              	.L124:
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1461              		.loc 1 1458 0
 1462 0076 0420     		movs	r0, #4
 1463 0078 F4E7     		b	.L117
 1464              	.L131:
 1465 007a 00BF     		.align	2
 1466              	.L130:
 1467 007c 00000000 		.word	.LANCHOR10
 1468 0080 00000000 		.word	.LANCHOR2
 1469 0084 00000000 		.word	.LANCHOR8
 1470 0088 00000000 		.word	.LANCHOR0
 1471 008c 00000000 		.word	.LANCHOR7
 1472              		.cfi_endproc
 1473              	.LFE14:
 1475              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1476              		.align	1
 1477              		.global	uxTaskPriorityGet
 1478              		.syntax unified
 1479              		.thumb
 1480              		.thumb_func
 1481              		.fpu fpv4-sp-d16
 1483              	uxTaskPriorityGet:
 1484              	.LFB15:
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
 1485              		.loc 1 1479 0
 1486              		.cfi_startproc
 1487              		@ args = 0, pretend = 0, frame = 0
 1488              		@ frame_needed = 0, uses_anonymous_args = 0
 1489              	.LVL135:
 1490 0000 10B5     		push	{r4, lr}
 1491              	.LCFI18:
 1492              		.cfi_def_cfa_offset 8
 1493              		.cfi_offset 4, -8
 1494              		.cfi_offset 14, -4
 1495 0002 0446     		mov	r4, r0
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1496              		.loc 1 1483 0
 1497 0004 FFF7FEFF 		bl	vPortEnterCritical
 1498              	.LVL136:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 126


1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1499              		.loc 1 1487 0
 1500 0008 24B1     		cbz	r4, .L135
 1501              	.LVL137:
 1502              	.L133:
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1503              		.loc 1 1488 0 discriminator 4
 1504 000a E46A     		ldr	r4, [r4, #44]
 1505              	.LVL138:
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1506              		.loc 1 1490 0 discriminator 4
 1507 000c FFF7FEFF 		bl	vPortExitCritical
 1508              	.LVL139:
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1509              		.loc 1 1493 0 discriminator 4
 1510 0010 2046     		mov	r0, r4
 1511 0012 10BD     		pop	{r4, pc}
 1512              	.LVL140:
 1513              	.L135:
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1514              		.loc 1 1487 0 discriminator 1
 1515 0014 014B     		ldr	r3, .L136
 1516 0016 1C68     		ldr	r4, [r3]
 1517              	.LVL141:
 1518 0018 F7E7     		b	.L133
 1519              	.L137:
 1520 001a 00BF     		.align	2
 1521              	.L136:
 1522 001c 00000000 		.word	.LANCHOR10
 1523              		.cfi_endproc
 1524              	.LFE15:
 1526              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1527              		.align	1
 1528              		.global	uxTaskPriorityGetFromISR
 1529              		.syntax unified
 1530              		.thumb
 1531              		.thumb_func
 1532              		.fpu fpv4-sp-d16
 1534              	uxTaskPriorityGetFromISR:
 1535              	.LFB16:
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
 1536              		.loc 1 1501 0
 1537              		.cfi_startproc
 1538              		@ args = 0, pretend = 0, frame = 0
 1539              		@ frame_needed = 0, uses_anonymous_args = 0
 1540              	.LVL142:
 1541 0000 10B5     		push	{r4, lr}
 1542              	.LCFI19:
 1543              		.cfi_def_cfa_offset 8
 1544              		.cfi_offset 4, -8
 1545              		.cfi_offset 14, -4
 1546 0002 0446     		mov	r4, r0
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1547              		.loc 1 1521 0
 1548 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1549              	.LVL143:
 1550              	.LBB138:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 127


 1551              	.LBB139:
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1552              		.loc 2 211 0
 1553              		.syntax unified
 1554              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1555 0008 EFF31183 			mrs r3, basepri											
 1556 000c 4FF05002 		mov r2, #80												
 1557 0010 82F31188 		msr basepri, r2											
 1558 0014 BFF36F8F 		isb														
 1559 0018 BFF34F8F 		dsb														
 1560              	
 1561              	@ 0 "" 2
 1562              		.thumb
 1563              		.syntax unified
 1564              	.LBE139:
 1565              	.LBE138:
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1566              		.loc 1 1527 0
 1567 001c 1CB1     		cbz	r4, .L141
 1568              	.LVL144:
 1569              	.L139:
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1570              		.loc 1 1528 0 discriminator 4
 1571 001e E06A     		ldr	r0, [r4, #44]
 1572              	.LVL145:
 1573              	.LBB140:
 1574              	.LBB141:
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 128


 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1575              		.loc 2 229 0 discriminator 4
 1576              		.syntax unified
 1577              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1578 0020 83F31188 			msr basepri, r3	
 1579              	@ 0 "" 2
 1580              	.LVL146:
 1581              		.thumb
 1582              		.syntax unified
 1583              	.LBE141:
 1584              	.LBE140:
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1585              		.loc 1 1533 0 discriminator 4
 1586 0024 10BD     		pop	{r4, pc}
 1587              	.LVL147:
 1588              	.L141:
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1589              		.loc 1 1527 0 discriminator 1
 1590 0026 014A     		ldr	r2, .L142
 1591 0028 1468     		ldr	r4, [r2]
 1592              	.LVL148:
 1593 002a F8E7     		b	.L139
 1594              	.L143:
 1595              		.align	2
 1596              	.L142:
 1597 002c 00000000 		.word	.LANCHOR10
 1598              		.cfi_endproc
 1599              	.LFE16:
 1601              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1602              		.align	1
 1603              		.global	vTaskPrioritySet
 1604              		.syntax unified
 1605              		.thumb
 1606              		.thumb_func
 1607              		.fpu fpv4-sp-d16
 1609              	vTaskPrioritySet:
 1610              	.LFB17:
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1611              		.loc 1 1541 0
 1612              		.cfi_startproc
 1613              		@ args = 0, pretend = 0, frame = 0
 1614              		@ frame_needed = 0, uses_anonymous_args = 0
 1615              	.LVL149:
 1616 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1617              	.LCFI20:
 1618              		.cfi_def_cfa_offset 24
 1619              		.cfi_offset 3, -24
 1620              		.cfi_offset 4, -20
 1621              		.cfi_offset 5, -16
 1622              		.cfi_offset 6, -12
 1623              		.cfi_offset 7, -8
 1624              		.cfi_offset 14, -4
 1625              	.LVL150:
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1626              		.loc 1 1546 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 129


 1627 0002 0629     		cmp	r1, #6
 1628 0004 08D9     		bls	.L145
 1629              	.LBB142:
 1630              	.LBB143:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1631              		.loc 2 195 0
 1632              		.syntax unified
 1633              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1634 0006 4FF05003 			mov r3, #80												
 1635 000a 83F31188 		msr basepri, r3											
 1636 000e BFF36F8F 		isb														
 1637 0012 BFF34F8F 		dsb														
 1638              	
 1639              	@ 0 "" 2
 1640              	.LVL151:
 1641              		.thumb
 1642              		.syntax unified
 1643              	.L146:
 1644 0016 FEE7     		b	.L146
 1645              	.L145:
 1646 0018 0446     		mov	r4, r0
 1647 001a 0D46     		mov	r5, r1
 1648              	.LVL152:
 1649              	.LBE143:
 1650              	.LBE142:
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1651              		.loc 1 1558 0
 1652 001c FFF7FEFF 		bl	vPortEnterCritical
 1653              	.LVL153:
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1654              		.loc 1 1562 0
 1655 0020 0CB9     		cbnz	r4, .L147
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1656              		.loc 1 1562 0 is_stmt 0 discriminator 1
 1657 0022 2A4B     		ldr	r3, .L159
 1658 0024 1C68     		ldr	r4, [r3]
 1659              	.LVL154:
 1660              	.L147:
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1661              		.loc 1 1568 0 is_stmt 1 discriminator 4
 1662 0026 236D     		ldr	r3, [r4, #80]
 1663              	.LVL155:
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1664              		.loc 1 1576 0 discriminator 4
 1665 0028 9D42     		cmp	r5, r3
 1666 002a 40D0     		beq	.L148
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1667              		.loc 1 1580 0
 1668 002c 42D9     		bls	.L149
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1669              		.loc 1 1582 0
 1670 002e 274A     		ldr	r2, .L159
 1671 0030 1268     		ldr	r2, [r2]
 1672 0032 A242     		cmp	r2, r4
 1673 0034 44D0     		beq	.L155
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 1674              		.loc 1 1587 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 130


 1675 0036 254A     		ldr	r2, .L159
 1676 0038 1268     		ldr	r2, [r2]
 1677 003a D26A     		ldr	r2, [r2, #44]
 1678 003c AA42     		cmp	r2, r5
 1679 003e 41D9     		bls	.L156
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1680              		.loc 1 1544 0
 1681 0040 0026     		movs	r6, #0
 1682              	.L150:
 1683              	.LVL156:
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1684              		.loc 1 1620 0
 1685 0042 E76A     		ldr	r7, [r4, #44]
 1686              	.LVL157:
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1687              		.loc 1 1626 0
 1688 0044 BB42     		cmp	r3, r7
 1689 0046 00D1     		bne	.L151
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1690              		.loc 1 1628 0
 1691 0048 E562     		str	r5, [r4, #44]
 1692              	.L151:
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1693              		.loc 1 1636 0
 1694 004a 2565     		str	r5, [r4, #80]
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1695              		.loc 1 1646 0
 1696 004c A369     		ldr	r3, [r4, #24]
 1697              	.LVL158:
 1698 004e 002B     		cmp	r3, #0
 1699 0050 02DB     		blt	.L152
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1700              		.loc 1 1648 0
 1701 0052 C5F10705 		rsb	r5, r5, #7
 1702              	.LVL159:
 1703 0056 A561     		str	r5, [r4, #24]
 1704              	.L152:
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1705              		.loc 1 1659 0
 1706 0058 6269     		ldr	r2, [r4, #20]
 1707 005a 1D49     		ldr	r1, .L159+4
 1708 005c 1423     		movs	r3, #20
 1709 005e 03FB0713 		mla	r3, r3, r7, r1
 1710 0062 9A42     		cmp	r2, r3
 1711 0064 1AD1     		bne	.L153
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1712              		.loc 1 1664 0
 1713 0066 251D     		adds	r5, r4, #4
 1714 0068 2846     		mov	r0, r5
 1715 006a FFF7FEFF 		bl	uxListRemove
 1716              	.LVL160:
 1717 006e 38B9     		cbnz	r0, .L154
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1718              		.loc 1 1669 0
 1719 0070 0123     		movs	r3, #1
 1720 0072 03FA07F2 		lsl	r2, r3, r7
 1721 0076 1749     		ldr	r1, .L159+8
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 131


 1722 0078 0B68     		ldr	r3, [r1]
 1723 007a 23EA0203 		bic	r3, r3, r2
 1724 007e 0B60     		str	r3, [r1]
 1725              	.L154:
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1726              		.loc 1 1675 0
 1727 0080 E26A     		ldr	r2, [r4, #44]
 1728 0082 0123     		movs	r3, #1
 1729 0084 9340     		lsls	r3, r3, r2
 1730 0086 1349     		ldr	r1, .L159+8
 1731 0088 0868     		ldr	r0, [r1]
 1732 008a 0343     		orrs	r3, r3, r0
 1733 008c 0B60     		str	r3, [r1]
 1734 008e 2946     		mov	r1, r5
 1735 0090 0F4B     		ldr	r3, .L159+4
 1736 0092 1420     		movs	r0, #20
 1737 0094 00FB0230 		mla	r0, r0, r2, r3
 1738 0098 FFF7FEFF 		bl	vListInsertEnd
 1739              	.LVL161:
 1740              	.L153:
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1741              		.loc 1 1682 0
 1742 009c 3EB1     		cbz	r6, .L148
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1743              		.loc 1 1684 0
 1744 009e 0E4B     		ldr	r3, .L159+12
 1745 00a0 4FF08052 		mov	r2, #268435456
 1746 00a4 1A60     		str	r2, [r3]
 1747              		.syntax unified
 1748              	@ 1684 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1749 00a6 BFF34F8F 		dsb
 1750              	@ 0 "" 2
 1751              	@ 1684 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1752 00aa BFF36F8F 		isb
 1753              	@ 0 "" 2
 1754              	.LVL162:
 1755              		.thumb
 1756              		.syntax unified
 1757              	.L148:
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1758              		.loc 1 1696 0
 1759 00ae FFF7FEFF 		bl	vPortExitCritical
 1760              	.LVL163:
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1761              		.loc 1 1697 0
 1762 00b2 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1763              	.LVL164:
 1764              	.L149:
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1765              		.loc 1 1603 0
 1766 00b4 054A     		ldr	r2, .L159
 1767 00b6 1268     		ldr	r2, [r2]
 1768 00b8 A242     		cmp	r2, r4
 1769 00ba 05D0     		beq	.L157
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1770              		.loc 1 1544 0
 1771 00bc 0026     		movs	r6, #0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 132


 1772 00be C0E7     		b	.L150
 1773              	.L155:
 1774 00c0 0026     		movs	r6, #0
 1775 00c2 BEE7     		b	.L150
 1776              	.L156:
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 1777              		.loc 1 1589 0
 1778 00c4 0126     		movs	r6, #1
 1779 00c6 BCE7     		b	.L150
 1780              	.L157:
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1781              		.loc 1 1608 0
 1782 00c8 0126     		movs	r6, #1
 1783 00ca BAE7     		b	.L150
 1784              	.L160:
 1785              		.align	2
 1786              	.L159:
 1787 00cc 00000000 		.word	.LANCHOR10
 1788 00d0 00000000 		.word	.LANCHOR4
 1789 00d4 00000000 		.word	.LANCHOR13
 1790 00d8 04ED00E0 		.word	-536810236
 1791              		.cfi_endproc
 1792              	.LFE17:
 1794              		.section	.text.vTaskResume,"ax",%progbits
 1795              		.align	1
 1796              		.global	vTaskResume
 1797              		.syntax unified
 1798              		.thumb
 1799              		.thumb_func
 1800              		.fpu fpv4-sp-d16
 1802              	vTaskResume:
 1803              	.LFB20:
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1804              		.loc 1 1852 0
 1805              		.cfi_startproc
 1806              		@ args = 0, pretend = 0, frame = 0
 1807              		@ frame_needed = 0, uses_anonymous_args = 0
 1808              	.LVL165:
 1809 0000 38B5     		push	{r3, r4, r5, lr}
 1810              	.LCFI21:
 1811              		.cfi_def_cfa_offset 16
 1812              		.cfi_offset 3, -16
 1813              		.cfi_offset 4, -12
 1814              		.cfi_offset 5, -8
 1815              		.cfi_offset 14, -4
 1816              	.LVL166:
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1817              		.loc 1 1856 0
 1818 0002 68B1     		cbz	r0, .L167
 1819 0004 0446     		mov	r4, r0
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1820              		.loc 1 1860 0
 1821 0006 1B4B     		ldr	r3, .L169
 1822 0008 1B68     		ldr	r3, [r3]
 1823 000a 8342     		cmp	r3, r0
 1824 000c 07D0     		beq	.L161
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 133


 1825              		.loc 1 1862 0
 1826 000e FFF7FEFF 		bl	vPortEnterCritical
 1827              	.LVL167:
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1828              		.loc 1 1864 0
 1829 0012 2046     		mov	r0, r4
 1830 0014 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1831              	.LVL168:
 1832 0018 58B9     		cbnz	r0, .L168
 1833              	.L165:
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1834              		.loc 1 1891 0
 1835 001a FFF7FEFF 		bl	vPortExitCritical
 1836              	.LVL169:
 1837              	.L161:
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1838              		.loc 1 1897 0
 1839 001e 38BD     		pop	{r3, r4, r5, pc}
 1840              	.LVL170:
 1841              	.L167:
 1842              	.LBB144:
 1843              	.LBB145:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1844              		.loc 2 195 0
 1845              		.syntax unified
 1846              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1847 0020 4FF05003 			mov r3, #80												
 1848 0024 83F31188 		msr basepri, r3											
 1849 0028 BFF36F8F 		isb														
 1850 002c BFF34F8F 		dsb														
 1851              	
 1852              	@ 0 "" 2
 1853              	.LVL171:
 1854              		.thumb
 1855              		.syntax unified
 1856              	.L163:
 1857 0030 FEE7     		b	.L163
 1858              	.LVL172:
 1859              	.L168:
 1860              	.LBE145:
 1861              	.LBE144:
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1862              		.loc 1 1870 0
 1863 0032 251D     		adds	r5, r4, #4
 1864 0034 2846     		mov	r0, r5
 1865 0036 FFF7FEFF 		bl	uxListRemove
 1866              	.LVL173:
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1867              		.loc 1 1871 0
 1868 003a E26A     		ldr	r2, [r4, #44]
 1869 003c 0123     		movs	r3, #1
 1870 003e 9340     		lsls	r3, r3, r2
 1871 0040 0D49     		ldr	r1, .L169+4
 1872 0042 0868     		ldr	r0, [r1]
 1873 0044 0343     		orrs	r3, r3, r0
 1874 0046 0B60     		str	r3, [r1]
 1875 0048 2946     		mov	r1, r5
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 134


 1876 004a 0C4B     		ldr	r3, .L169+8
 1877 004c 1420     		movs	r0, #20
 1878 004e 00FB0230 		mla	r0, r0, r2, r3
 1879 0052 FFF7FEFF 		bl	vListInsertEnd
 1880              	.LVL174:
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1881              		.loc 1 1874 0
 1882 0056 E26A     		ldr	r2, [r4, #44]
 1883 0058 064B     		ldr	r3, .L169
 1884 005a 1B68     		ldr	r3, [r3]
 1885 005c DB6A     		ldr	r3, [r3, #44]
 1886 005e 9A42     		cmp	r2, r3
 1887 0060 DBD3     		bcc	.L165
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1888              		.loc 1 1879 0
 1889 0062 074B     		ldr	r3, .L169+12
 1890 0064 4FF08052 		mov	r2, #268435456
 1891 0068 1A60     		str	r2, [r3]
 1892              		.syntax unified
 1893              	@ 1879 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1894 006a BFF34F8F 		dsb
 1895              	@ 0 "" 2
 1896              	@ 1879 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1897 006e BFF36F8F 		isb
 1898              	@ 0 "" 2
 1899              		.thumb
 1900              		.syntax unified
 1901 0072 D2E7     		b	.L165
 1902              	.L170:
 1903              		.align	2
 1904              	.L169:
 1905 0074 00000000 		.word	.LANCHOR10
 1906 0078 00000000 		.word	.LANCHOR13
 1907 007c 00000000 		.word	.LANCHOR4
 1908 0080 04ED00E0 		.word	-536810236
 1909              		.cfi_endproc
 1910              	.LFE20:
 1912              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1913              		.align	1
 1914              		.global	xTaskResumeFromISR
 1915              		.syntax unified
 1916              		.thumb
 1917              		.thumb_func
 1918              		.fpu fpv4-sp-d16
 1920              	xTaskResumeFromISR:
 1921              	.LFB21:
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1922              		.loc 1 1906 0
 1923              		.cfi_startproc
 1924              		@ args = 0, pretend = 0, frame = 0
 1925              		@ frame_needed = 0, uses_anonymous_args = 0
 1926              	.LVL175:
 1927 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1928              	.LCFI22:
 1929              		.cfi_def_cfa_offset 24
 1930              		.cfi_offset 3, -24
 1931              		.cfi_offset 4, -20
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 135


 1932              		.cfi_offset 5, -16
 1933              		.cfi_offset 6, -12
 1934              		.cfi_offset 7, -8
 1935              		.cfi_offset 14, -4
 1936              	.LVL176:
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1937              		.loc 1 1911 0
 1938 0002 40B9     		cbnz	r0, .L172
 1939              	.LBB146:
 1940              	.LBB147:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1941              		.loc 2 195 0
 1942              		.syntax unified
 1943              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1944 0004 4FF05003 			mov r3, #80												
 1945 0008 83F31188 		msr basepri, r3											
 1946 000c BFF36F8F 		isb														
 1947 0010 BFF34F8F 		dsb														
 1948              	
 1949              	@ 0 "" 2
 1950              	.LVL177:
 1951              		.thumb
 1952              		.syntax unified
 1953              	.L173:
 1954 0014 FEE7     		b	.L173
 1955              	.L172:
 1956 0016 0446     		mov	r4, r0
 1957              	.LBE147:
 1958              	.LBE146:
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1959              		.loc 1 1929 0
 1960 0018 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1961              	.LVL178:
 1962              	.LBB148:
 1963              	.LBB149:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1964              		.loc 2 211 0
 1965              		.syntax unified
 1966              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1967 001c EFF31187 			mrs r7, basepri											
 1968 0020 4FF05003 		mov r3, #80												
 1969 0024 83F31188 		msr basepri, r3											
 1970 0028 BFF36F8F 		isb														
 1971 002c BFF34F8F 		dsb														
 1972              	
 1973              	@ 0 "" 2
 1974              		.thumb
 1975              		.syntax unified
 1976              	.LBE149:
 1977              	.LBE148:
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1978              		.loc 1 1933 0
 1979 0030 2046     		mov	r0, r4
 1980 0032 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1981              	.LVL179:
 1982 0036 40B3     		cbz	r0, .L177
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 136


 1983              		.loc 1 1938 0
 1984 0038 154B     		ldr	r3, .L180
 1985 003a 1B68     		ldr	r3, [r3]
 1986 003c F3B9     		cbnz	r3, .L175
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1987              		.loc 1 1942 0
 1988 003e E26A     		ldr	r2, [r4, #44]
 1989 0040 144B     		ldr	r3, .L180+4
 1990 0042 1B68     		ldr	r3, [r3]
 1991 0044 DB6A     		ldr	r3, [r3, #44]
 1992 0046 9A42     		cmp	r2, r3
 1993 0048 16D2     		bcs	.L178
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1994              		.loc 1 1907 0
 1995 004a 0025     		movs	r5, #0
 1996              	.L176:
 1997              	.LVL180:
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1998              		.loc 1 1951 0
 1999 004c 261D     		adds	r6, r4, #4
 2000 004e 3046     		mov	r0, r6
 2001 0050 FFF7FEFF 		bl	uxListRemove
 2002              	.LVL181:
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2003              		.loc 1 1952 0
 2004 0054 E26A     		ldr	r2, [r4, #44]
 2005 0056 0123     		movs	r3, #1
 2006 0058 9340     		lsls	r3, r3, r2
 2007 005a 0F49     		ldr	r1, .L180+8
 2008 005c 0868     		ldr	r0, [r1]
 2009 005e 0343     		orrs	r3, r3, r0
 2010 0060 0B60     		str	r3, [r1]
 2011 0062 3146     		mov	r1, r6
 2012 0064 0D4B     		ldr	r3, .L180+12
 2013 0066 1420     		movs	r0, #20
 2014 0068 00FB0230 		mla	r0, r0, r2, r3
 2015 006c FFF7FEFF 		bl	vListInsertEnd
 2016              	.LVL182:
 2017              	.L174:
 2018              	.LBB150:
 2019              	.LBB151:
 2020              		.loc 2 229 0
 2021              		.syntax unified
 2022              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2023 0070 87F31188 			msr basepri, r7	
 2024              	@ 0 "" 2
 2025              	.LVL183:
 2026              		.thumb
 2027              		.syntax unified
 2028              	.LBE151:
 2029              	.LBE150:
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2030              		.loc 1 1970 0
 2031 0074 2846     		mov	r0, r5
 2032 0076 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2033              	.LVL184:
 2034              	.L178:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 137


1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2035              		.loc 1 1944 0
 2036 0078 0125     		movs	r5, #1
 2037 007a E7E7     		b	.L176
 2038              	.L175:
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2039              		.loc 1 1959 0
 2040 007c 04F11801 		add	r1, r4, #24
 2041 0080 0748     		ldr	r0, .L180+16
 2042 0082 FFF7FEFF 		bl	vListInsertEnd
 2043              	.LVL185:
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 2044              		.loc 1 1907 0
 2045 0086 0025     		movs	r5, #0
 2046 0088 F2E7     		b	.L174
 2047              	.L177:
 2048 008a 0025     		movs	r5, #0
 2049 008c F0E7     		b	.L174
 2050              	.L181:
 2051 008e 00BF     		.align	2
 2052              	.L180:
 2053 0090 00000000 		.word	.LANCHOR16
 2054 0094 00000000 		.word	.LANCHOR10
 2055 0098 00000000 		.word	.LANCHOR13
 2056 009c 00000000 		.word	.LANCHOR4
 2057 00a0 00000000 		.word	.LANCHOR1
 2058              		.cfi_endproc
 2059              	.LFE21:
 2061              		.section	.text.vTaskStartScheduler,"ax",%progbits
 2062              		.align	1
 2063              		.global	vTaskStartScheduler
 2064              		.syntax unified
 2065              		.thumb
 2066              		.thumb_func
 2067              		.fpu fpv4-sp-d16
 2069              	vTaskStartScheduler:
 2070              	.LFB22:
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 2071              		.loc 1 1976 0
 2072              		.cfi_startproc
 2073              		@ args = 0, pretend = 0, frame = 16
 2074              		@ frame_needed = 0, uses_anonymous_args = 0
 2075 0000 10B5     		push	{r4, lr}
 2076              	.LCFI23:
 2077              		.cfi_def_cfa_offset 8
 2078              		.cfi_offset 4, -8
 2079              		.cfi_offset 14, -4
 2080 0002 88B0     		sub	sp, sp, #32
 2081              	.LCFI24:
 2082              		.cfi_def_cfa_offset 40
 2083              	.LBB152:
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
 2084              		.loc 1 1982 0
 2085 0004 0024     		movs	r4, #0
 2086 0006 0594     		str	r4, [sp, #20]
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
 2087              		.loc 1 1983 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 138


 2088 0008 0694     		str	r4, [sp, #24]
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 2089              		.loc 1 1988 0
 2090 000a 07AA     		add	r2, sp, #28
 2091 000c 06A9     		add	r1, sp, #24
 2092 000e 05A8     		add	r0, sp, #20
 2093 0010 FFF7FEFF 		bl	vApplicationGetIdleTaskMemory
 2094              	.LVL186:
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
 2095              		.loc 1 1989 0
 2096 0014 059B     		ldr	r3, [sp, #20]
 2097 0016 0293     		str	r3, [sp, #8]
 2098 0018 069B     		ldr	r3, [sp, #24]
 2099 001a 0193     		str	r3, [sp, #4]
 2100 001c 0094     		str	r4, [sp]
 2101 001e 2346     		mov	r3, r4
 2102 0020 079A     		ldr	r2, [sp, #28]
 2103 0022 1849     		ldr	r1, .L191
 2104 0024 1848     		ldr	r0, .L191+4
 2105 0026 FFF7FEFF 		bl	xTaskCreateStatic
 2106              	.LVL187:
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2107              		.loc 1 1997 0
 2108 002a 40B1     		cbz	r0, .L183
 2109              	.LVL188:
 2110              	.LBE152:
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2111              		.loc 1 2022 0
 2112 002c FFF7FEFF 		bl	xTimerCreateTimerTask
 2113              	.LVL189:
 2114              	.L184:
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2115              		.loc 1 2031 0
 2116 0030 0128     		cmp	r0, #1
 2117 0032 06D0     		beq	.L189
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2118              		.loc 1 2090 0
 2119 0034 B0F1FF3F 		cmp	r0, #-1
 2120 0038 1AD0     		beq	.L190
 2121              	.LVL190:
 2122              	.L182:
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2123              		.loc 1 2096 0
 2124 003a 08B0     		add	sp, sp, #32
 2125              	.LCFI25:
 2126              		.cfi_remember_state
 2127              		.cfi_def_cfa_offset 8
 2128              		@ sp needed
 2129 003c 10BD     		pop	{r4, pc}
 2130              	.L183:
 2131              	.LCFI26:
 2132              		.cfi_restore_state
 2133              	.LVL191:
 2134              	.LBB153:
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2135              		.loc 1 2003 0
 2136 003e 0020     		movs	r0, #0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 139


 2137 0040 F6E7     		b	.L184
 2138              	.LVL192:
 2139              	.L189:
 2140              	.LBE153:
 2141              	.LBB154:
 2142              	.LBB155:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2143              		.loc 2 195 0
 2144              		.syntax unified
 2145              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2146 0042 4FF05003 			mov r3, #80												
 2147 0046 83F31188 		msr basepri, r3											
 2148 004a BFF36F8F 		isb														
 2149 004e BFF34F8F 		dsb														
 2150              	
 2151              	@ 0 "" 2
 2152              		.thumb
 2153              		.syntax unified
 2154              	.LBE155:
 2155              	.LBE154:
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2156              		.loc 1 2059 0
 2157 0052 0E4B     		ldr	r3, .L191+8
 2158 0054 4FF0FF32 		mov	r2, #-1
 2159 0058 1A60     		str	r2, [r3]
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2160              		.loc 1 2060 0
 2161 005a 0D4B     		ldr	r3, .L191+12
 2162 005c 0122     		movs	r2, #1
 2163 005e 1A60     		str	r2, [r3]
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2164              		.loc 1 2061 0
 2165 0060 0C4B     		ldr	r3, .L191+16
 2166 0062 0022     		movs	r2, #0
 2167 0064 1A60     		str	r2, [r3]
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2168              		.loc 1 2069 0
 2169 0066 FFF7FEFF 		bl	configureTimerForRunTimeStats
 2170              	.LVL193:
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2171              		.loc 1 2075 0
 2172 006a FFF7FEFF 		bl	xPortStartScheduler
 2173              	.LVL194:
 2174 006e E4E7     		b	.L182
 2175              	.LVL195:
 2176              	.L190:
 2177              	.LBB156:
 2178              	.LBB157:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2179              		.loc 2 195 0
 2180              		.syntax unified
 2181              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2182 0070 4FF05003 			mov r3, #80												
 2183 0074 83F31188 		msr basepri, r3											
 2184 0078 BFF36F8F 		isb														
 2185 007c BFF34F8F 		dsb														
 2186              	
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 140


 2187              	@ 0 "" 2
 2188              	.LVL196:
 2189              		.thumb
 2190              		.syntax unified
 2191              	.L187:
 2192 0080 FEE7     		b	.L187
 2193              	.L192:
 2194 0082 00BF     		.align	2
 2195              	.L191:
 2196 0084 00000000 		.word	.LC0
 2197 0088 00000000 		.word	prvIdleTask
 2198 008c 00000000 		.word	.LANCHOR3
 2199 0090 00000000 		.word	.LANCHOR11
 2200 0094 00000000 		.word	.LANCHOR15
 2201              	.LBE157:
 2202              	.LBE156:
 2203              		.cfi_endproc
 2204              	.LFE22:
 2206              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2207              		.align	1
 2208              		.global	vTaskEndScheduler
 2209              		.syntax unified
 2210              		.thumb
 2211              		.thumb_func
 2212              		.fpu fpv4-sp-d16
 2214              	vTaskEndScheduler:
 2215              	.LFB23:
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 2216              		.loc 1 2100 0
 2217              		.cfi_startproc
 2218              		@ args = 0, pretend = 0, frame = 0
 2219              		@ frame_needed = 0, uses_anonymous_args = 0
 2220 0000 08B5     		push	{r3, lr}
 2221              	.LCFI27:
 2222              		.cfi_def_cfa_offset 8
 2223              		.cfi_offset 3, -8
 2224              		.cfi_offset 14, -4
 2225              	.LBB158:
 2226              	.LBB159:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2227              		.loc 2 195 0
 2228              		.syntax unified
 2229              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2230 0002 4FF05003 			mov r3, #80												
 2231 0006 83F31188 		msr basepri, r3											
 2232 000a BFF36F8F 		isb														
 2233 000e BFF34F8F 		dsb														
 2234              	
 2235              	@ 0 "" 2
 2236              		.thumb
 2237              		.syntax unified
 2238              	.LBE159:
 2239              	.LBE158:
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 2240              		.loc 1 2105 0
 2241 0012 034B     		ldr	r3, .L195
 2242 0014 0022     		movs	r2, #0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 141


 2243 0016 1A60     		str	r2, [r3]
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2244              		.loc 1 2106 0
 2245 0018 FFF7FEFF 		bl	vPortEndScheduler
 2246              	.LVL197:
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 2247              		.loc 1 2107 0
 2248 001c 08BD     		pop	{r3, pc}
 2249              	.L196:
 2250 001e 00BF     		.align	2
 2251              	.L195:
 2252 0020 00000000 		.word	.LANCHOR11
 2253              		.cfi_endproc
 2254              	.LFE23:
 2256              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2257              		.align	1
 2258              		.global	vTaskSuspendAll
 2259              		.syntax unified
 2260              		.thumb
 2261              		.thumb_func
 2262              		.fpu fpv4-sp-d16
 2264              	vTaskSuspendAll:
 2265              	.LFB24:
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
 2266              		.loc 1 2111 0
 2267              		.cfi_startproc
 2268              		@ args = 0, pretend = 0, frame = 0
 2269              		@ frame_needed = 0, uses_anonymous_args = 0
 2270              		@ link register save eliminated.
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2271              		.loc 1 2123 0
 2272 0000 024A     		ldr	r2, .L198
 2273 0002 1368     		ldr	r3, [r2]
 2274 0004 0133     		adds	r3, r3, #1
 2275 0006 1360     		str	r3, [r2]
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2276              		.loc 1 2127 0
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 2277              		.loc 1 2128 0
 2278 0008 7047     		bx	lr
 2279              	.L199:
 2280 000a 00BF     		.align	2
 2281              	.L198:
 2282 000c 00000000 		.word	.LANCHOR16
 2283              		.cfi_endproc
 2284              	.LFE24:
 2286              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2287              		.align	1
 2288              		.global	xTaskGetTickCount
 2289              		.syntax unified
 2290              		.thumb
 2291              		.thumb_func
 2292              		.fpu fpv4-sp-d16
 2294              	xTaskGetTickCount:
 2295              	.LFB26:
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
 2296              		.loc 1 2305 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 142


 2297              		.cfi_startproc
 2298              		@ args = 0, pretend = 0, frame = 0
 2299              		@ frame_needed = 0, uses_anonymous_args = 0
 2300              		@ link register save eliminated.
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2301              		.loc 1 2311 0
 2302 0000 014B     		ldr	r3, .L201
 2303 0002 1868     		ldr	r0, [r3]
 2304              	.LVL198:
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2305              		.loc 1 2316 0
 2306 0004 7047     		bx	lr
 2307              	.L202:
 2308 0006 00BF     		.align	2
 2309              	.L201:
 2310 0008 00000000 		.word	.LANCHOR15
 2311              		.cfi_endproc
 2312              	.LFE26:
 2314              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2315              		.align	1
 2316              		.global	xTaskGetTickCountFromISR
 2317              		.syntax unified
 2318              		.thumb
 2319              		.thumb_func
 2320              		.fpu fpv4-sp-d16
 2322              	xTaskGetTickCountFromISR:
 2323              	.LFB27:
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
 2324              		.loc 1 2320 0
 2325              		.cfi_startproc
 2326              		@ args = 0, pretend = 0, frame = 0
 2327              		@ frame_needed = 0, uses_anonymous_args = 0
 2328 0000 08B5     		push	{r3, lr}
 2329              	.LCFI28:
 2330              		.cfi_def_cfa_offset 8
 2331              		.cfi_offset 3, -8
 2332              		.cfi_offset 14, -4
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2333              		.loc 1 2338 0
 2334 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2335              	.LVL199:
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2336              		.loc 1 2342 0
 2337 0006 014B     		ldr	r3, .L205
 2338 0008 1868     		ldr	r0, [r3]
 2339              	.LVL200:
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2340              		.loc 1 2347 0
 2341 000a 08BD     		pop	{r3, pc}
 2342              	.L206:
 2343              		.align	2
 2344              	.L205:
 2345 000c 00000000 		.word	.LANCHOR15
 2346              		.cfi_endproc
 2347              	.LFE27:
 2349              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2350              		.align	1
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 143


 2351              		.global	uxTaskGetNumberOfTasks
 2352              		.syntax unified
 2353              		.thumb
 2354              		.thumb_func
 2355              		.fpu fpv4-sp-d16
 2357              	uxTaskGetNumberOfTasks:
 2358              	.LFB28:
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
 2359              		.loc 1 2351 0
 2360              		.cfi_startproc
 2361              		@ args = 0, pretend = 0, frame = 0
 2362              		@ frame_needed = 0, uses_anonymous_args = 0
 2363              		@ link register save eliminated.
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2364              		.loc 1 2354 0
 2365 0000 014B     		ldr	r3, .L208
 2366 0002 1868     		ldr	r0, [r3]
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2367              		.loc 1 2355 0
 2368 0004 7047     		bx	lr
 2369              	.L209:
 2370 0006 00BF     		.align	2
 2371              	.L208:
 2372 0008 00000000 		.word	.LANCHOR9
 2373              		.cfi_endproc
 2374              	.LFE28:
 2376              		.section	.text.pcTaskGetName,"ax",%progbits
 2377              		.align	1
 2378              		.global	pcTaskGetName
 2379              		.syntax unified
 2380              		.thumb
 2381              		.thumb_func
 2382              		.fpu fpv4-sp-d16
 2384              	pcTaskGetName:
 2385              	.LFB29:
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
 2386              		.loc 1 2359 0
 2387              		.cfi_startproc
 2388              		@ args = 0, pretend = 0, frame = 0
 2389              		@ frame_needed = 0, uses_anonymous_args = 0
 2390              		@ link register save eliminated.
 2391              	.LVL201:
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2392              		.loc 1 2364 0
 2393 0000 0346     		mov	r3, r0
 2394 0002 18B1     		cbz	r0, .L214
 2395              	.LVL202:
 2396              	.L211:
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2397              		.loc 1 2365 0 discriminator 4
 2398 0004 2BB1     		cbz	r3, .L215
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2399              		.loc 1 2367 0
 2400 0006 03F13400 		add	r0, r3, #52
 2401 000a 7047     		bx	lr
 2402              	.LVL203:
 2403              	.L214:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 144


2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2404              		.loc 1 2364 0 discriminator 1
 2405 000c 054B     		ldr	r3, .L216
 2406 000e 1B68     		ldr	r3, [r3]
 2407              	.LVL204:
 2408 0010 F8E7     		b	.L211
 2409              	.LVL205:
 2410              	.L215:
 2411              	.LBB160:
 2412              	.LBB161:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2413              		.loc 2 195 0
 2414              		.syntax unified
 2415              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2416 0012 4FF05003 			mov r3, #80												
 2417 0016 83F31188 		msr basepri, r3											
 2418 001a BFF36F8F 		isb														
 2419 001e BFF34F8F 		dsb														
 2420              	
 2421              	@ 0 "" 2
 2422              	.LVL206:
 2423              		.thumb
 2424              		.syntax unified
 2425              	.L213:
 2426 0022 FEE7     		b	.L213
 2427              	.L217:
 2428              		.align	2
 2429              	.L216:
 2430 0024 00000000 		.word	.LANCHOR10
 2431              	.LBE161:
 2432              	.LBE160:
 2433              		.cfi_endproc
 2434              	.LFE29:
 2436              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2437              		.align	1
 2438              		.global	xTaskIncrementTick
 2439              		.syntax unified
 2440              		.thumb
 2441              		.thumb_func
 2442              		.fpu fpv4-sp-d16
 2444              	xTaskIncrementTick:
 2445              	.LFB32:
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
 2446              		.loc 1 2708 0
 2447              		.cfi_startproc
 2448              		@ args = 0, pretend = 0, frame = 0
 2449              		@ frame_needed = 0, uses_anonymous_args = 0
 2450 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2451              	.LCFI29:
 2452              		.cfi_def_cfa_offset 24
 2453              		.cfi_offset 3, -24
 2454              		.cfi_offset 4, -20
 2455              		.cfi_offset 5, -16
 2456              		.cfi_offset 6, -12
 2457              		.cfi_offset 7, -8
 2458              		.cfi_offset 14, -4
 2459              	.LVL207:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 145


2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2460              		.loc 1 2717 0
 2461 0002 3A4B     		ldr	r3, .L239
 2462 0004 1B68     		ldr	r3, [r3]
 2463 0006 002B     		cmp	r3, #0
 2464 0008 69D1     		bne	.L219
 2465              	.LBB162:
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2466              		.loc 1 2721 0
 2467 000a 394B     		ldr	r3, .L239+4
 2468 000c 1D68     		ldr	r5, [r3]
 2469 000e 0135     		adds	r5, r5, #1
 2470              	.LVL208:
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2471              		.loc 1 2725 0
 2472 0010 1D60     		str	r5, [r3]
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2473              		.loc 1 2727 0
 2474 0012 C5B9     		cbnz	r5, .L220
 2475              	.LBB163:
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2476              		.loc 1 2729 0
 2477 0014 374B     		ldr	r3, .L239+8
 2478 0016 1B68     		ldr	r3, [r3]
 2479 0018 1B68     		ldr	r3, [r3]
 2480 001a 43B1     		cbz	r3, .L221
 2481              	.LBB164:
 2482              	.LBB165:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2483              		.loc 2 195 0
 2484              		.syntax unified
 2485              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2486 001c 4FF05003 			mov r3, #80												
 2487 0020 83F31188 		msr basepri, r3											
 2488 0024 BFF36F8F 		isb														
 2489 0028 BFF34F8F 		dsb														
 2490              	
 2491              	@ 0 "" 2
 2492              	.LVL209:
 2493              		.thumb
 2494              		.syntax unified
 2495              	.L222:
 2496 002c FEE7     		b	.L222
 2497              	.L221:
 2498              	.LBE165:
 2499              	.LBE164:
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2500              		.loc 1 2729 0 discriminator 2
 2501 002e 314A     		ldr	r2, .L239+8
 2502 0030 1168     		ldr	r1, [r2]
 2503              	.LVL210:
 2504 0032 314B     		ldr	r3, .L239+12
 2505 0034 1868     		ldr	r0, [r3]
 2506 0036 1060     		str	r0, [r2]
 2507 0038 1960     		str	r1, [r3]
 2508 003a 304A     		ldr	r2, .L239+16
 2509 003c 1368     		ldr	r3, [r2]
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 146


 2510 003e 0133     		adds	r3, r3, #1
 2511 0040 1360     		str	r3, [r2]
 2512 0042 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2513              	.LVL211:
 2514              	.L220:
 2515              	.LBE163:
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2516              		.loc 1 2740 0
 2517 0046 2E4B     		ldr	r3, .L239+20
 2518 0048 1B68     		ldr	r3, [r3]
 2519 004a AB42     		cmp	r3, r5
 2520 004c 3DD9     		bls	.L232
 2521              	.LBE162:
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2522              		.loc 1 2711 0
 2523 004e 0024     		movs	r4, #0
 2524              	.LVL212:
 2525              	.L224:
 2526              	.LBB166:
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2527              		.loc 1 2823 0
 2528 0050 2C4B     		ldr	r3, .L239+24
 2529 0052 1B68     		ldr	r3, [r3]
 2530 0054 DB6A     		ldr	r3, [r3, #44]
 2531 0056 03EB8303 		add	r3, r3, r3, lsl #2
 2532 005a 9A00     		lsls	r2, r3, #2
 2533 005c 2A4B     		ldr	r3, .L239+28
 2534 005e 9B58     		ldr	r3, [r3, r2]
 2535 0060 012B     		cmp	r3, #1
 2536 0062 00D9     		bls	.L230
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2537              		.loc 1 2825 0
 2538 0064 0124     		movs	r4, #1
 2539              	.LVL213:
 2540              	.L230:
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2541              		.loc 1 2851 0
 2542 0066 294B     		ldr	r3, .L239+32
 2543 0068 1B68     		ldr	r3, [r3]
 2544 006a 002B     		cmp	r3, #0
 2545 006c 3CD0     		beq	.L218
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2546              		.loc 1 2853 0
 2547 006e 0124     		movs	r4, #1
 2548              	.LVL214:
 2549              	.LBE166:
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2550              		.loc 1 2875 0
 2551 0070 3AE0     		b	.L218
 2552              	.LVL215:
 2553              	.L233:
 2554              	.LBB167:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 2555              		.loc 1 2806 0
 2556 0072 0124     		movs	r4, #1
 2557              	.LVL216:
 2558              	.L223:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 147


2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2559              		.loc 1 2744 0
 2560 0074 1F4B     		ldr	r3, .L239+8
 2561 0076 1B68     		ldr	r3, [r3]
 2562 0078 1B68     		ldr	r3, [r3]
 2563 007a 43B3     		cbz	r3, .L237
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2564              		.loc 1 2760 0
 2565 007c 1D4B     		ldr	r3, .L239+8
 2566 007e 1B68     		ldr	r3, [r3]
 2567 0080 DB68     		ldr	r3, [r3, #12]
 2568 0082 DE68     		ldr	r6, [r3, #12]
 2569              	.LVL217:
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2570              		.loc 1 2761 0
 2571 0084 7368     		ldr	r3, [r6, #4]
 2572              	.LVL218:
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2573              		.loc 1 2763 0
 2574 0086 9D42     		cmp	r5, r3
 2575 0088 26D3     		bcc	.L238
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2576              		.loc 1 2779 0
 2577 008a 371D     		adds	r7, r6, #4
 2578 008c 3846     		mov	r0, r7
 2579 008e FFF7FEFF 		bl	uxListRemove
 2580              	.LVL219:
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2581              		.loc 1 2783 0
 2582 0092 B36A     		ldr	r3, [r6, #40]
 2583 0094 1BB1     		cbz	r3, .L227
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2584              		.loc 1 2785 0
 2585 0096 06F11800 		add	r0, r6, #24
 2586 009a FFF7FEFF 		bl	uxListRemove
 2587              	.LVL220:
 2588              	.L227:
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2589              		.loc 1 2794 0
 2590 009e F36A     		ldr	r3, [r6, #44]
 2591 00a0 0122     		movs	r2, #1
 2592 00a2 9A40     		lsls	r2, r2, r3
 2593 00a4 1A49     		ldr	r1, .L239+36
 2594 00a6 0868     		ldr	r0, [r1]
 2595 00a8 0243     		orrs	r2, r2, r0
 2596 00aa 0A60     		str	r2, [r1]
 2597 00ac 03EB8303 		add	r3, r3, r3, lsl #2
 2598 00b0 9A00     		lsls	r2, r3, #2
 2599 00b2 3946     		mov	r1, r7
 2600 00b4 1448     		ldr	r0, .L239+28
 2601 00b6 1044     		add	r0, r0, r2
 2602 00b8 FFF7FEFF 		bl	vListInsertEnd
 2603              	.LVL221:
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 2604              		.loc 1 2804 0
 2605 00bc F26A     		ldr	r2, [r6, #44]
 2606 00be 114B     		ldr	r3, .L239+24
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 148


 2607 00c0 1B68     		ldr	r3, [r3]
 2608 00c2 DB6A     		ldr	r3, [r3, #44]
 2609 00c4 9A42     		cmp	r2, r3
 2610 00c6 D4D2     		bcs	.L233
 2611 00c8 D4E7     		b	.L223
 2612              	.LVL222:
 2613              	.L232:
 2614              	.LBE167:
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2615              		.loc 1 2711 0
 2616 00ca 0024     		movs	r4, #0
 2617 00cc D2E7     		b	.L223
 2618              	.LVL223:
 2619              	.L237:
 2620              	.LBB168:
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 2621              		.loc 1 2751 0
 2622 00ce 0C4B     		ldr	r3, .L239+20
 2623 00d0 4FF0FF32 		mov	r2, #-1
 2624 00d4 1A60     		str	r2, [r3]
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2625              		.loc 1 2752 0
 2626 00d6 BBE7     		b	.L224
 2627              	.LVL224:
 2628              	.L238:
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 2629              		.loc 1 2770 0
 2630 00d8 094A     		ldr	r2, .L239+20
 2631 00da 1360     		str	r3, [r2]
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2632              		.loc 1 2771 0
 2633 00dc B8E7     		b	.L224
 2634              	.LVL225:
 2635              	.L219:
 2636              	.LBE168:
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2637              		.loc 1 2864 0
 2638 00de 0D4A     		ldr	r2, .L239+40
 2639 00e0 1368     		ldr	r3, [r2]
 2640 00e2 0133     		adds	r3, r3, #1
 2641 00e4 1360     		str	r3, [r2]
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2642              		.loc 1 2711 0
 2643 00e6 0024     		movs	r4, #0
 2644              	.LVL226:
 2645              	.L218:
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2646              		.loc 1 2876 0
 2647 00e8 2046     		mov	r0, r4
 2648 00ea F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2649              	.L240:
 2650              		.align	2
 2651              	.L239:
 2652 00ec 00000000 		.word	.LANCHOR16
 2653 00f0 00000000 		.word	.LANCHOR15
 2654 00f4 00000000 		.word	.LANCHOR2
 2655 00f8 00000000 		.word	.LANCHOR8
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 149


 2656 00fc 00000000 		.word	.LANCHOR17
 2657 0100 00000000 		.word	.LANCHOR3
 2658 0104 00000000 		.word	.LANCHOR10
 2659 0108 00000000 		.word	.LANCHOR4
 2660 010c 00000000 		.word	.LANCHOR18
 2661 0110 00000000 		.word	.LANCHOR13
 2662 0114 00000000 		.word	.LANCHOR19
 2663              		.cfi_endproc
 2664              	.LFE32:
 2666              		.section	.text.xTaskResumeAll,"ax",%progbits
 2667              		.align	1
 2668              		.global	xTaskResumeAll
 2669              		.syntax unified
 2670              		.thumb
 2671              		.thumb_func
 2672              		.fpu fpv4-sp-d16
 2674              	xTaskResumeAll:
 2675              	.LFB25:
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2676              		.loc 1 2195 0
 2677              		.cfi_startproc
 2678              		@ args = 0, pretend = 0, frame = 0
 2679              		@ frame_needed = 0, uses_anonymous_args = 0
 2680 0000 38B5     		push	{r3, r4, r5, lr}
 2681              	.LCFI30:
 2682              		.cfi_def_cfa_offset 16
 2683              		.cfi_offset 3, -16
 2684              		.cfi_offset 4, -12
 2685              		.cfi_offset 5, -8
 2686              		.cfi_offset 14, -4
 2687              	.LVL227:
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2688              		.loc 1 2201 0
 2689 0002 334B     		ldr	r3, .L257
 2690 0004 1B68     		ldr	r3, [r3]
 2691 0006 43B9     		cbnz	r3, .L242
 2692              	.LBB169:
 2693              	.LBB170:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2694              		.loc 2 195 0
 2695              		.syntax unified
 2696              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2697 0008 4FF05003 			mov r3, #80												
 2698 000c 83F31188 		msr basepri, r3											
 2699 0010 BFF36F8F 		isb														
 2700 0014 BFF34F8F 		dsb														
 2701              	
 2702              	@ 0 "" 2
 2703              	.LVL228:
 2704              		.thumb
 2705              		.syntax unified
 2706              	.L243:
 2707 0018 FEE7     		b	.L243
 2708              	.L242:
 2709              	.LBE170:
 2710              	.LBE169:
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 150


 2711              		.loc 1 2208 0
 2712 001a FFF7FEFF 		bl	vPortEnterCritical
 2713              	.LVL229:
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2714              		.loc 1 2210 0
 2715 001e 2C4B     		ldr	r3, .L257
 2716 0020 1A68     		ldr	r2, [r3]
 2717 0022 013A     		subs	r2, r2, #1
 2718 0024 1A60     		str	r2, [r3]
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2719              		.loc 1 2212 0
 2720 0026 1B68     		ldr	r3, [r3]
 2721 0028 002B     		cmp	r3, #0
 2722 002a 4DD1     		bne	.L252
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2723              		.loc 1 2214 0
 2724 002c 294B     		ldr	r3, .L257+4
 2725 002e 1B68     		ldr	r3, [r3]
 2726 0030 23B9     		cbnz	r3, .L253
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2727              		.loc 1 2197 0
 2728 0032 0024     		movs	r4, #0
 2729              	.LVL230:
 2730              	.L244:
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2731              		.loc 1 2298 0
 2732 0034 FFF7FEFF 		bl	vPortExitCritical
 2733              	.LVL231:
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2734              		.loc 1 2301 0
 2735 0038 2046     		mov	r0, r4
 2736 003a 38BD     		pop	{r3, r4, r5, pc}
 2737              	.LVL232:
 2738              	.L253:
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2739              		.loc 1 2196 0
 2740 003c 0024     		movs	r4, #0
 2741              	.LVL233:
 2742              	.L245:
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2743              		.loc 1 2218 0
 2744 003e 264B     		ldr	r3, .L257+8
 2745 0040 1B68     		ldr	r3, [r3]
 2746 0042 1BB3     		cbz	r3, .L256
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2747              		.loc 1 2220 0
 2748 0044 244B     		ldr	r3, .L257+8
 2749 0046 DB68     		ldr	r3, [r3, #12]
 2750 0048 DC68     		ldr	r4, [r3, #12]
 2751              	.LVL234:
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2752              		.loc 1 2221 0
 2753 004a 04F11800 		add	r0, r4, #24
 2754 004e FFF7FEFF 		bl	uxListRemove
 2755              	.LVL235:
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2756              		.loc 1 2222 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 151


 2757 0052 251D     		adds	r5, r4, #4
 2758 0054 2846     		mov	r0, r5
 2759 0056 FFF7FEFF 		bl	uxListRemove
 2760              	.LVL236:
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2761              		.loc 1 2223 0
 2762 005a E36A     		ldr	r3, [r4, #44]
 2763 005c 0122     		movs	r2, #1
 2764 005e 9A40     		lsls	r2, r2, r3
 2765 0060 1E49     		ldr	r1, .L257+12
 2766 0062 0868     		ldr	r0, [r1]
 2767 0064 0243     		orrs	r2, r2, r0
 2768 0066 0A60     		str	r2, [r1]
 2769 0068 03EB8303 		add	r3, r3, r3, lsl #2
 2770 006c 9A00     		lsls	r2, r3, #2
 2771 006e 2946     		mov	r1, r5
 2772 0070 1B48     		ldr	r0, .L257+16
 2773 0072 1044     		add	r0, r0, r2
 2774 0074 FFF7FEFF 		bl	vListInsertEnd
 2775              	.LVL237:
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2776              		.loc 1 2227 0
 2777 0078 E26A     		ldr	r2, [r4, #44]
 2778 007a 1A4B     		ldr	r3, .L257+20
 2779 007c 1B68     		ldr	r3, [r3]
 2780 007e DB6A     		ldr	r3, [r3, #44]
 2781 0080 9A42     		cmp	r2, r3
 2782 0082 DCD3     		bcc	.L245
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2783              		.loc 1 2229 0
 2784 0084 184B     		ldr	r3, .L257+24
 2785 0086 0122     		movs	r2, #1
 2786 0088 1A60     		str	r2, [r3]
 2787 008a D8E7     		b	.L245
 2788              	.L256:
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2789              		.loc 1 2237 0
 2790 008c 0CB1     		cbz	r4, .L248
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2791              		.loc 1 2245 0
 2792 008e FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2793              	.LVL238:
 2794              	.L248:
 2795              	.LBB171:
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2796              		.loc 1 2253 0
 2797 0092 164B     		ldr	r3, .L257+28
 2798 0094 1C68     		ldr	r4, [r3]
 2799              	.LVL239:
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2800              		.loc 1 2255 0
 2801 0096 54B1     		cbz	r4, .L249
 2802              	.L251:
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 2803              		.loc 1 2259 0
 2804 0098 FFF7FEFF 		bl	xTaskIncrementTick
 2805              	.LVL240:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 152


 2806 009c 10B1     		cbz	r0, .L250
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 2807              		.loc 1 2261 0
 2808 009e 124B     		ldr	r3, .L257+24
 2809 00a0 0122     		movs	r2, #1
 2810 00a2 1A60     		str	r2, [r3]
 2811              	.L250:
 2812              	.LVL241:
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2813              		.loc 1 2268 0
 2814 00a4 013C     		subs	r4, r4, #1
 2815              	.LVL242:
 2816 00a6 F7D1     		bne	.L251
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2817              		.loc 1 2270 0
 2818 00a8 104B     		ldr	r3, .L257+28
 2819 00aa 0022     		movs	r2, #0
 2820 00ac 1A60     		str	r2, [r3]
 2821              	.L249:
 2822              	.LBE171:
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2823              		.loc 1 2278 0
 2824 00ae 0E4B     		ldr	r3, .L257+24
 2825 00b0 1B68     		ldr	r3, [r3]
 2826 00b2 5BB1     		cbz	r3, .L254
 2827              	.LVL243:
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2828              		.loc 1 2285 0
 2829 00b4 0E4B     		ldr	r3, .L257+32
 2830 00b6 4FF08052 		mov	r2, #268435456
 2831 00ba 1A60     		str	r2, [r3]
 2832              		.syntax unified
 2833              	@ 2285 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2834 00bc BFF34F8F 		dsb
 2835              	@ 0 "" 2
 2836              	@ 2285 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2837 00c0 BFF36F8F 		isb
 2838              	@ 0 "" 2
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2839              		.loc 1 2282 0
 2840              		.thumb
 2841              		.syntax unified
 2842 00c4 0124     		movs	r4, #1
 2843              	.LVL244:
 2844 00c6 B5E7     		b	.L244
 2845              	.LVL245:
 2846              	.L252:
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2847              		.loc 1 2197 0
 2848 00c8 0024     		movs	r4, #0
 2849 00ca B3E7     		b	.L244
 2850              	.LVL246:
 2851              	.L254:
 2852 00cc 0024     		movs	r4, #0
 2853              	.LVL247:
 2854 00ce B1E7     		b	.L244
 2855              	.L258:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 153


 2856              		.align	2
 2857              	.L257:
 2858 00d0 00000000 		.word	.LANCHOR16
 2859 00d4 00000000 		.word	.LANCHOR9
 2860 00d8 00000000 		.word	.LANCHOR1
 2861 00dc 00000000 		.word	.LANCHOR13
 2862 00e0 00000000 		.word	.LANCHOR4
 2863 00e4 00000000 		.word	.LANCHOR10
 2864 00e8 00000000 		.word	.LANCHOR18
 2865 00ec 00000000 		.word	.LANCHOR19
 2866 00f0 04ED00E0 		.word	-536810236
 2867              		.cfi_endproc
 2868              	.LFE25:
 2870              		.section	.text.vTaskDelay,"ax",%progbits
 2871              		.align	1
 2872              		.global	vTaskDelay
 2873              		.syntax unified
 2874              		.thumb
 2875              		.thumb_func
 2876              		.fpu fpv4-sp-d16
 2878              	vTaskDelay:
 2879              	.LFB13:
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2880              		.loc 1 1342 0
 2881              		.cfi_startproc
 2882              		@ args = 0, pretend = 0, frame = 0
 2883              		@ frame_needed = 0, uses_anonymous_args = 0
 2884              	.LVL248:
 2885 0000 10B5     		push	{r4, lr}
 2886              	.LCFI31:
 2887              		.cfi_def_cfa_offset 8
 2888              		.cfi_offset 4, -8
 2889              		.cfi_offset 14, -4
 2890              	.LVL249:
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2891              		.loc 1 1346 0
 2892 0002 A8B1     		cbz	r0, .L260
 2893 0004 0446     		mov	r4, r0
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 2894              		.loc 1 1348 0
 2895 0006 0F4B     		ldr	r3, .L265
 2896 0008 1B68     		ldr	r3, [r3]
 2897 000a 43B1     		cbz	r3, .L261
 2898              	.LBB172:
 2899              	.LBB173:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2900              		.loc 2 195 0
 2901              		.syntax unified
 2902              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2903 000c 4FF05003 			mov r3, #80												
 2904 0010 83F31188 		msr basepri, r3											
 2905 0014 BFF36F8F 		isb														
 2906 0018 BFF34F8F 		dsb														
 2907              	
 2908              	@ 0 "" 2
 2909              	.LVL250:
 2910              		.thumb
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 154


 2911              		.syntax unified
 2912              	.L262:
 2913 001c FEE7     		b	.L262
 2914              	.L261:
 2915              	.LBE173:
 2916              	.LBE172:
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2917              		.loc 1 1349 0
 2918 001e FFF7FEFF 		bl	vTaskSuspendAll
 2919              	.LVL251:
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2920              		.loc 1 1360 0
 2921 0022 0021     		movs	r1, #0
 2922 0024 2046     		mov	r0, r4
 2923 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2924              	.LVL252:
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2925              		.loc 1 1362 0
 2926 002a FFF7FEFF 		bl	xTaskResumeAll
 2927              	.LVL253:
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2928              		.loc 1 1371 0
 2929 002e 38B9     		cbnz	r0, .L259
 2930              	.LVL254:
 2931              	.L260:
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2932              		.loc 1 1373 0
 2933 0030 054B     		ldr	r3, .L265+4
 2934 0032 4FF08052 		mov	r2, #268435456
 2935 0036 1A60     		str	r2, [r3]
 2936              		.syntax unified
 2937              	@ 1373 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2938 0038 BFF34F8F 		dsb
 2939              	@ 0 "" 2
 2940              	@ 1373 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2941 003c BFF36F8F 		isb
 2942              	@ 0 "" 2
 2943              		.thumb
 2944              		.syntax unified
 2945              	.L259:
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2946              		.loc 1 1379 0
 2947 0040 10BD     		pop	{r4, pc}
 2948              	.L266:
 2949 0042 00BF     		.align	2
 2950              	.L265:
 2951 0044 00000000 		.word	.LANCHOR16
 2952 0048 04ED00E0 		.word	-536810236
 2953              		.cfi_endproc
 2954              	.LFE13:
 2956              		.section	.text.xTaskCatchUpTicks,"ax",%progbits
 2957              		.align	1
 2958              		.global	xTaskCatchUpTicks
 2959              		.syntax unified
 2960              		.thumb
 2961              		.thumb_func
 2962              		.fpu fpv4-sp-d16
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 155


 2964              	xTaskCatchUpTicks:
 2965              	.LFB31:
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xYieldRequired = pdFALSE;
 2966              		.loc 1 2610 0
 2967              		.cfi_startproc
 2968              		@ args = 0, pretend = 0, frame = 0
 2969              		@ frame_needed = 0, uses_anonymous_args = 0
 2970              	.LVL255:
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2971              		.loc 1 2615 0
 2972 0000 0B4B     		ldr	r3, .L272
 2973 0002 1B68     		ldr	r3, [r3]
 2974 0004 43B1     		cbz	r3, .L268
 2975              	.LBB174:
 2976              	.LBB175:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2977              		.loc 2 195 0
 2978              		.syntax unified
 2979              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2980 0006 4FF05003 			mov r3, #80												
 2981 000a 83F31188 		msr basepri, r3											
 2982 000e BFF36F8F 		isb														
 2983 0012 BFF34F8F 		dsb														
 2984              	
 2985              	@ 0 "" 2
 2986              	.LVL256:
 2987              		.thumb
 2988              		.syntax unified
 2989              	.L269:
 2990 0016 FEE7     		b	.L269
 2991              	.L268:
 2992              	.LBE175:
 2993              	.LBE174:
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xYieldRequired = pdFALSE;
 2994              		.loc 1 2610 0
 2995 0018 10B5     		push	{r4, lr}
 2996              	.LCFI32:
 2997              		.cfi_def_cfa_offset 8
 2998              		.cfi_offset 4, -8
 2999              		.cfi_offset 14, -4
 3000 001a 0446     		mov	r4, r0
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xPendedTicks += xTicksToCatchUp;
 3001              		.loc 1 2619 0
 3002 001c FFF7FEFF 		bl	vTaskSuspendAll
 3003              	.LVL257:
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldRequired = xTaskResumeAll();
 3004              		.loc 1 2620 0
 3005 0020 044A     		ldr	r2, .L272+4
 3006 0022 1368     		ldr	r3, [r2]
 3007 0024 2344     		add	r3, r3, r4
 3008 0026 1360     		str	r3, [r2]
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3009              		.loc 1 2621 0
 3010 0028 FFF7FEFF 		bl	xTaskResumeAll
 3011              	.LVL258:
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 3012              		.loc 1 2624 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 156


 3013 002c 10BD     		pop	{r4, pc}
 3014              	.LVL259:
 3015              	.L273:
 3016 002e 00BF     		.align	2
 3017              	.L272:
 3018 0030 00000000 		.word	.LANCHOR16
 3019 0034 00000000 		.word	.LANCHOR19
 3020              		.cfi_endproc
 3021              	.LFE31:
 3023              		.section	.text.vTaskSetApplicationTaskTag,"ax",%progbits
 3024              		.align	1
 3025              		.global	vTaskSetApplicationTaskTag
 3026              		.syntax unified
 3027              		.thumb
 3028              		.thumb_func
 3029              		.fpu fpv4-sp-d16
 3031              	vTaskSetApplicationTaskTag:
 3032              	.LFB33:
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
 3033              		.loc 1 2882 0
 3034              		.cfi_startproc
 3035              		@ args = 0, pretend = 0, frame = 0
 3036              		@ frame_needed = 0, uses_anonymous_args = 0
 3037              	.LVL260:
 3038 0000 38B5     		push	{r3, r4, r5, lr}
 3039              	.LCFI33:
 3040              		.cfi_def_cfa_offset 16
 3041              		.cfi_offset 3, -16
 3042              		.cfi_offset 4, -12
 3043              		.cfi_offset 5, -8
 3044              		.cfi_offset 14, -4
 3045 0002 0D46     		mov	r5, r1
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3046              		.loc 1 2887 0
 3047 0004 0446     		mov	r4, r0
 3048 0006 28B1     		cbz	r0, .L277
 3049              	.LVL261:
 3050              	.L275:
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3051              		.loc 1 2898 0
 3052 0008 FFF7FEFF 		bl	vPortEnterCritical
 3053              	.LVL262:
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3054              		.loc 1 2900 0
 3055 000c A565     		str	r5, [r4, #88]
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3056              		.loc 1 2902 0
 3057 000e FFF7FEFF 		bl	vPortExitCritical
 3058              	.LVL263:
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3059              		.loc 1 2903 0
 3060 0012 38BD     		pop	{r3, r4, r5, pc}
 3061              	.LVL264:
 3062              	.L277:
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3063              		.loc 1 2889 0
 3064 0014 014B     		ldr	r3, .L278
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 157


 3065 0016 1C68     		ldr	r4, [r3]
 3066              	.LVL265:
 3067 0018 F6E7     		b	.L275
 3068              	.L279:
 3069 001a 00BF     		.align	2
 3070              	.L278:
 3071 001c 00000000 		.word	.LANCHOR10
 3072              		.cfi_endproc
 3073              	.LFE33:
 3075              		.section	.text.xTaskGetApplicationTaskTag,"ax",%progbits
 3076              		.align	1
 3077              		.global	xTaskGetApplicationTaskTag
 3078              		.syntax unified
 3079              		.thumb
 3080              		.thumb_func
 3081              		.fpu fpv4-sp-d16
 3083              	xTaskGetApplicationTaskTag:
 3084              	.LFB34:
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 3085              		.loc 1 2911 0
 3086              		.cfi_startproc
 3087              		@ args = 0, pretend = 0, frame = 0
 3088              		@ frame_needed = 0, uses_anonymous_args = 0
 3089              	.LVL266:
 3090 0000 10B5     		push	{r4, lr}
 3091              	.LCFI34:
 3092              		.cfi_def_cfa_offset 8
 3093              		.cfi_offset 4, -8
 3094              		.cfi_offset 14, -4
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3095              		.loc 1 2916 0
 3096 0002 0446     		mov	r4, r0
 3097 0004 30B1     		cbz	r0, .L283
 3098              	.LVL267:
 3099              	.L281:
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3100              		.loc 1 2920 0 discriminator 4
 3101 0006 FFF7FEFF 		bl	vPortEnterCritical
 3102              	.LVL268:
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3103              		.loc 1 2922 0 discriminator 4
 3104 000a A46D     		ldr	r4, [r4, #88]
 3105              	.LVL269:
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3106              		.loc 1 2924 0 discriminator 4
 3107 000c FFF7FEFF 		bl	vPortExitCritical
 3108              	.LVL270:
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3109              		.loc 1 2927 0 discriminator 4
 3110 0010 2046     		mov	r0, r4
 3111 0012 10BD     		pop	{r4, pc}
 3112              	.LVL271:
 3113              	.L283:
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3114              		.loc 1 2916 0 discriminator 1
 3115 0014 014B     		ldr	r3, .L284
 3116 0016 1C68     		ldr	r4, [r3]
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 158


 3117              	.LVL272:
 3118 0018 F5E7     		b	.L281
 3119              	.L285:
 3120 001a 00BF     		.align	2
 3121              	.L284:
 3122 001c 00000000 		.word	.LANCHOR10
 3123              		.cfi_endproc
 3124              	.LFE34:
 3126              		.section	.text.xTaskGetApplicationTaskTagFromISR,"ax",%progbits
 3127              		.align	1
 3128              		.global	xTaskGetApplicationTaskTagFromISR
 3129              		.syntax unified
 3130              		.thumb
 3131              		.thumb_func
 3132              		.fpu fpv4-sp-d16
 3134              	xTaskGetApplicationTaskTagFromISR:
 3135              	.LFB35:
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 3136              		.loc 1 2935 0
 3137              		.cfi_startproc
 3138              		@ args = 0, pretend = 0, frame = 0
 3139              		@ frame_needed = 0, uses_anonymous_args = 0
 3140              		@ link register save eliminated.
 3141              	.LVL273:
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3142              		.loc 1 2941 0
 3143 0000 0346     		mov	r3, r0
 3144 0002 68B1     		cbz	r0, .L288
 3145              	.LVL274:
 3146              	.L287:
 3147              	.LBB176:
 3148              	.LBB177:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3149              		.loc 2 211 0 discriminator 4
 3150              		.syntax unified
 3151              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3152 0004 EFF31182 			mrs r2, basepri											
 3153 0008 4FF05001 		mov r1, #80												
 3154 000c 81F31188 		msr basepri, r1											
 3155 0010 BFF36F8F 		isb														
 3156 0014 BFF34F8F 		dsb														
 3157              	
 3158              	@ 0 "" 2
 3159              		.thumb
 3160              		.syntax unified
 3161              	.LBE177:
 3162              	.LBE176:
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3163              		.loc 1 2947 0 discriminator 4
 3164 0018 986D     		ldr	r0, [r3, #88]
 3165              	.LVL275:
 3166              	.LBB178:
 3167              	.LBB179:
 3168              		.loc 2 229 0 discriminator 4
 3169              		.syntax unified
 3170              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3171 001a 82F31188 			msr basepri, r2	
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 159


 3172              	@ 0 "" 2
 3173              		.thumb
 3174              		.syntax unified
 3175              	.LBE179:
 3176              	.LBE178:
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3177              		.loc 1 2952 0 discriminator 4
 3178 001e 7047     		bx	lr
 3179              	.LVL276:
 3180              	.L288:
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3181              		.loc 1 2941 0 discriminator 1
 3182 0020 014B     		ldr	r3, .L289
 3183 0022 1B68     		ldr	r3, [r3]
 3184              	.LVL277:
 3185 0024 EEE7     		b	.L287
 3186              	.L290:
 3187 0026 00BF     		.align	2
 3188              	.L289:
 3189 0028 00000000 		.word	.LANCHOR10
 3190              		.cfi_endproc
 3191              	.LFE35:
 3193              		.section	.text.xTaskCallApplicationTaskHook,"ax",%progbits
 3194              		.align	1
 3195              		.global	xTaskCallApplicationTaskHook
 3196              		.syntax unified
 3197              		.thumb
 3198              		.thumb_func
 3199              		.fpu fpv4-sp-d16
 3201              	xTaskCallApplicationTaskHook:
 3202              	.LFB36:
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
 3203              		.loc 1 2960 0
 3204              		.cfi_startproc
 3205              		@ args = 0, pretend = 0, frame = 0
 3206              		@ frame_needed = 0, uses_anonymous_args = 0
 3207              	.LVL278:
 3208 0000 08B5     		push	{r3, lr}
 3209              	.LCFI35:
 3210              		.cfi_def_cfa_offset 8
 3211              		.cfi_offset 3, -8
 3212              		.cfi_offset 14, -4
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3213              		.loc 1 2965 0
 3214 0002 0346     		mov	r3, r0
 3215 0004 20B1     		cbz	r0, .L296
 3216              	.LVL279:
 3217              	.L292:
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3218              		.loc 1 2974 0
 3219 0006 9B6D     		ldr	r3, [r3, #88]
 3220              	.LVL280:
 3221 0008 2BB1     		cbz	r3, .L294
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3222              		.loc 1 2976 0
 3223 000a 0846     		mov	r0, r1
 3224 000c 9847     		blx	r3
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 160


 3225              	.LVL281:
 3226              	.L291:
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3227              		.loc 1 2984 0
 3228 000e 08BD     		pop	{r3, pc}
 3229              	.LVL282:
 3230              	.L296:
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3231              		.loc 1 2967 0
 3232 0010 024B     		ldr	r3, .L297
 3233 0012 1B68     		ldr	r3, [r3]
 3234              	.LVL283:
 3235 0014 F7E7     		b	.L292
 3236              	.LVL284:
 3237              	.L294:
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3238              		.loc 1 2980 0
 3239 0016 0020     		movs	r0, #0
 3240              	.LVL285:
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3241              		.loc 1 2983 0
 3242 0018 F9E7     		b	.L291
 3243              	.L298:
 3244 001a 00BF     		.align	2
 3245              	.L297:
 3246 001c 00000000 		.word	.LANCHOR10
 3247              		.cfi_endproc
 3248              	.LFE36:
 3250              		.section	.text.vTaskSwitchContext,"ax",%progbits
 3251              		.align	1
 3252              		.global	vTaskSwitchContext
 3253              		.syntax unified
 3254              		.thumb
 3255              		.thumb_func
 3256              		.fpu fpv4-sp-d16
 3258              	vTaskSwitchContext:
 3259              	.LFB37:
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3260              		.loc 1 2990 0
 3261              		.cfi_startproc
 3262              		@ args = 0, pretend = 0, frame = 0
 3263              		@ frame_needed = 0, uses_anonymous_args = 0
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3264              		.loc 1 2991 0
 3265 0000 314B     		ldr	r3, .L311
 3266 0002 1B68     		ldr	r3, [r3]
 3267 0004 1BB1     		cbz	r3, .L300
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3268              		.loc 1 2995 0
 3269 0006 314B     		ldr	r3, .L311+4
 3270 0008 0122     		movs	r2, #1
 3271 000a 1A60     		str	r2, [r3]
 3272 000c 7047     		bx	lr
 3273              	.L300:
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3274              		.loc 1 2990 0
 3275 000e 10B5     		push	{r4, lr}
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 161


 3276              	.LCFI36:
 3277              		.cfi_def_cfa_offset 8
 3278              		.cfi_offset 4, -8
 3279              		.cfi_offset 14, -4
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 3280              		.loc 1 2999 0
 3281 0010 2E4B     		ldr	r3, .L311+4
 3282 0012 0022     		movs	r2, #0
 3283 0014 1A60     		str	r2, [r3]
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
 3284              		.loc 1 3007 0
 3285 0016 FFF7FEFF 		bl	getRunTimeCounterValue
 3286              	.LVL286:
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3287              		.loc 1 3017 0
 3288 001a 2D4B     		ldr	r3, .L311+8
 3289 001c 1B68     		ldr	r3, [r3]
 3290 001e 9842     		cmp	r0, r3
 3291 0020 05D9     		bls	.L302
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3292              		.loc 1 3019 0
 3293 0022 2C4A     		ldr	r2, .L311+12
 3294 0024 1168     		ldr	r1, [r2]
 3295 0026 C31A     		subs	r3, r0, r3
 3296 0028 CA6D     		ldr	r2, [r1, #92]
 3297 002a 1344     		add	r3, r3, r2
 3298 002c CB65     		str	r3, [r1, #92]
 3299              	.L302:
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3300              		.loc 1 3025 0
 3301 002e 284B     		ldr	r3, .L311+8
 3302 0030 1860     		str	r0, [r3]
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3303              		.loc 1 3030 0
 3304 0032 284B     		ldr	r3, .L311+12
 3305 0034 1A68     		ldr	r2, [r3]
 3306 0036 1268     		ldr	r2, [r2]
 3307 0038 1B68     		ldr	r3, [r3]
 3308 003a 1B6B     		ldr	r3, [r3, #48]
 3309 003c 9A42     		cmp	r2, r3
 3310 003e 05D8     		bhi	.L303
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3311              		.loc 1 3030 0 is_stmt 0 discriminator 1
 3312 0040 244B     		ldr	r3, .L311+12
 3313 0042 1868     		ldr	r0, [r3]
 3314 0044 1968     		ldr	r1, [r3]
 3315 0046 3431     		adds	r1, r1, #52
 3316 0048 FFF7FEFF 		bl	vApplicationStackOverflowHook
 3317              	.LVL287:
 3318              	.L303:
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3319              		.loc 1 3035 0 is_stmt 1
 3320 004c 214B     		ldr	r3, .L311+12
 3321 004e 1B68     		ldr	r3, [r3]
 3322 0050 214A     		ldr	r2, .L311+16
 3323 0052 1268     		ldr	r2, [r2]
 3324 0054 9A66     		str	r2, [r3, #104]
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 162


 3325              	.LBB180:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3326              		.loc 1 3041 0
 3327 0056 214B     		ldr	r3, .L311+20
 3328 0058 1B68     		ldr	r3, [r3]
 3329              	.LVL288:
 3330              	.LBB181:
 3331              	.LBB182:
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 3332              		.loc 2 134 0
 3333              		.syntax unified
 3334              	@ 134 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3335 005a B3FA83F3 		clz r3, r3
 3336              	@ 0 "" 2
 3337              	.LVL289:
 3338              		.thumb
 3339              		.syntax unified
 3340 005e DBB2     		uxtb	r3, r3
 3341              	.LBE182:
 3342              	.LBE181:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3343              		.loc 1 3041 0
 3344 0060 C3F11F03 		rsb	r3, r3, #31
 3345              	.LVL290:
 3346 0064 03EB8301 		add	r1, r3, r3, lsl #2
 3347 0068 8A00     		lsls	r2, r1, #2
 3348 006a 1D49     		ldr	r1, .L311+24
 3349 006c 8A58     		ldr	r2, [r1, r2]
 3350 006e 42B9     		cbnz	r2, .L304
 3351              	.LBB183:
 3352              	.LBB184:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3353              		.loc 2 195 0
 3354              		.syntax unified
 3355              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3356 0070 4FF05003 			mov r3, #80												
 3357 0074 83F31188 		msr basepri, r3											
 3358 0078 BFF36F8F 		isb														
 3359 007c BFF34F8F 		dsb														
 3360              	
 3361              	@ 0 "" 2
 3362              	.LVL291:
 3363              		.thumb
 3364              		.syntax unified
 3365              	.L305:
 3366 0080 FEE7     		b	.L305
 3367              	.LVL292:
 3368              	.L304:
 3369              	.LBE184:
 3370              	.LBE183:
 3371              	.LBB185:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3372              		.loc 1 3041 0 discriminator 2
 3373 0082 1748     		ldr	r0, .L311+24
 3374 0084 9A00     		lsls	r2, r3, #2
 3375 0086 D418     		adds	r4, r2, r3
 3376 0088 A100     		lsls	r1, r4, #2
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 163


 3377 008a 0144     		add	r1, r1, r0
 3378 008c 4C68     		ldr	r4, [r1, #4]
 3379 008e 6468     		ldr	r4, [r4, #4]
 3380 0090 4C60     		str	r4, [r1, #4]
 3381 0092 1A44     		add	r2, r2, r3
 3382 0094 9100     		lsls	r1, r2, #2
 3383 0096 0831     		adds	r1, r1, #8
 3384 0098 0844     		add	r0, r0, r1
 3385 009a 8442     		cmp	r4, r0
 3386 009c 0DD0     		beq	.L310
 3387              	.L306:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3388              		.loc 1 3041 0 is_stmt 0 discriminator 5
 3389 009e 03EB8303 		add	r3, r3, r3, lsl #2
 3390              	.LVL293:
 3391 00a2 9A00     		lsls	r2, r3, #2
 3392 00a4 0E4B     		ldr	r3, .L311+24
 3393 00a6 1344     		add	r3, r3, r2
 3394 00a8 5B68     		ldr	r3, [r3, #4]
 3395 00aa DA68     		ldr	r2, [r3, #12]
 3396 00ac 094B     		ldr	r3, .L311+12
 3397 00ae 1A60     		str	r2, [r3]
 3398              	.LBE185:
 3399              	.LBE180:
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3400              		.loc 1 3047 0 is_stmt 1 discriminator 5
 3401 00b0 1B68     		ldr	r3, [r3]
 3402 00b2 9A6E     		ldr	r2, [r3, #104]
 3403 00b4 084B     		ldr	r3, .L311+16
 3404 00b6 1A60     		str	r2, [r3]
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3405              		.loc 1 3061 0 discriminator 5
 3406 00b8 10BD     		pop	{r4, pc}
 3407              	.LVL294:
 3408              	.L310:
 3409              	.LBB187:
 3410              	.LBB186:
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3411              		.loc 1 3041 0 discriminator 3
 3412 00ba 6168     		ldr	r1, [r4, #4]
 3413 00bc 0848     		ldr	r0, .L311+24
 3414 00be 1422     		movs	r2, #20
 3415 00c0 02FB0302 		mla	r2, r2, r3, r0
 3416 00c4 5160     		str	r1, [r2, #4]
 3417 00c6 EAE7     		b	.L306
 3418              	.L312:
 3419              		.align	2
 3420              	.L311:
 3421 00c8 00000000 		.word	.LANCHOR16
 3422 00cc 00000000 		.word	.LANCHOR18
 3423 00d0 00000000 		.word	.LANCHOR20
 3424 00d4 00000000 		.word	.LANCHOR10
 3425 00d8 00000000 		.word	.LANCHOR21
 3426 00dc 00000000 		.word	.LANCHOR13
 3427 00e0 00000000 		.word	.LANCHOR4
 3428              	.LBE186:
 3429              	.LBE187:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 164


 3430              		.cfi_endproc
 3431              	.LFE37:
 3433              		.section	.text.vTaskSuspend,"ax",%progbits
 3434              		.align	1
 3435              		.global	vTaskSuspend
 3436              		.syntax unified
 3437              		.thumb
 3438              		.thumb_func
 3439              		.fpu fpv4-sp-d16
 3441              	vTaskSuspend:
 3442              	.LFB18:
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 3443              		.loc 1 1705 0
 3444              		.cfi_startproc
 3445              		@ args = 0, pretend = 0, frame = 0
 3446              		@ frame_needed = 0, uses_anonymous_args = 0
 3447              	.LVL295:
 3448 0000 38B5     		push	{r3, r4, r5, lr}
 3449              	.LCFI37:
 3450              		.cfi_def_cfa_offset 16
 3451              		.cfi_offset 3, -16
 3452              		.cfi_offset 4, -12
 3453              		.cfi_offset 5, -8
 3454              		.cfi_offset 14, -4
 3455 0002 0446     		mov	r4, r0
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3456              		.loc 1 1708 0
 3457 0004 FFF7FEFF 		bl	vPortEnterCritical
 3458              	.LVL296:
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3459              		.loc 1 1712 0
 3460 0008 64B3     		cbz	r4, .L325
 3461              	.LVL297:
 3462              	.L314:
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3463              		.loc 1 1718 0 discriminator 4
 3464 000a 251D     		adds	r5, r4, #4
 3465 000c 2846     		mov	r0, r5
 3466 000e FFF7FEFF 		bl	uxListRemove
 3467              	.LVL298:
 3468 0012 70B9     		cbnz	r0, .L315
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3469              		.loc 1 1720 0
 3470 0014 E26A     		ldr	r2, [r4, #44]
 3471 0016 02EB8201 		add	r1, r2, r2, lsl #2
 3472 001a 8B00     		lsls	r3, r1, #2
 3473 001c 2B49     		ldr	r1, .L329
 3474 001e CB58     		ldr	r3, [r1, r3]
 3475 0020 3BB9     		cbnz	r3, .L315
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3476              		.loc 1 1720 0 is_stmt 0 discriminator 1
 3477 0022 0123     		movs	r3, #1
 3478 0024 03FA02F2 		lsl	r2, r3, r2
 3479 0028 2949     		ldr	r1, .L329+4
 3480 002a 0B68     		ldr	r3, [r1]
 3481 002c 23EA0203 		bic	r3, r3, r2
 3482 0030 0B60     		str	r3, [r1]
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 165


 3483              	.L315:
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3484              		.loc 1 1728 0 is_stmt 1
 3485 0032 A36A     		ldr	r3, [r4, #40]
 3486 0034 1BB1     		cbz	r3, .L316
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3487              		.loc 1 1730 0
 3488 0036 04F11800 		add	r0, r4, #24
 3489 003a FFF7FEFF 		bl	uxListRemove
 3490              	.LVL299:
 3491              	.L316:
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3492              		.loc 1 1737 0
 3493 003e 2946     		mov	r1, r5
 3494 0040 2448     		ldr	r0, .L329+8
 3495 0042 FFF7FEFF 		bl	vListInsertEnd
 3496              	.LVL300:
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3497              		.loc 1 1741 0
 3498 0046 94F86430 		ldrb	r3, [r4, #100]	@ zero_extendqisi2
 3499 004a DBB2     		uxtb	r3, r3
 3500 004c 012B     		cmp	r3, #1
 3501 004e 0CD0     		beq	.L326
 3502              	.L317:
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3503              		.loc 1 1750 0
 3504 0050 FFF7FEFF 		bl	vPortExitCritical
 3505              	.LVL301:
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3506              		.loc 1 1752 0
 3507 0054 204B     		ldr	r3, .L329+12
 3508 0056 1B68     		ldr	r3, [r3]
 3509 0058 5BB9     		cbnz	r3, .L327
 3510              	.L318:
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3511              		.loc 1 1767 0
 3512 005a 204B     		ldr	r3, .L329+16
 3513 005c 1B68     		ldr	r3, [r3]
 3514 005e A342     		cmp	r3, r4
 3515 0060 0ED0     		beq	.L328
 3516              	.L313:
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3517              		.loc 1 1798 0
 3518 0062 38BD     		pop	{r3, r4, r5, pc}
 3519              	.LVL302:
 3520              	.L325:
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3521              		.loc 1 1712 0 discriminator 1
 3522 0064 1D4B     		ldr	r3, .L329+16
 3523 0066 1C68     		ldr	r4, [r3]
 3524              	.LVL303:
 3525 0068 CFE7     		b	.L314
 3526              	.LVL304:
 3527              	.L326:
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3528              		.loc 1 1745 0
 3529 006a 0023     		movs	r3, #0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 166


 3530 006c 84F86430 		strb	r3, [r4, #100]
 3531 0070 EEE7     		b	.L317
 3532              	.L327:
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3533              		.loc 1 1756 0
 3534 0072 FFF7FEFF 		bl	vPortEnterCritical
 3535              	.LVL305:
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3536              		.loc 1 1758 0
 3537 0076 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3538              	.LVL306:
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3539              		.loc 1 1760 0
 3540 007a FFF7FEFF 		bl	vPortExitCritical
 3541              	.LVL307:
 3542 007e ECE7     		b	.L318
 3543              	.L328:
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3544              		.loc 1 1769 0
 3545 0080 154B     		ldr	r3, .L329+12
 3546 0082 1B68     		ldr	r3, [r3]
 3547 0084 A3B1     		cbz	r3, .L320
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 3548              		.loc 1 1772 0
 3549 0086 164B     		ldr	r3, .L329+20
 3550 0088 1B68     		ldr	r3, [r3]
 3551 008a 43B1     		cbz	r3, .L321
 3552              	.LBB188:
 3553              	.LBB189:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3554              		.loc 2 195 0
 3555              		.syntax unified
 3556              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3557 008c 4FF05003 			mov r3, #80												
 3558 0090 83F31188 		msr basepri, r3											
 3559 0094 BFF36F8F 		isb														
 3560 0098 BFF34F8F 		dsb														
 3561              	
 3562              	@ 0 "" 2
 3563              	.LVL308:
 3564              		.thumb
 3565              		.syntax unified
 3566              	.L322:
 3567 009c FEE7     		b	.L322
 3568              	.L321:
 3569              	.LBE189:
 3570              	.LBE188:
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3571              		.loc 1 1773 0
 3572 009e 114B     		ldr	r3, .L329+24
 3573 00a0 4FF08052 		mov	r2, #268435456
 3574 00a4 1A60     		str	r2, [r3]
 3575              		.syntax unified
 3576              	@ 1773 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3577 00a6 BFF34F8F 		dsb
 3578              	@ 0 "" 2
 3579              	@ 1773 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 167


 3580 00aa BFF36F8F 		isb
 3581              	@ 0 "" 2
 3582              		.thumb
 3583              		.syntax unified
 3584 00ae D8E7     		b	.L313
 3585              	.L320:
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3586              		.loc 1 1780 0
 3587 00b0 084B     		ldr	r3, .L329+8
 3588 00b2 1A68     		ldr	r2, [r3]
 3589 00b4 0C4B     		ldr	r3, .L329+28
 3590 00b6 1B68     		ldr	r3, [r3]
 3591 00b8 9A42     		cmp	r2, r3
 3592 00ba 03D1     		bne	.L323
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3593              		.loc 1 1786 0
 3594 00bc 074B     		ldr	r3, .L329+16
 3595 00be 0022     		movs	r2, #0
 3596 00c0 1A60     		str	r2, [r3]
 3597 00c2 CEE7     		b	.L313
 3598              	.L323:
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3599              		.loc 1 1790 0
 3600 00c4 FFF7FEFF 		bl	vTaskSwitchContext
 3601              	.LVL309:
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3602              		.loc 1 1798 0
 3603 00c8 CBE7     		b	.L313
 3604              	.L330:
 3605 00ca 00BF     		.align	2
 3606              	.L329:
 3607 00cc 00000000 		.word	.LANCHOR4
 3608 00d0 00000000 		.word	.LANCHOR13
 3609 00d4 00000000 		.word	.LANCHOR0
 3610 00d8 00000000 		.word	.LANCHOR11
 3611 00dc 00000000 		.word	.LANCHOR10
 3612 00e0 00000000 		.word	.LANCHOR16
 3613 00e4 04ED00E0 		.word	-536810236
 3614 00e8 00000000 		.word	.LANCHOR9
 3615              		.cfi_endproc
 3616              	.LFE18:
 3618              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3619              		.align	1
 3620              		.global	vTaskPlaceOnEventList
 3621              		.syntax unified
 3622              		.thumb
 3623              		.thumb_func
 3624              		.fpu fpv4-sp-d16
 3626              	vTaskPlaceOnEventList:
 3627              	.LFB38:
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3628              		.loc 1 3065 0
 3629              		.cfi_startproc
 3630              		@ args = 0, pretend = 0, frame = 0
 3631              		@ frame_needed = 0, uses_anonymous_args = 0
 3632              	.LVL310:
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 168


 3633              		.loc 1 3066 0
 3634 0000 40B9     		cbnz	r0, .L332
 3635              	.LBB190:
 3636              	.LBB191:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3637              		.loc 2 195 0
 3638              		.syntax unified
 3639              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3640 0002 4FF05003 			mov r3, #80												
 3641 0006 83F31188 		msr basepri, r3											
 3642 000a BFF36F8F 		isb														
 3643 000e BFF34F8F 		dsb														
 3644              	
 3645              	@ 0 "" 2
 3646              	.LVL311:
 3647              		.thumb
 3648              		.syntax unified
 3649              	.L333:
 3650 0012 FEE7     		b	.L333
 3651              	.L332:
 3652              	.LBE191:
 3653              	.LBE190:
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3654              		.loc 1 3065 0
 3655 0014 10B5     		push	{r4, lr}
 3656              	.LCFI38:
 3657              		.cfi_def_cfa_offset 8
 3658              		.cfi_offset 4, -8
 3659              		.cfi_offset 14, -4
 3660 0016 0C46     		mov	r4, r1
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3661              		.loc 1 3075 0
 3662 0018 044B     		ldr	r3, .L336
 3663 001a 1968     		ldr	r1, [r3]
 3664              	.LVL312:
 3665 001c 1831     		adds	r1, r1, #24
 3666 001e FFF7FEFF 		bl	vListInsert
 3667              	.LVL313:
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3668              		.loc 1 3077 0
 3669 0022 0121     		movs	r1, #1
 3670 0024 2046     		mov	r0, r4
 3671 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3672              	.LVL314:
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3673              		.loc 1 3078 0
 3674 002a 10BD     		pop	{r4, pc}
 3675              	.LVL315:
 3676              	.L337:
 3677              		.align	2
 3678              	.L336:
 3679 002c 00000000 		.word	.LANCHOR10
 3680              		.cfi_endproc
 3681              	.LFE38:
 3683              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3684              		.align	1
 3685              		.global	vTaskPlaceOnUnorderedEventList
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 169


 3686              		.syntax unified
 3687              		.thumb
 3688              		.thumb_func
 3689              		.fpu fpv4-sp-d16
 3691              	vTaskPlaceOnUnorderedEventList:
 3692              	.LFB39:
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3693              		.loc 1 3082 0
 3694              		.cfi_startproc
 3695              		@ args = 0, pretend = 0, frame = 0
 3696              		@ frame_needed = 0, uses_anonymous_args = 0
 3697              	.LVL316:
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3698              		.loc 1 3083 0
 3699 0000 40B9     		cbnz	r0, .L339
 3700              	.LBB192:
 3701              	.LBB193:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3702              		.loc 2 195 0
 3703              		.syntax unified
 3704              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3705 0002 4FF05003 			mov r3, #80												
 3706 0006 83F31188 		msr basepri, r3											
 3707 000a BFF36F8F 		isb														
 3708 000e BFF34F8F 		dsb														
 3709              	
 3710              	@ 0 "" 2
 3711              	.LVL317:
 3712              		.thumb
 3713              		.syntax unified
 3714              	.L340:
 3715 0012 FEE7     		b	.L340
 3716              	.L339:
 3717 0014 0346     		mov	r3, r0
 3718              	.LBE193:
 3719              	.LBE192:
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3720              		.loc 1 3087 0
 3721 0016 0F48     		ldr	r0, .L345
 3722              	.LVL318:
 3723 0018 0068     		ldr	r0, [r0]
 3724 001a 40B9     		cbnz	r0, .L341
 3725              	.LBB194:
 3726              	.LBB195:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3727              		.loc 2 195 0
 3728              		.syntax unified
 3729              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3730 001c 4FF05003 			mov r3, #80												
 3731 0020 83F31188 		msr basepri, r3											
 3732 0024 BFF36F8F 		isb														
 3733 0028 BFF34F8F 		dsb														
 3734              	
 3735              	@ 0 "" 2
 3736              	.LVL319:
 3737              		.thumb
 3738              		.syntax unified
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 170


 3739              	.L342:
 3740 002c FEE7     		b	.L342
 3741              	.LVL320:
 3742              	.L341:
 3743              	.LBE195:
 3744              	.LBE194:
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3745              		.loc 1 3082 0
 3746 002e 10B5     		push	{r4, lr}
 3747              	.LCFI39:
 3748              		.cfi_def_cfa_offset 8
 3749              		.cfi_offset 4, -8
 3750              		.cfi_offset 14, -4
 3751 0030 1846     		mov	r0, r3
 3752 0032 1446     		mov	r4, r2
 3753 0034 0B46     		mov	r3, r1
 3754              	.LVL321:
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3755              		.loc 1 3092 0
 3756 0036 084A     		ldr	r2, .L345+4
 3757              	.LVL322:
 3758 0038 1168     		ldr	r1, [r2]
 3759              	.LVL323:
 3760 003a 43F00043 		orr	r3, r3, #-2147483648
 3761              	.LVL324:
 3762 003e 8B61     		str	r3, [r1, #24]
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3763              		.loc 1 3099 0
 3764 0040 1168     		ldr	r1, [r2]
 3765 0042 1831     		adds	r1, r1, #24
 3766 0044 FFF7FEFF 		bl	vListInsertEnd
 3767              	.LVL325:
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3768              		.loc 1 3101 0
 3769 0048 0121     		movs	r1, #1
 3770 004a 2046     		mov	r0, r4
 3771 004c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3772              	.LVL326:
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3773              		.loc 1 3102 0
 3774 0050 10BD     		pop	{r4, pc}
 3775              	.LVL327:
 3776              	.L346:
 3777 0052 00BF     		.align	2
 3778              	.L345:
 3779 0054 00000000 		.word	.LANCHOR16
 3780 0058 00000000 		.word	.LANCHOR10
 3781              		.cfi_endproc
 3782              	.LFE39:
 3784              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 3785              		.align	1
 3786              		.global	vTaskPlaceOnEventListRestricted
 3787              		.syntax unified
 3788              		.thumb
 3789              		.thumb_func
 3790              		.fpu fpv4-sp-d16
 3792              	vTaskPlaceOnEventListRestricted:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 171


 3793              	.LFB40:
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
 3794              		.loc 1 3108 0
 3795              		.cfi_startproc
 3796              		@ args = 0, pretend = 0, frame = 0
 3797              		@ frame_needed = 0, uses_anonymous_args = 0
 3798              	.LVL328:
 3799 0000 38B5     		push	{r3, r4, r5, lr}
 3800              	.LCFI40:
 3801              		.cfi_def_cfa_offset 16
 3802              		.cfi_offset 3, -16
 3803              		.cfi_offset 4, -12
 3804              		.cfi_offset 5, -8
 3805              		.cfi_offset 14, -4
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3806              		.loc 1 3109 0
 3807 0002 40B9     		cbnz	r0, .L348
 3808              	.LBB196:
 3809              	.LBB197:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3810              		.loc 2 195 0
 3811              		.syntax unified
 3812              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3813 0004 4FF05003 			mov r3, #80												
 3814 0008 83F31188 		msr basepri, r3											
 3815 000c BFF36F8F 		isb														
 3816 0010 BFF34F8F 		dsb														
 3817              	
 3818              	@ 0 "" 2
 3819              	.LVL329:
 3820              		.thumb
 3821              		.syntax unified
 3822              	.L349:
 3823 0014 FEE7     		b	.L349
 3824              	.L348:
 3825 0016 0C46     		mov	r4, r1
 3826 0018 1546     		mov	r5, r2
 3827              	.LBE197:
 3828              	.LBE196:
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3829              		.loc 1 3121 0
 3830 001a 064A     		ldr	r2, .L353
 3831              	.LVL330:
 3832 001c 1168     		ldr	r1, [r2]
 3833              	.LVL331:
 3834 001e 1831     		adds	r1, r1, #24
 3835 0020 FFF7FEFF 		bl	vListInsertEnd
 3836              	.LVL332:
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3837              		.loc 1 3126 0
 3838 0024 0DB1     		cbz	r5, .L350
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3839              		.loc 1 3128 0
 3840 0026 4FF0FF34 		mov	r4, #-1
 3841              	.LVL333:
 3842              	.L350:
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 172


 3843              		.loc 1 3132 0
 3844 002a 2946     		mov	r1, r5
 3845 002c 2046     		mov	r0, r4
 3846 002e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3847              	.LVL334:
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3848              		.loc 1 3133 0
 3849 0032 38BD     		pop	{r3, r4, r5, pc}
 3850              	.LVL335:
 3851              	.L354:
 3852              		.align	2
 3853              	.L353:
 3854 0034 00000000 		.word	.LANCHOR10
 3855              		.cfi_endproc
 3856              	.LFE40:
 3858              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3859              		.align	1
 3860              		.global	xTaskRemoveFromEventList
 3861              		.syntax unified
 3862              		.thumb
 3863              		.thumb_func
 3864              		.fpu fpv4-sp-d16
 3866              	xTaskRemoveFromEventList:
 3867              	.LFB41:
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3868              		.loc 1 3139 0
 3869              		.cfi_startproc
 3870              		@ args = 0, pretend = 0, frame = 0
 3871              		@ frame_needed = 0, uses_anonymous_args = 0
 3872              	.LVL336:
 3873 0000 38B5     		push	{r3, r4, r5, lr}
 3874              	.LCFI41:
 3875              		.cfi_def_cfa_offset 16
 3876              		.cfi_offset 3, -16
 3877              		.cfi_offset 4, -12
 3878              		.cfi_offset 5, -8
 3879              		.cfi_offset 14, -4
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3880              		.loc 1 3156 0
 3881 0002 C368     		ldr	r3, [r0, #12]
 3882 0004 DC68     		ldr	r4, [r3, #12]
 3883              	.LVL337:
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3884              		.loc 1 3157 0
 3885 0006 44B9     		cbnz	r4, .L356
 3886              	.LBB198:
 3887              	.LBB199:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3888              		.loc 2 195 0
 3889              		.syntax unified
 3890              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3891 0008 4FF05003 			mov r3, #80												
 3892 000c 83F31188 		msr basepri, r3											
 3893 0010 BFF36F8F 		isb														
 3894 0014 BFF34F8F 		dsb														
 3895              	
 3896              	@ 0 "" 2
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 173


 3897              	.LVL338:
 3898              		.thumb
 3899              		.syntax unified
 3900              	.L357:
 3901 0018 FEE7     		b	.L357
 3902              	.L356:
 3903              	.LBE199:
 3904              	.LBE198:
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3905              		.loc 1 3158 0
 3906 001a 04F11805 		add	r5, r4, #24
 3907 001e 2846     		mov	r0, r5
 3908              	.LVL339:
 3909 0020 FFF7FEFF 		bl	uxListRemove
 3910              	.LVL340:
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3911              		.loc 1 3160 0
 3912 0024 134B     		ldr	r3, .L363
 3913 0026 1B68     		ldr	r3, [r3]
 3914 0028 E3B9     		cbnz	r3, .L358
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3915              		.loc 1 3162 0
 3916 002a 251D     		adds	r5, r4, #4
 3917 002c 2846     		mov	r0, r5
 3918 002e FFF7FEFF 		bl	uxListRemove
 3919              	.LVL341:
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3920              		.loc 1 3163 0
 3921 0032 E36A     		ldr	r3, [r4, #44]
 3922 0034 0122     		movs	r2, #1
 3923 0036 9A40     		lsls	r2, r2, r3
 3924 0038 0F49     		ldr	r1, .L363+4
 3925 003a 0868     		ldr	r0, [r1]
 3926 003c 0243     		orrs	r2, r2, r0
 3927 003e 0A60     		str	r2, [r1]
 3928 0040 03EB8303 		add	r3, r3, r3, lsl #2
 3929 0044 9A00     		lsls	r2, r3, #2
 3930 0046 2946     		mov	r1, r5
 3931 0048 0C48     		ldr	r0, .L363+8
 3932 004a 1044     		add	r0, r0, r2
 3933 004c FFF7FEFF 		bl	vListInsertEnd
 3934              	.LVL342:
 3935              	.L359:
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3936              		.loc 1 3186 0
 3937 0050 E26A     		ldr	r2, [r4, #44]
 3938 0052 0B4B     		ldr	r3, .L363+12
 3939 0054 1B68     		ldr	r3, [r3]
 3940 0056 DB6A     		ldr	r3, [r3, #44]
 3941 0058 9A42     		cmp	r2, r3
 3942 005a 08D9     		bls	.L361
 3943              	.LVL343:
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3944              		.loc 1 3195 0
 3945 005c 0120     		movs	r0, #1
 3946 005e 094B     		ldr	r3, .L363+16
 3947 0060 1860     		str	r0, [r3]
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 174


 3948              	.LVL344:
 3949              	.L355:
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3950              		.loc 1 3203 0
 3951 0062 38BD     		pop	{r3, r4, r5, pc}
 3952              	.LVL345:
 3953              	.L358:
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3954              		.loc 1 3183 0
 3955 0064 2946     		mov	r1, r5
 3956 0066 0848     		ldr	r0, .L363+20
 3957 0068 FFF7FEFF 		bl	vListInsertEnd
 3958              	.LVL346:
 3959 006c F0E7     		b	.L359
 3960              	.L361:
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3961              		.loc 1 3199 0
 3962 006e 0020     		movs	r0, #0
 3963              	.LVL347:
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3964              		.loc 1 3202 0
 3965 0070 F7E7     		b	.L355
 3966              	.L364:
 3967 0072 00BF     		.align	2
 3968              	.L363:
 3969 0074 00000000 		.word	.LANCHOR16
 3970 0078 00000000 		.word	.LANCHOR13
 3971 007c 00000000 		.word	.LANCHOR4
 3972 0080 00000000 		.word	.LANCHOR10
 3973 0084 00000000 		.word	.LANCHOR18
 3974 0088 00000000 		.word	.LANCHOR1
 3975              		.cfi_endproc
 3976              	.LFE41:
 3978              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 3979              		.align	1
 3980              		.global	vTaskRemoveFromUnorderedEventList
 3981              		.syntax unified
 3982              		.thumb
 3983              		.thumb_func
 3984              		.fpu fpv4-sp-d16
 3986              	vTaskRemoveFromUnorderedEventList:
 3987              	.LFB42:
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3988              		.loc 1 3207 0
 3989              		.cfi_startproc
 3990              		@ args = 0, pretend = 0, frame = 0
 3991              		@ frame_needed = 0, uses_anonymous_args = 0
 3992              	.LVL348:
 3993 0000 38B5     		push	{r3, r4, r5, lr}
 3994              	.LCFI42:
 3995              		.cfi_def_cfa_offset 16
 3996              		.cfi_offset 3, -16
 3997              		.cfi_offset 4, -12
 3998              		.cfi_offset 5, -8
 3999              		.cfi_offset 14, -4
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4000              		.loc 1 3212 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 175


 4001 0002 1C4B     		ldr	r3, .L373
 4002 0004 1B68     		ldr	r3, [r3]
 4003 0006 43B9     		cbnz	r3, .L366
 4004              	.LBB200:
 4005              	.LBB201:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4006              		.loc 2 195 0
 4007              		.syntax unified
 4008              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4009 0008 4FF05003 			mov r3, #80												
 4010 000c 83F31188 		msr basepri, r3											
 4011 0010 BFF36F8F 		isb														
 4012 0014 BFF34F8F 		dsb														
 4013              	
 4014              	@ 0 "" 2
 4015              	.LVL349:
 4016              		.thumb
 4017              		.syntax unified
 4018              	.L367:
 4019 0018 FEE7     		b	.L367
 4020              	.L366:
 4021              	.LBE201:
 4022              	.LBE200:
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4023              		.loc 1 3215 0
 4024 001a 41F00041 		orr	r1, r1, #-2147483648
 4025              	.LVL350:
 4026 001e 0160     		str	r1, [r0]
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4027              		.loc 1 3219 0
 4028 0020 C468     		ldr	r4, [r0, #12]
 4029              	.LVL351:
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 4030              		.loc 1 3220 0
 4031 0022 F4B1     		cbz	r4, .L372
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4032              		.loc 1 3221 0
 4033 0024 FFF7FEFF 		bl	uxListRemove
 4034              	.LVL352:
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 4035              		.loc 1 3240 0
 4036 0028 251D     		adds	r5, r4, #4
 4037 002a 2846     		mov	r0, r5
 4038 002c FFF7FEFF 		bl	uxListRemove
 4039              	.LVL353:
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4040              		.loc 1 3241 0
 4041 0030 E36A     		ldr	r3, [r4, #44]
 4042 0032 0122     		movs	r2, #1
 4043 0034 9A40     		lsls	r2, r2, r3
 4044 0036 1049     		ldr	r1, .L373+4
 4045 0038 0868     		ldr	r0, [r1]
 4046 003a 0243     		orrs	r2, r2, r0
 4047 003c 0A60     		str	r2, [r1]
 4048 003e 03EB8303 		add	r3, r3, r3, lsl #2
 4049 0042 9A00     		lsls	r2, r3, #2
 4050 0044 2946     		mov	r1, r5
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 176


 4051 0046 0D48     		ldr	r0, .L373+8
 4052 0048 1044     		add	r0, r0, r2
 4053 004a FFF7FEFF 		bl	vListInsertEnd
 4054              	.LVL354:
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4055              		.loc 1 3243 0
 4056 004e E26A     		ldr	r2, [r4, #44]
 4057 0050 0B4B     		ldr	r3, .L373+12
 4058 0052 1B68     		ldr	r3, [r3]
 4059 0054 DB6A     		ldr	r3, [r3, #44]
 4060 0056 9A42     		cmp	r2, r3
 4061 0058 02D9     		bls	.L365
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4062              		.loc 1 3249 0
 4063 005a 0A4B     		ldr	r3, .L373+16
 4064 005c 0122     		movs	r2, #1
 4065 005e 1A60     		str	r2, [r3]
 4066              	.L365:
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4067              		.loc 1 3251 0
 4068 0060 38BD     		pop	{r3, r4, r5, pc}
 4069              	.LVL355:
 4070              	.L372:
 4071              	.LBB202:
 4072              	.LBB203:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4073              		.loc 2 195 0
 4074              		.syntax unified
 4075              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4076 0062 4FF05003 			mov r3, #80												
 4077 0066 83F31188 		msr basepri, r3											
 4078 006a BFF36F8F 		isb														
 4079 006e BFF34F8F 		dsb														
 4080              	
 4081              	@ 0 "" 2
 4082              	.LVL356:
 4083              		.thumb
 4084              		.syntax unified
 4085              	.L369:
 4086 0072 FEE7     		b	.L369
 4087              	.L374:
 4088              		.align	2
 4089              	.L373:
 4090 0074 00000000 		.word	.LANCHOR16
 4091 0078 00000000 		.word	.LANCHOR13
 4092 007c 00000000 		.word	.LANCHOR4
 4093 0080 00000000 		.word	.LANCHOR10
 4094 0084 00000000 		.word	.LANCHOR18
 4095              	.LBE203:
 4096              	.LBE202:
 4097              		.cfi_endproc
 4098              	.LFE42:
 4100              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 4101              		.align	1
 4102              		.global	vTaskSetTimeOutState
 4103              		.syntax unified
 4104              		.thumb
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 177


 4105              		.thumb_func
 4106              		.fpu fpv4-sp-d16
 4108              	vTaskSetTimeOutState:
 4109              	.LFB43:
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 4110              		.loc 1 3255 0
 4111              		.cfi_startproc
 4112              		@ args = 0, pretend = 0, frame = 0
 4113              		@ frame_needed = 0, uses_anonymous_args = 0
 4114              	.LVL357:
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 4115              		.loc 1 3256 0
 4116 0000 40B9     		cbnz	r0, .L376
 4117              	.LBB204:
 4118              	.LBB205:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4119              		.loc 2 195 0
 4120              		.syntax unified
 4121              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4122 0002 4FF05003 			mov r3, #80												
 4123 0006 83F31188 		msr basepri, r3											
 4124 000a BFF36F8F 		isb														
 4125 000e BFF34F8F 		dsb														
 4126              	
 4127              	@ 0 "" 2
 4128              	.LVL358:
 4129              		.thumb
 4130              		.syntax unified
 4131              	.L377:
 4132 0012 FEE7     		b	.L377
 4133              	.L376:
 4134              	.LBE205:
 4135              	.LBE204:
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 4136              		.loc 1 3255 0
 4137 0014 10B5     		push	{r4, lr}
 4138              	.LCFI43:
 4139              		.cfi_def_cfa_offset 8
 4140              		.cfi_offset 4, -8
 4141              		.cfi_offset 14, -4
 4142 0016 0446     		mov	r4, r0
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4143              		.loc 1 3257 0
 4144 0018 FFF7FEFF 		bl	vPortEnterCritical
 4145              	.LVL359:
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 4146              		.loc 1 3259 0
 4147 001c 044B     		ldr	r3, .L380
 4148 001e 1B68     		ldr	r3, [r3]
 4149 0020 2360     		str	r3, [r4]
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4150              		.loc 1 3260 0
 4151 0022 044B     		ldr	r3, .L380+4
 4152 0024 1B68     		ldr	r3, [r3]
 4153 0026 6360     		str	r3, [r4, #4]
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4154              		.loc 1 3262 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 178


 4155 0028 FFF7FEFF 		bl	vPortExitCritical
 4156              	.LVL360:
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4157              		.loc 1 3263 0
 4158 002c 10BD     		pop	{r4, pc}
 4159              	.LVL361:
 4160              	.L381:
 4161 002e 00BF     		.align	2
 4162              	.L380:
 4163 0030 00000000 		.word	.LANCHOR17
 4164 0034 00000000 		.word	.LANCHOR15
 4165              		.cfi_endproc
 4166              	.LFE43:
 4168              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 4169              		.align	1
 4170              		.global	vTaskInternalSetTimeOutState
 4171              		.syntax unified
 4172              		.thumb
 4173              		.thumb_func
 4174              		.fpu fpv4-sp-d16
 4176              	vTaskInternalSetTimeOutState:
 4177              	.LFB44:
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
 4178              		.loc 1 3267 0
 4179              		.cfi_startproc
 4180              		@ args = 0, pretend = 0, frame = 0
 4181              		@ frame_needed = 0, uses_anonymous_args = 0
 4182              		@ link register save eliminated.
 4183              	.LVL362:
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 4184              		.loc 1 3269 0
 4185 0000 034B     		ldr	r3, .L383
 4186 0002 1B68     		ldr	r3, [r3]
 4187 0004 0360     		str	r3, [r0]
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4188              		.loc 1 3270 0
 4189 0006 034B     		ldr	r3, .L383+4
 4190 0008 1B68     		ldr	r3, [r3]
 4191 000a 4360     		str	r3, [r0, #4]
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4192              		.loc 1 3271 0
 4193 000c 7047     		bx	lr
 4194              	.L384:
 4195 000e 00BF     		.align	2
 4196              	.L383:
 4197 0010 00000000 		.word	.LANCHOR17
 4198 0014 00000000 		.word	.LANCHOR15
 4199              		.cfi_endproc
 4200              	.LFE44:
 4202              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 4203              		.align	1
 4204              		.global	xTaskCheckForTimeOut
 4205              		.syntax unified
 4206              		.thumb
 4207              		.thumb_func
 4208              		.fpu fpv4-sp-d16
 4210              	xTaskCheckForTimeOut:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 179


 4211              	.LFB45:
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 4212              		.loc 1 3275 0
 4213              		.cfi_startproc
 4214              		@ args = 0, pretend = 0, frame = 0
 4215              		@ frame_needed = 0, uses_anonymous_args = 0
 4216              	.LVL363:
 4217 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4218              	.LCFI44:
 4219              		.cfi_def_cfa_offset 24
 4220              		.cfi_offset 3, -24
 4221              		.cfi_offset 4, -20
 4222              		.cfi_offset 5, -16
 4223              		.cfi_offset 6, -12
 4224              		.cfi_offset 7, -8
 4225              		.cfi_offset 14, -4
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 4226              		.loc 1 3278 0
 4227 0002 50B1     		cbz	r0, .L396
 4228 0004 0546     		mov	r5, r0
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4229              		.loc 1 3279 0
 4230 0006 89B9     		cbnz	r1, .L388
 4231              	.LBB206:
 4232              	.LBB207:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4233              		.loc 2 195 0
 4234              		.syntax unified
 4235              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4236 0008 4FF05003 			mov r3, #80												
 4237 000c 83F31188 		msr basepri, r3											
 4238 0010 BFF36F8F 		isb														
 4239 0014 BFF34F8F 		dsb														
 4240              	
 4241              	@ 0 "" 2
 4242              	.LVL364:
 4243              		.thumb
 4244              		.syntax unified
 4245              	.L389:
 4246 0018 FEE7     		b	.L389
 4247              	.L396:
 4248              	.LBE207:
 4249              	.LBE206:
 4250              	.LBB208:
 4251              	.LBB209:
 4252              		.syntax unified
 4253              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4254 001a 4FF05003 			mov r3, #80												
 4255 001e 83F31188 		msr basepri, r3											
 4256 0022 BFF36F8F 		isb														
 4257 0026 BFF34F8F 		dsb														
 4258              	
 4259              	@ 0 "" 2
 4260              	.LVL365:
 4261              		.thumb
 4262              		.syntax unified
 4263              	.L387:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 180


 4264 002a FEE7     		b	.L387
 4265              	.L388:
 4266 002c 0C46     		mov	r4, r1
 4267              	.LBE209:
 4268              	.LBE208:
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4269              		.loc 1 3281 0
 4270 002e FFF7FEFF 		bl	vPortEnterCritical
 4271              	.LVL366:
 4272              	.LBB210:
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 4273              		.loc 1 3284 0
 4274 0032 114B     		ldr	r3, .L398
 4275 0034 1968     		ldr	r1, [r3]
 4276              	.LVL367:
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4277              		.loc 1 3285 0
 4278 0036 6868     		ldr	r0, [r5, #4]
 4279 0038 0A1A     		subs	r2, r1, r0
 4280              	.LVL368:
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4281              		.loc 1 3299 0
 4282 003a 2368     		ldr	r3, [r4]
 4283 003c B3F1FF3F 		cmp	r3, #-1
 4284 0040 16D0     		beq	.L393
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4285              		.loc 1 3309 0
 4286 0042 2F68     		ldr	r7, [r5]
 4287 0044 0D4E     		ldr	r6, .L398+4
 4288 0046 3668     		ldr	r6, [r6]
 4289 0048 B742     		cmp	r7, r6
 4290 004a 01D0     		beq	.L391
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4291              		.loc 1 3309 0 is_stmt 0 discriminator 1
 4292 004c 8842     		cmp	r0, r1
 4293 004e 11D9     		bls	.L394
 4294              	.L391:
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4295              		.loc 1 3318 0 is_stmt 1
 4296 0050 9342     		cmp	r3, r2
 4297 0052 03D8     		bhi	.L397
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 4298              		.loc 1 3327 0
 4299 0054 0023     		movs	r3, #0
 4300 0056 2360     		str	r3, [r4]
 4301              	.LVL369:
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4302              		.loc 1 3328 0
 4303 0058 0124     		movs	r4, #1
 4304              	.LVL370:
 4305 005a 05E0     		b	.L390
 4306              	.LVL371:
 4307              	.L397:
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 4308              		.loc 1 3321 0
 4309 005c 9B1A     		subs	r3, r3, r2
 4310 005e 2360     		str	r3, [r4]
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 181


3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 4311              		.loc 1 3322 0
 4312 0060 2846     		mov	r0, r5
 4313 0062 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 4314              	.LVL372:
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4315              		.loc 1 3323 0
 4316 0066 0024     		movs	r4, #0
 4317              	.LVL373:
 4318              	.L390:
 4319              	.LBE210:
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4320              		.loc 1 3331 0
 4321 0068 FFF7FEFF 		bl	vPortExitCritical
 4322              	.LVL374:
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4323              		.loc 1 3334 0
 4324 006c 2046     		mov	r0, r4
 4325 006e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4326              	.LVL375:
 4327              	.L393:
 4328              	.LBB211:
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4329              		.loc 1 3304 0
 4330 0070 0024     		movs	r4, #0
 4331              	.LVL376:
 4332 0072 F9E7     		b	.L390
 4333              	.LVL377:
 4334              	.L394:
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4335              		.loc 1 3316 0
 4336 0074 0124     		movs	r4, #1
 4337              	.LVL378:
 4338 0076 F7E7     		b	.L390
 4339              	.L399:
 4340              		.align	2
 4341              	.L398:
 4342 0078 00000000 		.word	.LANCHOR15
 4343 007c 00000000 		.word	.LANCHOR17
 4344              	.LBE211:
 4345              		.cfi_endproc
 4346              	.LFE45:
 4348              		.section	.text.vTaskMissedYield,"ax",%progbits
 4349              		.align	1
 4350              		.global	vTaskMissedYield
 4351              		.syntax unified
 4352              		.thumb
 4353              		.thumb_func
 4354              		.fpu fpv4-sp-d16
 4356              	vTaskMissedYield:
 4357              	.LFB46:
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 4358              		.loc 1 3338 0
 4359              		.cfi_startproc
 4360              		@ args = 0, pretend = 0, frame = 0
 4361              		@ frame_needed = 0, uses_anonymous_args = 0
 4362              		@ link register save eliminated.
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 182


3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4363              		.loc 1 3339 0
 4364 0000 014B     		ldr	r3, .L401
 4365 0002 0122     		movs	r2, #1
 4366 0004 1A60     		str	r2, [r3]
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4367              		.loc 1 3340 0
 4368 0006 7047     		bx	lr
 4369              	.L402:
 4370              		.align	2
 4371              	.L401:
 4372 0008 00000000 		.word	.LANCHOR18
 4373              		.cfi_endproc
 4374              	.LFE46:
 4376              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 4377              		.align	1
 4378              		.global	uxTaskGetTaskNumber
 4379              		.syntax unified
 4380              		.thumb
 4381              		.thumb_func
 4382              		.fpu fpv4-sp-d16
 4384              	uxTaskGetTaskNumber:
 4385              	.LFB47:
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
 4386              		.loc 1 3346 0
 4387              		.cfi_startproc
 4388              		@ args = 0, pretend = 0, frame = 0
 4389              		@ frame_needed = 0, uses_anonymous_args = 0
 4390              		@ link register save eliminated.
 4391              	.LVL379:
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4392              		.loc 1 3350 0
 4393 0000 08B1     		cbz	r0, .L405
 4394              	.LVL380:
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4395              		.loc 1 3353 0
 4396 0002 C06C     		ldr	r0, [r0, #76]
 4397              	.LVL381:
 4398 0004 7047     		bx	lr
 4399              	.LVL382:
 4400              	.L405:
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4401              		.loc 1 3357 0
 4402 0006 0020     		movs	r0, #0
 4403              	.LVL383:
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4404              		.loc 1 3361 0
 4405 0008 7047     		bx	lr
 4406              		.cfi_endproc
 4407              	.LFE47:
 4409              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 4410              		.align	1
 4411              		.global	vTaskSetTaskNumber
 4412              		.syntax unified
 4413              		.thumb
 4414              		.thumb_func
 4415              		.fpu fpv4-sp-d16
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 183


 4417              	vTaskSetTaskNumber:
 4418              	.LFB48:
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4419              		.loc 1 3369 0
 4420              		.cfi_startproc
 4421              		@ args = 0, pretend = 0, frame = 0
 4422              		@ frame_needed = 0, uses_anonymous_args = 0
 4423              		@ link register save eliminated.
 4424              	.LVL384:
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4425              		.loc 1 3372 0
 4426 0000 00B1     		cbz	r0, .L406
 4427              	.LVL385:
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4428              		.loc 1 3375 0
 4429 0002 C164     		str	r1, [r0, #76]
 4430              	.LVL386:
 4431              	.L406:
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4432              		.loc 1 3377 0
 4433 0004 7047     		bx	lr
 4434              		.cfi_endproc
 4435              	.LFE48:
 4437              		.section	.text.vTaskGetInfo,"ax",%progbits
 4438              		.align	1
 4439              		.global	vTaskGetInfo
 4440              		.syntax unified
 4441              		.thumb
 4442              		.thumb_func
 4443              		.fpu fpv4-sp-d16
 4445              	vTaskGetInfo:
 4446              	.LFB52:
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 4447              		.loc 1 3671 0
 4448              		.cfi_startproc
 4449              		@ args = 0, pretend = 0, frame = 0
 4450              		@ frame_needed = 0, uses_anonymous_args = 0
 4451              	.LVL387:
 4452 0000 70B5     		push	{r4, r5, r6, lr}
 4453              	.LCFI45:
 4454              		.cfi_def_cfa_offset 16
 4455              		.cfi_offset 4, -16
 4456              		.cfi_offset 5, -12
 4457              		.cfi_offset 6, -8
 4458              		.cfi_offset 14, -4
 4459 0002 0C46     		mov	r4, r1
 4460 0004 1646     		mov	r6, r2
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4461              		.loc 1 3675 0
 4462 0006 0546     		mov	r5, r0
 4463 0008 D0B1     		cbz	r0, .L417
 4464              	.LVL388:
 4465              	.L409:
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 4466              		.loc 1 3677 0 discriminator 4
 4467 000a 2560     		str	r5, [r4]
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 184


 4468              		.loc 1 3678 0 discriminator 4
 4469 000c 05F13402 		add	r2, r5, #52
 4470 0010 6260     		str	r2, [r4, #4]
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 4471              		.loc 1 3679 0 discriminator 4
 4472 0012 EA6A     		ldr	r2, [r5, #44]
 4473 0014 2261     		str	r2, [r4, #16]
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 4474              		.loc 1 3680 0 discriminator 4
 4475 0016 2A6B     		ldr	r2, [r5, #48]
 4476 0018 E261     		str	r2, [r4, #28]
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4477              		.loc 1 3681 0 discriminator 4
 4478 001a AA6C     		ldr	r2, [r5, #72]
 4479 001c A260     		str	r2, [r4, #8]
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4480              		.loc 1 3685 0 discriminator 4
 4481 001e 2A6D     		ldr	r2, [r5, #80]
 4482 0020 6261     		str	r2, [r4, #20]
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4483              		.loc 1 3695 0 discriminator 4
 4484 0022 EA6D     		ldr	r2, [r5, #92]
 4485 0024 A261     		str	r2, [r4, #24]
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4486              		.loc 1 3706 0 discriminator 4
 4487 0026 052B     		cmp	r3, #5
 4488 0028 19D0     		beq	.L410
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4489              		.loc 1 3708 0
 4490 002a 124A     		ldr	r2, .L421
 4491 002c 1268     		ldr	r2, [r2]
 4492 002e AA42     		cmp	r2, r5
 4493 0030 09D0     		beq	.L418
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4494              		.loc 1 3714 0
 4495 0032 2373     		strb	r3, [r4, #12]
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4496              		.loc 1 3721 0
 4497 0034 032B     		cmp	r3, #3
 4498 0036 09D0     		beq	.L419
 4499              	.LVL389:
 4500              	.L412:
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4501              		.loc 1 3743 0
 4502 0038 B6B9     		cbnz	r6, .L420
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4503              		.loc 1 3757 0
 4504 003a 0023     		movs	r3, #0
 4505 003c 2384     		strh	r3, [r4, #32]	@ movhi
 4506              	.L408:
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4507              		.loc 1 3759 0
 4508 003e 70BD     		pop	{r4, r5, r6, pc}
 4509              	.LVL390:
 4510              	.L417:
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4511              		.loc 1 3675 0 discriminator 1
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 185


 4512 0040 0C4A     		ldr	r2, .L421
 4513              	.LVL391:
 4514 0042 1568     		ldr	r5, [r2]
 4515              	.LVL392:
 4516 0044 E1E7     		b	.L409
 4517              	.LVL393:
 4518              	.L418:
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4519              		.loc 1 3710 0
 4520 0046 0023     		movs	r3, #0
 4521              	.LVL394:
 4522 0048 2373     		strb	r3, [r4, #12]
 4523 004a F5E7     		b	.L412
 4524              	.LVL395:
 4525              	.L419:
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 4526              		.loc 1 3723 0
 4527 004c FFF7FEFF 		bl	vTaskSuspendAll
 4528              	.LVL396:
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 4529              		.loc 1 3725 0
 4530 0050 AB6A     		ldr	r3, [r5, #40]
 4531 0052 0BB1     		cbz	r3, .L413
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 4532              		.loc 1 3727 0
 4533 0054 0223     		movs	r3, #2
 4534 0056 2373     		strb	r3, [r4, #12]
 4535              	.L413:
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4536              		.loc 1 3730 0
 4537 0058 FFF7FEFF 		bl	xTaskResumeAll
 4538              	.LVL397:
 4539 005c ECE7     		b	.L412
 4540              	.LVL398:
 4541              	.L410:
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4542              		.loc 1 3738 0
 4543 005e 2846     		mov	r0, r5
 4544 0060 FFF7FEFF 		bl	eTaskGetState
 4545              	.LVL399:
 4546 0064 2073     		strb	r0, [r4, #12]
 4547 0066 E7E7     		b	.L412
 4548              	.L420:
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4549              		.loc 1 3751 0
 4550 0068 286B     		ldr	r0, [r5, #48]
 4551 006a FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 4552              	.LVL400:
 4553 006e 2084     		strh	r0, [r4, #32]	@ movhi
 4554 0070 E5E7     		b	.L408
 4555              	.L422:
 4556 0072 00BF     		.align	2
 4557              	.L421:
 4558 0074 00000000 		.word	.LANCHOR10
 4559              		.cfi_endproc
 4560              	.LFE52:
 4562              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 186


 4563              		.align	1
 4564              		.syntax unified
 4565              		.thumb
 4566              		.thumb_func
 4567              		.fpu fpv4-sp-d16
 4569              	prvListTasksWithinSingleList:
 4570              	.LFB53:
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
 4571              		.loc 1 3767 0
 4572              		.cfi_startproc
 4573              		@ args = 0, pretend = 0, frame = 0
 4574              		@ frame_needed = 0, uses_anonymous_args = 0
 4575              	.LVL401:
 4576 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 4577              	.LCFI46:
 4578              		.cfi_def_cfa_offset 32
 4579              		.cfi_offset 4, -32
 4580              		.cfi_offset 5, -28
 4581              		.cfi_offset 6, -24
 4582              		.cfi_offset 7, -20
 4583              		.cfi_offset 8, -16
 4584              		.cfi_offset 9, -12
 4585              		.cfi_offset 10, -8
 4586              		.cfi_offset 14, -4
 4587              	.LVL402:
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4588              		.loc 1 3771 0
 4589 0004 0B68     		ldr	r3, [r1]
 4590 0006 3BB3     		cbz	r3, .L428
 4591              	.LVL403:
 4592              	.LBB212:
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4593              		.loc 1 3773 0
 4594 0008 4B68     		ldr	r3, [r1, #4]
 4595 000a 5B68     		ldr	r3, [r3, #4]
 4596 000c 4B60     		str	r3, [r1, #4]
 4597 000e 01F10809 		add	r9, r1, #8
 4598 0012 4B45     		cmp	r3, r9
 4599 0014 07D0     		beq	.L430
 4600              	.L425:
 4601 0016 9046     		mov	r8, r2
 4602 0018 0C46     		mov	r4, r1
 4603 001a 0746     		mov	r7, r0
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4604              		.loc 1 3773 0 is_stmt 0 discriminator 3
 4605 001c 4B68     		ldr	r3, [r1, #4]
 4606 001e D3F80CA0 		ldr	r10, [r3, #12]
 4607              	.LVL404:
 4608              	.LBE212:
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4609              		.loc 1 3769 0 is_stmt 1 discriminator 3
 4610 0022 0025     		movs	r5, #0
 4611 0024 10E0     		b	.L427
 4612              	.LVL405:
 4613              	.L430:
 4614              	.LBB213:
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 187


 4615              		.loc 1 3773 0 discriminator 1
 4616 0026 5B68     		ldr	r3, [r3, #4]
 4617 0028 4B60     		str	r3, [r1, #4]
 4618 002a F4E7     		b	.L425
 4619              	.LVL406:
 4620              	.L426:
 4621              	.LBE213:
 4622              	.LBB214:
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4623              		.loc 1 3781 0 discriminator 3
 4624 002c 6368     		ldr	r3, [r4, #4]
 4625 002e DE68     		ldr	r6, [r3, #12]
 4626              	.LVL407:
 4627              	.LBE214:
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
 4628              		.loc 1 3782 0 discriminator 3
 4629 0030 05EBC503 		add	r3, r5, r5, lsl #3
 4630 0034 9900     		lsls	r1, r3, #2
 4631 0036 4346     		mov	r3, r8
 4632 0038 0122     		movs	r2, #1
 4633 003a 3944     		add	r1, r1, r7
 4634 003c 3046     		mov	r0, r6
 4635 003e FFF7FEFF 		bl	vTaskGetInfo
 4636              	.LVL408:
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 4637              		.loc 1 3783 0 discriminator 3
 4638 0042 0135     		adds	r5, r5, #1
 4639              	.LVL409:
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4640              		.loc 1 3784 0 discriminator 3
 4641 0044 B245     		cmp	r10, r6
 4642 0046 08D0     		beq	.L423
 4643              	.LVL410:
 4644              	.L427:
 4645              	.LBB215:
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4646              		.loc 1 3781 0
 4647 0048 6368     		ldr	r3, [r4, #4]
 4648 004a 5B68     		ldr	r3, [r3, #4]
 4649 004c 6360     		str	r3, [r4, #4]
 4650 004e 9945     		cmp	r9, r3
 4651 0050 ECD1     		bne	.L426
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4652              		.loc 1 3781 0 is_stmt 0 discriminator 1
 4653 0052 5B68     		ldr	r3, [r3, #4]
 4654 0054 6360     		str	r3, [r4, #4]
 4655 0056 E9E7     		b	.L426
 4656              	.LVL411:
 4657              	.L428:
 4658              	.LBE215:
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4659              		.loc 1 3769 0 is_stmt 1
 4660 0058 0025     		movs	r5, #0
 4661              	.LVL412:
 4662              	.L423:
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4663              		.loc 1 3792 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 188


 4664 005a 2846     		mov	r0, r5
 4665 005c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 4666              		.cfi_endproc
 4667              	.LFE53:
 4669              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 4670              		.align	1
 4671              		.global	uxTaskGetSystemState
 4672              		.syntax unified
 4673              		.thumb
 4674              		.thumb_func
 4675              		.fpu fpv4-sp-d16
 4677              	uxTaskGetSystemState:
 4678              	.LFB30:
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 4679              		.loc 1 2506 0
 4680              		.cfi_startproc
 4681              		@ args = 0, pretend = 0, frame = 0
 4682              		@ frame_needed = 0, uses_anonymous_args = 0
 4683              	.LVL413:
 4684 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4685              	.LCFI47:
 4686              		.cfi_def_cfa_offset 24
 4687              		.cfi_offset 3, -24
 4688              		.cfi_offset 4, -20
 4689              		.cfi_offset 5, -16
 4690              		.cfi_offset 6, -12
 4691              		.cfi_offset 7, -8
 4692              		.cfi_offset 14, -4
 4693 0002 0746     		mov	r7, r0
 4694 0004 0C46     		mov	r4, r1
 4695 0006 1646     		mov	r6, r2
 4696              	.LVL414:
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4697              		.loc 1 2509 0
 4698 0008 FFF7FEFF 		bl	vTaskSuspendAll
 4699              	.LVL415:
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4700              		.loc 1 2512 0
 4701 000c 224B     		ldr	r3, .L436
 4702 000e 1B68     		ldr	r3, [r3]
 4703 0010 A342     		cmp	r3, r4
 4704 0012 3CD8     		bhi	.L434
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4705              		.loc 1 2507 0
 4706 0014 0725     		movs	r5, #7
 4707 0016 0024     		movs	r4, #0
 4708              	.LVL416:
 4709              	.L433:
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 4710              		.loc 1 2518 0 discriminator 1
 4711 0018 013D     		subs	r5, r5, #1
 4712              	.LVL417:
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4713              		.loc 1 2519 0 discriminator 1
 4714 001a 04EBC403 		add	r3, r4, r4, lsl #3
 4715 001e 9800     		lsls	r0, r3, #2
 4716 0020 05EB8502 		add	r2, r5, r5, lsl #2
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 189


 4717 0024 9300     		lsls	r3, r2, #2
 4718 0026 0122     		movs	r2, #1
 4719 0028 1C49     		ldr	r1, .L436+4
 4720 002a 1944     		add	r1, r1, r3
 4721 002c 3844     		add	r0, r0, r7
 4722 002e FFF7FEFF 		bl	prvListTasksWithinSingleList
 4723              	.LVL418:
 4724 0032 0444     		add	r4, r4, r0
 4725              	.LVL419:
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4726              		.loc 1 2521 0 discriminator 1
 4727 0034 002D     		cmp	r5, #0
 4728 0036 EFD1     		bne	.L433
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 4729              		.loc 1 2525 0
 4730 0038 04EBC403 		add	r3, r4, r4, lsl #3
 4731 003c 9800     		lsls	r0, r3, #2
 4732 003e 184B     		ldr	r3, .L436+8
 4733 0040 1968     		ldr	r1, [r3]
 4734 0042 0222     		movs	r2, #2
 4735 0044 3844     		add	r0, r0, r7
 4736 0046 FFF7FEFF 		bl	prvListTasksWithinSingleList
 4737              	.LVL420:
 4738 004a 0444     		add	r4, r4, r0
 4739              	.LVL421:
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4740              		.loc 1 2526 0
 4741 004c 04EBC403 		add	r3, r4, r4, lsl #3
 4742 0050 9800     		lsls	r0, r3, #2
 4743 0052 144B     		ldr	r3, .L436+12
 4744 0054 1968     		ldr	r1, [r3]
 4745 0056 0222     		movs	r2, #2
 4746 0058 3844     		add	r0, r0, r7
 4747 005a FFF7FEFF 		bl	prvListTasksWithinSingleList
 4748              	.LVL422:
 4749 005e 0444     		add	r4, r4, r0
 4750              	.LVL423:
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4751              		.loc 1 2532 0
 4752 0060 04EBC403 		add	r3, r4, r4, lsl #3
 4753 0064 9800     		lsls	r0, r3, #2
 4754 0066 0422     		movs	r2, #4
 4755 0068 0F49     		ldr	r1, .L436+16
 4756 006a 3844     		add	r0, r0, r7
 4757 006c FFF7FEFF 		bl	prvListTasksWithinSingleList
 4758              	.LVL424:
 4759 0070 0444     		add	r4, r4, r0
 4760              	.LVL425:
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4761              		.loc 1 2540 0
 4762 0072 04EBC403 		add	r3, r4, r4, lsl #3
 4763 0076 9800     		lsls	r0, r3, #2
 4764 0078 0322     		movs	r2, #3
 4765 007a 0C49     		ldr	r1, .L436+20
 4766 007c 3844     		add	r0, r0, r7
 4767 007e FFF7FEFF 		bl	prvListTasksWithinSingleList
 4768              	.LVL426:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 190


 4769 0082 0444     		add	r4, r4, r0
 4770              	.LVL427:
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4771              		.loc 1 2546 0
 4772 0084 26B1     		cbz	r6, .L432
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
 4773              		.loc 1 2551 0
 4774 0086 FFF7FEFF 		bl	getRunTimeCounterValue
 4775              	.LVL428:
 4776 008a 3060     		str	r0, [r6]
 4777 008c 00E0     		b	.L432
 4778              	.LVL429:
 4779              	.L434:
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4780              		.loc 1 2507 0
 4781 008e 0024     		movs	r4, #0
 4782              	.LVL430:
 4783              	.L432:
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4784              		.loc 1 2569 0
 4785 0090 FFF7FEFF 		bl	xTaskResumeAll
 4786              	.LVL431:
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4787              		.loc 1 2572 0
 4788 0094 2046     		mov	r0, r4
 4789 0096 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4790              	.LVL432:
 4791              	.L437:
 4792              		.align	2
 4793              	.L436:
 4794 0098 00000000 		.word	.LANCHOR9
 4795 009c 00000000 		.word	.LANCHOR4
 4796 00a0 00000000 		.word	.LANCHOR2
 4797 00a4 00000000 		.word	.LANCHOR8
 4798 00a8 00000000 		.word	.LANCHOR7
 4799 00ac 00000000 		.word	.LANCHOR0
 4800              		.cfi_endproc
 4801              	.LFE30:
 4803              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 4804              		.align	1
 4805              		.global	uxTaskGetStackHighWaterMark
 4806              		.syntax unified
 4807              		.thumb
 4808              		.thumb_func
 4809              		.fpu fpv4-sp-d16
 4811              	uxTaskGetStackHighWaterMark:
 4812              	.LFB55:
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 4813              		.loc 1 3860 0
 4814              		.cfi_startproc
 4815              		@ args = 0, pretend = 0, frame = 0
 4816              		@ frame_needed = 0, uses_anonymous_args = 0
 4817              	.LVL433:
 4818 0000 08B5     		push	{r3, lr}
 4819              	.LCFI48:
 4820              		.cfi_def_cfa_offset 8
 4821              		.cfi_offset 3, -8
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 191


 4822              		.cfi_offset 14, -4
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4823              		.loc 1 3865 0
 4824 0002 0346     		mov	r3, r0
 4825 0004 18B1     		cbz	r0, .L441
 4826              	.LVL434:
 4827              	.L439:
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4828              		.loc 1 3877 0 discriminator 4
 4829 0006 186B     		ldr	r0, [r3, #48]
 4830 0008 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 4831              	.LVL435:
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4832              		.loc 1 3880 0 discriminator 4
 4833 000c 08BD     		pop	{r3, pc}
 4834              	.LVL436:
 4835              	.L441:
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4836              		.loc 1 3865 0 discriminator 1
 4837 000e 014B     		ldr	r3, .L442
 4838 0010 1B68     		ldr	r3, [r3]
 4839              	.LVL437:
 4840 0012 F8E7     		b	.L439
 4841              	.L443:
 4842              		.align	2
 4843              	.L442:
 4844 0014 00000000 		.word	.LANCHOR10
 4845              		.cfi_endproc
 4846              	.LFE55:
 4848              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 4849              		.align	1
 4850              		.global	xTaskGetCurrentTaskHandle
 4851              		.syntax unified
 4852              		.thumb
 4853              		.thumb_func
 4854              		.fpu fpv4-sp-d16
 4856              	xTaskGetCurrentTaskHandle:
 4857              	.LFB58:
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 4858              		.loc 1 3970 0
 4859              		.cfi_startproc
 4860              		@ args = 0, pretend = 0, frame = 0
 4861              		@ frame_needed = 0, uses_anonymous_args = 0
 4862              		@ link register save eliminated.
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4863              		.loc 1 3976 0
 4864 0000 014B     		ldr	r3, .L445
 4865 0002 1868     		ldr	r0, [r3]
 4866              	.LVL438:
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4867              		.loc 1 3979 0
 4868 0004 7047     		bx	lr
 4869              	.L446:
 4870 0006 00BF     		.align	2
 4871              	.L445:
 4872 0008 00000000 		.word	.LANCHOR10
 4873              		.cfi_endproc
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 192


 4874              	.LFE58:
 4876              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 4877              		.align	1
 4878              		.global	xTaskGetSchedulerState
 4879              		.syntax unified
 4880              		.thumb
 4881              		.thumb_func
 4882              		.fpu fpv4-sp-d16
 4884              	xTaskGetSchedulerState:
 4885              	.LFB59:
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 4886              		.loc 1 3987 0
 4887              		.cfi_startproc
 4888              		@ args = 0, pretend = 0, frame = 0
 4889              		@ frame_needed = 0, uses_anonymous_args = 0
 4890              		@ link register save eliminated.
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4891              		.loc 1 3990 0
 4892 0000 054B     		ldr	r3, .L452
 4893 0002 1B68     		ldr	r3, [r3]
 4894 0004 33B1     		cbz	r3, .L449
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4895              		.loc 1 3996 0
 4896 0006 054B     		ldr	r3, .L452+4
 4897 0008 1B68     		ldr	r3, [r3]
 4898 000a 0BB1     		cbz	r3, .L451
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4899              		.loc 1 4002 0
 4900 000c 0020     		movs	r0, #0
 4901              	.LVL439:
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4902              		.loc 1 4007 0
 4903 000e 7047     		bx	lr
 4904              	.LVL440:
 4905              	.L451:
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4906              		.loc 1 3998 0
 4907 0010 0220     		movs	r0, #2
 4908 0012 7047     		bx	lr
 4909              	.L449:
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4910              		.loc 1 3992 0
 4911 0014 0120     		movs	r0, #1
 4912 0016 7047     		bx	lr
 4913              	.L453:
 4914              		.align	2
 4915              	.L452:
 4916 0018 00000000 		.word	.LANCHOR11
 4917 001c 00000000 		.word	.LANCHOR16
 4918              		.cfi_endproc
 4919              	.LFE59:
 4921              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 4922              		.align	1
 4923              		.global	xTaskPriorityInherit
 4924              		.syntax unified
 4925              		.thumb
 4926              		.thumb_func
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 193


 4927              		.fpu fpv4-sp-d16
 4929              	xTaskPriorityInherit:
 4930              	.LFB60:
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 4931              		.loc 1 4015 0
 4932              		.cfi_startproc
 4933              		@ args = 0, pretend = 0, frame = 0
 4934              		@ frame_needed = 0, uses_anonymous_args = 0
 4935              	.LVL441:
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4936              		.loc 1 4022 0
 4937 0000 0028     		cmp	r0, #0
 4938 0002 4BD0     		beq	.L460
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 4939              		.loc 1 4015 0
 4940 0004 38B5     		push	{r3, r4, r5, lr}
 4941              	.LCFI49:
 4942              		.cfi_def_cfa_offset 16
 4943              		.cfi_offset 3, -16
 4944              		.cfi_offset 4, -12
 4945              		.cfi_offset 5, -8
 4946              		.cfi_offset 14, -4
 4947 0006 0446     		mov	r4, r0
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4948              		.loc 1 4027 0
 4949 0008 C26A     		ldr	r2, [r0, #44]
 4950 000a 2549     		ldr	r1, .L468
 4951 000c 0968     		ldr	r1, [r1]
 4952 000e C96A     		ldr	r1, [r1, #44]
 4953 0010 8A42     		cmp	r2, r1
 4954 0012 39D2     		bcs	.L456
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4955              		.loc 1 4032 0
 4956 0014 8169     		ldr	r1, [r0, #24]
 4957 0016 0029     		cmp	r1, #0
 4958 0018 05DB     		blt	.L457
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4959              		.loc 1 4034 0
 4960 001a 2149     		ldr	r1, .L468
 4961 001c 0968     		ldr	r1, [r1]
 4962 001e C96A     		ldr	r1, [r1, #44]
 4963 0020 C1F10701 		rsb	r1, r1, #7
 4964 0024 8161     		str	r1, [r0, #24]
 4965              	.L457:
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4966              		.loc 1 4043 0
 4967 0026 6069     		ldr	r0, [r4, #20]
 4968              	.LVL442:
 4969 0028 02EB8202 		add	r2, r2, r2, lsl #2
 4970 002c 9100     		lsls	r1, r2, #2
 4971 002e 1D4A     		ldr	r2, .L468+4
 4972 0030 0A44     		add	r2, r2, r1
 4973 0032 9042     		cmp	r0, r2
 4974 0034 05D0     		beq	.L466
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4975              		.loc 1 4064 0
 4976 0036 1A4A     		ldr	r2, .L468
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 194


 4977 0038 1268     		ldr	r2, [r2]
 4978 003a D26A     		ldr	r2, [r2, #44]
 4979 003c E262     		str	r2, [r4, #44]
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4980              		.loc 1 4070 0
 4981 003e 0120     		movs	r0, #1
 4982              	.LVL443:
 4983              	.L454:
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4984              		.loc 1 4097 0
 4985 0040 38BD     		pop	{r3, r4, r5, pc}
 4986              	.LVL444:
 4987              	.L466:
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4988              		.loc 1 4045 0
 4989 0042 251D     		adds	r5, r4, #4
 4990 0044 2846     		mov	r0, r5
 4991 0046 FFF7FEFF 		bl	uxListRemove
 4992              	.LVL445:
 4993 004a 40B9     		cbnz	r0, .L459
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4994              		.loc 1 4050 0
 4995 004c E26A     		ldr	r2, [r4, #44]
 4996 004e 0123     		movs	r3, #1
 4997 0050 03FA02F2 		lsl	r2, r3, r2
 4998 0054 1449     		ldr	r1, .L468+8
 4999 0056 0B68     		ldr	r3, [r1]
 5000 0058 23EA0203 		bic	r3, r3, r2
 5001 005c 0B60     		str	r3, [r1]
 5002              	.L459:
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 5003              		.loc 1 4058 0
 5004 005e 104B     		ldr	r3, .L468
 5005 0060 1B68     		ldr	r3, [r3]
 5006 0062 DB6A     		ldr	r3, [r3, #44]
 5007 0064 E362     		str	r3, [r4, #44]
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5008              		.loc 1 4059 0
 5009 0066 0124     		movs	r4, #1
 5010              	.LVL446:
 5011 0068 04FA03F2 		lsl	r2, r4, r3
 5012 006c 0E49     		ldr	r1, .L468+8
 5013 006e 0868     		ldr	r0, [r1]
 5014 0070 0243     		orrs	r2, r2, r0
 5015 0072 0A60     		str	r2, [r1]
 5016 0074 03EB8303 		add	r3, r3, r3, lsl #2
 5017 0078 9A00     		lsls	r2, r3, #2
 5018 007a 2946     		mov	r1, r5
 5019 007c 0948     		ldr	r0, .L468+4
 5020 007e 1044     		add	r0, r0, r2
 5021 0080 FFF7FEFF 		bl	vListInsertEnd
 5022              	.LVL447:
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5023              		.loc 1 4070 0
 5024 0084 2046     		mov	r0, r4
 5025 0086 DBE7     		b	.L454
 5026              	.LVL448:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 195


 5027              	.L456:
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5028              		.loc 1 4074 0
 5029 0088 026D     		ldr	r2, [r0, #80]
 5030 008a 054B     		ldr	r3, .L468
 5031 008c 1B68     		ldr	r3, [r3]
 5032 008e DB6A     		ldr	r3, [r3, #44]
 5033 0090 9A42     		cmp	r2, r3
 5034 0092 01D2     		bcs	.L467
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5035              		.loc 1 4083 0
 5036 0094 0120     		movs	r0, #1
 5037              	.LVL449:
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5038              		.loc 1 4096 0
 5039 0096 D3E7     		b	.L454
 5040              	.LVL450:
 5041              	.L467:
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5042              		.loc 1 4017 0
 5043 0098 0020     		movs	r0, #0
 5044              	.LVL451:
 5045 009a D1E7     		b	.L454
 5046              	.LVL452:
 5047              	.L460:
 5048              	.LCFI50:
 5049              		.cfi_def_cfa_offset 0
 5050              		.cfi_restore 3
 5051              		.cfi_restore 4
 5052              		.cfi_restore 5
 5053              		.cfi_restore 14
 5054 009c 0020     		movs	r0, #0
 5055              	.LVL453:
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5056              		.loc 1 4097 0
 5057 009e 7047     		bx	lr
 5058              	.L469:
 5059              		.align	2
 5060              	.L468:
 5061 00a0 00000000 		.word	.LANCHOR10
 5062 00a4 00000000 		.word	.LANCHOR4
 5063 00a8 00000000 		.word	.LANCHOR13
 5064              		.cfi_endproc
 5065              	.LFE60:
 5067              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 5068              		.align	1
 5069              		.global	xTaskPriorityDisinherit
 5070              		.syntax unified
 5071              		.thumb
 5072              		.thumb_func
 5073              		.fpu fpv4-sp-d16
 5075              	xTaskPriorityDisinherit:
 5076              	.LFB61:
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 5077              		.loc 1 4105 0
 5078              		.cfi_startproc
 5079              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 196


 5080              		@ frame_needed = 0, uses_anonymous_args = 0
 5081              	.LVL454:
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5082              		.loc 1 4109 0
 5083 0000 0028     		cmp	r0, #0
 5084 0002 49D0     		beq	.L477
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 5085              		.loc 1 4105 0
 5086 0004 38B5     		push	{r3, r4, r5, lr}
 5087              	.LCFI51:
 5088              		.cfi_def_cfa_offset 16
 5089              		.cfi_offset 3, -16
 5090              		.cfi_offset 4, -12
 5091              		.cfi_offset 5, -8
 5092              		.cfi_offset 14, -4
 5093 0006 0446     		mov	r4, r0
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 5094              		.loc 1 4115 0
 5095 0008 264A     		ldr	r2, .L484
 5096 000a 1268     		ldr	r2, [r2]
 5097 000c 8242     		cmp	r2, r0
 5098 000e 08D0     		beq	.L472
 5099              	.LBB216:
 5100              	.LBB217:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5101              		.loc 2 195 0
 5102              		.syntax unified
 5103              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5104 0010 4FF05003 			mov r3, #80												
 5105 0014 83F31188 		msr basepri, r3											
 5106 0018 BFF36F8F 		isb														
 5107 001c BFF34F8F 		dsb														
 5108              	
 5109              	@ 0 "" 2
 5110              	.LVL455:
 5111              		.thumb
 5112              		.syntax unified
 5113              	.L473:
 5114 0020 FEE7     		b	.L473
 5115              	.L472:
 5116              	.LBE217:
 5117              	.LBE216:
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 5118              		.loc 1 4116 0
 5119 0022 426D     		ldr	r2, [r0, #84]
 5120 0024 42B9     		cbnz	r2, .L474
 5121              	.LBB218:
 5122              	.LBB219:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5123              		.loc 2 195 0
 5124              		.syntax unified
 5125              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5126 0026 4FF05003 			mov r3, #80												
 5127 002a 83F31188 		msr basepri, r3											
 5128 002e BFF36F8F 		isb														
 5129 0032 BFF34F8F 		dsb														
 5130              	
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 197


 5131              	@ 0 "" 2
 5132              	.LVL456:
 5133              		.thumb
 5134              		.syntax unified
 5135              	.L475:
 5136 0036 FEE7     		b	.L475
 5137              	.L474:
 5138              	.LBE219:
 5139              	.LBE218:
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5140              		.loc 1 4117 0
 5141 0038 013A     		subs	r2, r2, #1
 5142 003a 4265     		str	r2, [r0, #84]
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5143              		.loc 1 4121 0
 5144 003c C06A     		ldr	r0, [r0, #44]
 5145              	.LVL457:
 5146 003e 216D     		ldr	r1, [r4, #80]
 5147 0040 8842     		cmp	r0, r1
 5148 0042 2BD0     		beq	.L478
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5149              		.loc 1 4124 0
 5150 0044 62BB     		cbnz	r2, .L479
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5151              		.loc 1 4131 0
 5152 0046 251D     		adds	r5, r4, #4
 5153 0048 2846     		mov	r0, r5
 5154 004a FFF7FEFF 		bl	uxListRemove
 5155              	.LVL458:
 5156 004e 70B9     		cbnz	r0, .L476
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5157              		.loc 1 4133 0
 5158 0050 E26A     		ldr	r2, [r4, #44]
 5159 0052 1423     		movs	r3, #20
 5160 0054 03FB02F3 		mul	r3, r3, r2
 5161 0058 1349     		ldr	r1, .L484+4
 5162 005a CB58     		ldr	r3, [r1, r3]
 5163 005c 3BB9     		cbnz	r3, .L476
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5164              		.loc 1 4133 0 is_stmt 0 discriminator 1
 5165 005e 0123     		movs	r3, #1
 5166 0060 03FA02F2 		lsl	r2, r3, r2
 5167 0064 1149     		ldr	r1, .L484+8
 5168 0066 0B68     		ldr	r3, [r1]
 5169 0068 23EA0203 		bic	r3, r3, r2
 5170 006c 0B60     		str	r3, [r1]
 5171              	.L476:
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5172              		.loc 1 4143 0 is_stmt 1
 5173 006e 236D     		ldr	r3, [r4, #80]
 5174 0070 E362     		str	r3, [r4, #44]
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5175              		.loc 1 4148 0
 5176 0072 C3F10702 		rsb	r2, r3, #7
 5177 0076 A261     		str	r2, [r4, #24]
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5178              		.loc 1 4149 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 198


 5179 0078 0124     		movs	r4, #1
 5180              	.LVL459:
 5181 007a 04FA03F2 		lsl	r2, r4, r3
 5182 007e 0B49     		ldr	r1, .L484+8
 5183 0080 0868     		ldr	r0, [r1]
 5184 0082 0243     		orrs	r2, r2, r0
 5185 0084 0A60     		str	r2, [r1]
 5186 0086 2946     		mov	r1, r5
 5187 0088 074A     		ldr	r2, .L484+4
 5188 008a 1420     		movs	r0, #20
 5189 008c 00FB0320 		mla	r0, r0, r3, r2
 5190 0090 FFF7FEFF 		bl	vListInsertEnd
 5191              	.LVL460:
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5192              		.loc 1 4159 0
 5193 0094 2046     		mov	r0, r4
 5194              	.LVL461:
 5195              	.L470:
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5196              		.loc 1 4177 0
 5197 0096 38BD     		pop	{r3, r4, r5, pc}
 5198              	.LVL462:
 5199              	.L477:
 5200              	.LCFI52:
 5201              		.cfi_def_cfa_offset 0
 5202              		.cfi_restore 3
 5203              		.cfi_restore 4
 5204              		.cfi_restore 5
 5205              		.cfi_restore 14
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5206              		.loc 1 4107 0
 5207 0098 0020     		movs	r0, #0
 5208              	.LVL463:
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5209              		.loc 1 4177 0
 5210 009a 7047     		bx	lr
 5211              	.LVL464:
 5212              	.L478:
 5213              	.LCFI53:
 5214              		.cfi_def_cfa_offset 16
 5215              		.cfi_offset 3, -16
 5216              		.cfi_offset 4, -12
 5217              		.cfi_offset 5, -8
 5218              		.cfi_offset 14, -4
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5219              		.loc 1 4107 0
 5220 009c 0020     		movs	r0, #0
 5221 009e FAE7     		b	.L470
 5222              	.L479:
 5223 00a0 0020     		movs	r0, #0
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5224              		.loc 1 4176 0
 5225 00a2 F8E7     		b	.L470
 5226              	.L485:
 5227              		.align	2
 5228              	.L484:
 5229 00a4 00000000 		.word	.LANCHOR10
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 199


 5230 00a8 00000000 		.word	.LANCHOR4
 5231 00ac 00000000 		.word	.LANCHOR13
 5232              		.cfi_endproc
 5233              	.LFE61:
 5235              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 5236              		.align	1
 5237              		.global	vTaskPriorityDisinheritAfterTimeout
 5238              		.syntax unified
 5239              		.thumb
 5240              		.thumb_func
 5241              		.fpu fpv4-sp-d16
 5243              	vTaskPriorityDisinheritAfterTimeout:
 5244              	.LFB62:
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 5245              		.loc 1 4185 0
 5246              		.cfi_startproc
 5247              		@ args = 0, pretend = 0, frame = 0
 5248              		@ frame_needed = 0, uses_anonymous_args = 0
 5249              	.LVL465:
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5250              		.loc 1 4190 0
 5251 0000 0028     		cmp	r0, #0
 5252 0002 4FD0     		beq	.L496
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 5253              		.loc 1 4185 0
 5254 0004 38B5     		push	{r3, r4, r5, lr}
 5255              	.LCFI54:
 5256              		.cfi_def_cfa_offset 16
 5257              		.cfi_offset 3, -16
 5258              		.cfi_offset 4, -12
 5259              		.cfi_offset 5, -8
 5260              		.cfi_offset 14, -4
 5261 0006 0346     		mov	r3, r0
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5262              		.loc 1 4194 0
 5263 0008 406D     		ldr	r0, [r0, #84]
 5264              	.LVL466:
 5265 000a 40B9     		cbnz	r0, .L488
 5266              	.LBB220:
 5267              	.LBB221:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5268              		.loc 2 195 0
 5269              		.syntax unified
 5270              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5271 000c 4FF05003 			mov r3, #80												
 5272 0010 83F31188 		msr basepri, r3											
 5273 0014 BFF36F8F 		isb														
 5274 0018 BFF34F8F 		dsb														
 5275              	
 5276              	@ 0 "" 2
 5277              	.LVL467:
 5278              		.thumb
 5279              		.syntax unified
 5280              	.L489:
 5281 001c FEE7     		b	.L489
 5282              	.LVL468:
 5283              	.L488:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 200


 5284              	.LBE221:
 5285              	.LBE220:
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5286              		.loc 1 4200 0
 5287 001e 1A6D     		ldr	r2, [r3, #80]
 5288 0020 8A42     		cmp	r2, r1
 5289 0022 00D2     		bcs	.L490
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5290              		.loc 1 4202 0
 5291 0024 0A46     		mov	r2, r1
 5292              	.L490:
 5293              	.LVL469:
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5294              		.loc 1 4210 0
 5295 0026 D96A     		ldr	r1, [r3, #44]
 5296              	.LVL470:
 5297 0028 9142     		cmp	r1, r2
 5298 002a 01D0     		beq	.L486
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5299              		.loc 1 4216 0
 5300 002c 0128     		cmp	r0, #1
 5301 002e 00D0     		beq	.L499
 5302              	.LVL471:
 5303              	.L486:
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5304              		.loc 1 4282 0
 5305 0030 38BD     		pop	{r3, r4, r5, pc}
 5306              	.LVL472:
 5307              	.L499:
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5308              		.loc 1 4221 0
 5309 0032 1D48     		ldr	r0, .L500
 5310 0034 0068     		ldr	r0, [r0]
 5311 0036 9842     		cmp	r0, r3
 5312 0038 08D1     		bne	.L491
 5313              	.LBB222:
 5314              	.LBB223:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5315              		.loc 2 195 0
 5316              		.syntax unified
 5317              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5318 003a 4FF05003 			mov r3, #80												
 5319 003e 83F31188 		msr basepri, r3											
 5320 0042 BFF36F8F 		isb														
 5321 0046 BFF34F8F 		dsb														
 5322              	
 5323              	@ 0 "" 2
 5324              	.LVL473:
 5325              		.thumb
 5326              		.syntax unified
 5327              	.L492:
 5328 004a FEE7     		b	.L492
 5329              	.LVL474:
 5330              	.L491:
 5331              	.LBE223:
 5332              	.LBE222:
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 201


 5333              		.loc 1 4228 0
 5334 004c DA62     		str	r2, [r3, #44]
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5335              		.loc 1 4232 0
 5336 004e 9869     		ldr	r0, [r3, #24]
 5337 0050 0028     		cmp	r0, #0
 5338 0052 02DB     		blt	.L493
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5339              		.loc 1 4234 0
 5340 0054 C2F10702 		rsb	r2, r2, #7
 5341              	.LVL475:
 5342 0058 9A61     		str	r2, [r3, #24]
 5343              	.L493:
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5344              		.loc 1 4247 0
 5345 005a 5A69     		ldr	r2, [r3, #20]
 5346 005c 1348     		ldr	r0, .L500+4
 5347 005e 1424     		movs	r4, #20
 5348 0060 04FB0101 		mla	r1, r4, r1, r0
 5349              	.LVL476:
 5350 0064 8A42     		cmp	r2, r1
 5351 0066 E3D1     		bne	.L486
 5352 0068 1C46     		mov	r4, r3
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 5353              		.loc 1 4249 0
 5354 006a 1D1D     		adds	r5, r3, #4
 5355 006c 2846     		mov	r0, r5
 5356 006e FFF7FEFF 		bl	uxListRemove
 5357              	.LVL477:
 5358 0072 40B9     		cbnz	r0, .L494
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 5359              		.loc 1 4254 0
 5360 0074 E26A     		ldr	r2, [r4, #44]
 5361 0076 0123     		movs	r3, #1
 5362 0078 03FA02F2 		lsl	r2, r3, r2
 5363 007c 0C49     		ldr	r1, .L500+8
 5364 007e 0B68     		ldr	r3, [r1]
 5365 0080 23EA0203 		bic	r3, r3, r2
 5366 0084 0B60     		str	r3, [r1]
 5367              	.L494:
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5368              		.loc 1 4261 0
 5369 0086 E26A     		ldr	r2, [r4, #44]
 5370 0088 0123     		movs	r3, #1
 5371 008a 9340     		lsls	r3, r3, r2
 5372 008c 0849     		ldr	r1, .L500+8
 5373 008e 0868     		ldr	r0, [r1]
 5374 0090 0343     		orrs	r3, r3, r0
 5375 0092 0B60     		str	r3, [r1]
 5376 0094 2946     		mov	r1, r5
 5377 0096 054B     		ldr	r3, .L500+4
 5378 0098 1420     		movs	r0, #20
 5379 009a 00FB0230 		mla	r0, r0, r2, r3
 5380 009e FFF7FEFF 		bl	vListInsertEnd
 5381              	.LVL478:
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5382              		.loc 1 4282 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 202


 5383 00a2 C5E7     		b	.L486
 5384              	.LVL479:
 5385              	.L496:
 5386              	.LCFI55:
 5387              		.cfi_def_cfa_offset 0
 5388              		.cfi_restore 3
 5389              		.cfi_restore 4
 5390              		.cfi_restore 5
 5391              		.cfi_restore 14
 5392 00a4 7047     		bx	lr
 5393              	.L501:
 5394 00a6 00BF     		.align	2
 5395              	.L500:
 5396 00a8 00000000 		.word	.LANCHOR10
 5397 00ac 00000000 		.word	.LANCHOR4
 5398 00b0 00000000 		.word	.LANCHOR13
 5399              		.cfi_endproc
 5400              	.LFE62:
 5402              		.section	.text.vTaskList,"ax",%progbits
 5403              		.align	1
 5404              		.global	vTaskList
 5405              		.syntax unified
 5406              		.thumb
 5407              		.thumb_func
 5408              		.fpu fpv4-sp-d16
 5410              	vTaskList:
 5411              	.LFB64:
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
 5412              		.loc 1 4379 0
 5413              		.cfi_startproc
 5414              		@ args = 0, pretend = 0, frame = 0
 5415              		@ frame_needed = 0, uses_anonymous_args = 0
 5416              	.LVL480:
 5417 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 5418              	.LCFI56:
 5419              		.cfi_def_cfa_offset 28
 5420              		.cfi_offset 4, -28
 5421              		.cfi_offset 5, -24
 5422              		.cfi_offset 6, -20
 5423              		.cfi_offset 7, -16
 5424              		.cfi_offset 8, -12
 5425              		.cfi_offset 9, -8
 5426              		.cfi_offset 14, -4
 5427 0004 83B0     		sub	sp, sp, #12
 5428              	.LCFI57:
 5429              		.cfi_def_cfa_offset 40
 5430 0006 0546     		mov	r5, r0
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5431              		.loc 1 4410 0
 5432 0008 0023     		movs	r3, #0
 5433 000a 0370     		strb	r3, [r0]
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5434              		.loc 1 4414 0
 5435 000c 284B     		ldr	r3, .L516
 5436 000e 1C68     		ldr	r4, [r3]
 5437              	.LVL481:
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 203


 5438              		.loc 1 4419 0
 5439 0010 1B68     		ldr	r3, [r3]
 5440 0012 03EBC303 		add	r3, r3, r3, lsl #3
 5441 0016 9800     		lsls	r0, r3, #2
 5442              	.LVL482:
 5443 0018 FFF7FEFF 		bl	pvPortMalloc
 5444              	.LVL483:
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5445              		.loc 1 4421 0
 5446 001c 0028     		cmp	r0, #0
 5447 001e 44D0     		beq	.L502
 5448 0020 0746     		mov	r7, r0
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5449              		.loc 1 4424 0
 5450 0022 0022     		movs	r2, #0
 5451 0024 2146     		mov	r1, r4
 5452 0026 FFF7FEFF 		bl	uxTaskGetSystemState
 5453              	.LVL484:
 5454 002a 8046     		mov	r8, r0
 5455              	.LVL485:
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5456              		.loc 1 4427 0
 5457 002c 0026     		movs	r6, #0
 5458 002e 23E0     		b	.L504
 5459              	.LVL486:
 5460              	.L506:
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
 5461              		.loc 1 4431 0
 5462 0030 4FF05809 		mov	r9, #88
 5463 0034 0DE0     		b	.L508
 5464              	.L509:
 5465              	.LVL487:
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
 5466              		.loc 1 4437 0
 5467 0036 4FF04209 		mov	r9, #66
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5468              		.loc 1 4438 0
 5469 003a 0AE0     		b	.L508
 5470              	.LVL488:
 5471              	.L510:
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
 5472              		.loc 1 4440 0
 5473 003c 4FF05309 		mov	r9, #83
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5474              		.loc 1 4441 0
 5475 0040 07E0     		b	.L508
 5476              	.LVL489:
 5477              	.L511:
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
 5478              		.loc 1 4443 0
 5479 0042 4FF04409 		mov	r9, #68
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5480              		.loc 1 4444 0
 5481 0046 04E0     		b	.L508
 5482              	.LVL490:
 5483              	.L505:
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 204


 5484              		.loc 1 4449 0
 5485 0048 4FF00009 		mov	r9, #0
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5486              		.loc 1 4450 0
 5487 004c 01E0     		b	.L508
 5488              	.LVL491:
 5489              	.L513:
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
 5490              		.loc 1 4434 0
 5491 004e 4FF05209 		mov	r9, #82
 5492              	.L508:
 5493              	.LVL492:
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5494              		.loc 1 4455 0 discriminator 2
 5495 0052 6168     		ldr	r1, [r4, #4]
 5496 0054 2846     		mov	r0, r5
 5497 0056 FFF7FEFF 		bl	prvWriteNameToBuffer
 5498              	.LVL493:
 5499 005a 0546     		mov	r5, r0
 5500              	.LVL494:
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
 5501              		.loc 1 4458 0 discriminator 2
 5502 005c 2369     		ldr	r3, [r4, #16]
 5503 005e 228C     		ldrh	r2, [r4, #32]
 5504 0060 A168     		ldr	r1, [r4, #8]
 5505 0062 0191     		str	r1, [sp, #4]
 5506 0064 0092     		str	r2, [sp]
 5507 0066 4A46     		mov	r2, r9
 5508 0068 1249     		ldr	r1, .L516+4
 5509 006a FFF7FEFF 		bl	sprintf
 5510              	.LVL495:
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5511              		.loc 1 4459 0 discriminator 2
 5512 006e 2846     		mov	r0, r5
 5513 0070 FFF7FEFF 		bl	strlen
 5514              	.LVL496:
 5515 0074 0544     		add	r5, r5, r0
 5516              	.LVL497:
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5517              		.loc 1 4427 0 discriminator 2
 5518 0076 0136     		adds	r6, r6, #1
 5519              	.LVL498:
 5520              	.L504:
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5521              		.loc 1 4427 0 is_stmt 0 discriminator 1
 5522 0078 4645     		cmp	r6, r8
 5523 007a 13D2     		bcs	.L515
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5524              		.loc 1 4429 0 is_stmt 1
 5525 007c 06EBC603 		add	r3, r6, r6, lsl #3
 5526 0080 9C00     		lsls	r4, r3, #2
 5527 0082 3C44     		add	r4, r4, r7
 5528 0084 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2
 5529 0086 042B     		cmp	r3, #4
 5530 0088 DED8     		bhi	.L505
 5531 008a 01A2     		adr	r2, .L507
 5532 008c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 205


 5533              		.p2align 2
 5534              	.L507:
 5535 0090 31000000 		.word	.L506+1
 5536 0094 4F000000 		.word	.L513+1
 5537 0098 37000000 		.word	.L509+1
 5538 009c 3D000000 		.word	.L510+1
 5539 00a0 43000000 		.word	.L511+1
 5540              		.p2align 1
 5541              	.L515:
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5542              		.loc 1 4464 0
 5543 00a4 3846     		mov	r0, r7
 5544 00a6 FFF7FEFF 		bl	vPortFree
 5545              	.LVL499:
 5546              	.L502:
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5547              		.loc 1 4470 0
 5548 00aa 03B0     		add	sp, sp, #12
 5549              	.LCFI58:
 5550              		.cfi_def_cfa_offset 28
 5551              		@ sp needed
 5552 00ac BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 5553              	.LVL500:
 5554              	.L517:
 5555              		.align	2
 5556              	.L516:
 5557 00b0 00000000 		.word	.LANCHOR9
 5558 00b4 00000000 		.word	.LC1
 5559              		.cfi_endproc
 5560              	.LFE64:
 5562              		.section	.text.vTaskGetRunTimeStats,"ax",%progbits
 5563              		.align	1
 5564              		.global	vTaskGetRunTimeStats
 5565              		.syntax unified
 5566              		.thumb
 5567              		.thumb_func
 5568              		.fpu fpv4-sp-d16
 5570              	vTaskGetRunTimeStats:
 5571              	.LFB65:
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
 5572              		.loc 1 4478 0
 5573              		.cfi_startproc
 5574              		@ args = 0, pretend = 0, frame = 8
 5575              		@ frame_needed = 0, uses_anonymous_args = 0
 5576              	.LVL501:
 5577 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 5578              	.LCFI59:
 5579              		.cfi_def_cfa_offset 28
 5580              		.cfi_offset 4, -28
 5581              		.cfi_offset 5, -24
 5582              		.cfi_offset 6, -20
 5583              		.cfi_offset 7, -16
 5584              		.cfi_offset 8, -12
 5585              		.cfi_offset 9, -8
 5586              		.cfi_offset 14, -4
 5587 0004 83B0     		sub	sp, sp, #12
 5588              	.LCFI60:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 206


 5589              		.cfi_def_cfa_offset 40
 5590 0006 0746     		mov	r7, r0
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5591              		.loc 1 4515 0
 5592 0008 0023     		movs	r3, #0
 5593 000a 0370     		strb	r3, [r0]
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5594              		.loc 1 4519 0
 5595 000c 1E4B     		ldr	r3, .L527
 5596 000e 1C68     		ldr	r4, [r3]
 5597              	.LVL502:
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5598              		.loc 1 4524 0
 5599 0010 1B68     		ldr	r3, [r3]
 5600 0012 03EBC303 		add	r3, r3, r3, lsl #3
 5601 0016 9800     		lsls	r0, r3, #2
 5602              	.LVL503:
 5603 0018 FFF7FEFF 		bl	pvPortMalloc
 5604              	.LVL504:
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5605              		.loc 1 4526 0
 5606 001c 78B1     		cbz	r0, .L518
 5607 001e 8046     		mov	r8, r0
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5608              		.loc 1 4529 0
 5609 0020 01AA     		add	r2, sp, #4
 5610 0022 2146     		mov	r1, r4
 5611 0024 FFF7FEFF 		bl	uxTaskGetSystemState
 5612              	.LVL505:
 5613 0028 8146     		mov	r9, r0
 5614              	.LVL506:
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5615              		.loc 1 4532 0
 5616 002a 019B     		ldr	r3, [sp, #4]
 5617 002c 174A     		ldr	r2, .L527+4
 5618 002e A2FB0323 		umull	r2, r3, r2, r3
 5619 0032 5B09     		lsrs	r3, r3, #5
 5620 0034 0193     		str	r3, [sp, #4]
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5621              		.loc 1 4535 0
 5622 0036 2BBB     		cbnz	r3, .L525
 5623              	.LVL507:
 5624              	.L521:
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5625              		.loc 1 4591 0
 5626 0038 4046     		mov	r0, r8
 5627 003a FFF7FEFF 		bl	vPortFree
 5628              	.LVL508:
 5629              	.L518:
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5630              		.loc 1 4597 0
 5631 003e 03B0     		add	sp, sp, #12
 5632              	.LCFI61:
 5633              		.cfi_remember_state
 5634              		.cfi_def_cfa_offset 28
 5635              		@ sp needed
 5636 0040 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 207


 5637              	.LVL509:
 5638              	.L522:
 5639              	.LCFI62:
 5640              		.cfi_restore_state
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 5641              		.loc 1 4576 0
 5642 0044 A269     		ldr	r2, [r4, #24]
 5643 0046 1249     		ldr	r1, .L527+8
 5644 0048 FFF7FEFF 		bl	sprintf
 5645              	.LVL510:
 5646              	.L523:
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5647              		.loc 1 4581 0 discriminator 2
 5648 004c 3846     		mov	r0, r7
 5649 004e FFF7FEFF 		bl	strlen
 5650              	.LVL511:
 5651 0052 0744     		add	r7, r7, r0
 5652              	.LVL512:
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5653              		.loc 1 4538 0 discriminator 2
 5654 0054 0135     		adds	r5, r5, #1
 5655              	.LVL513:
 5656              	.L520:
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5657              		.loc 1 4538 0 is_stmt 0 discriminator 1
 5658 0056 4D45     		cmp	r5, r9
 5659 0058 EED2     		bcs	.L521
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5660              		.loc 1 4543 0 is_stmt 1
 5661 005a 05EBC503 		add	r3, r5, r5, lsl #3
 5662 005e 9C00     		lsls	r4, r3, #2
 5663 0060 4444     		add	r4, r4, r8
 5664 0062 A669     		ldr	r6, [r4, #24]
 5665 0064 019B     		ldr	r3, [sp, #4]
 5666 0066 B6FBF3F6 		udiv	r6, r6, r3
 5667              	.LVL514:
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5668              		.loc 1 4548 0
 5669 006a 6168     		ldr	r1, [r4, #4]
 5670 006c 3846     		mov	r0, r7
 5671 006e FFF7FEFF 		bl	prvWriteNameToBuffer
 5672              	.LVL515:
 5673 0072 0746     		mov	r7, r0
 5674              	.LVL516:
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5675              		.loc 1 4550 0
 5676 0074 002E     		cmp	r6, #0
 5677 0076 E5D0     		beq	.L522
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 5678              		.loc 1 4560 0
 5679 0078 3346     		mov	r3, r6
 5680 007a A269     		ldr	r2, [r4, #24]
 5681 007c 0549     		ldr	r1, .L527+12
 5682 007e FFF7FEFF 		bl	sprintf
 5683              	.LVL517:
 5684 0082 E3E7     		b	.L523
 5685              	.LVL518:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 208


 5686              	.L525:
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5687              		.loc 1 4538 0
 5688 0084 0025     		movs	r5, #0
 5689 0086 E6E7     		b	.L520
 5690              	.L528:
 5691              		.align	2
 5692              	.L527:
 5693 0088 00000000 		.word	.LANCHOR9
 5694 008c 1F85EB51 		.word	1374389535
 5695 0090 0C000000 		.word	.LC3
 5696 0094 00000000 		.word	.LC2
 5697              		.cfi_endproc
 5698              	.LFE65:
 5700              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 5701              		.align	1
 5702              		.global	uxTaskResetEventItemValue
 5703              		.syntax unified
 5704              		.thumb
 5705              		.thumb_func
 5706              		.fpu fpv4-sp-d16
 5708              	uxTaskResetEventItemValue:
 5709              	.LFB66:
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
 5710              		.loc 1 4603 0
 5711              		.cfi_startproc
 5712              		@ args = 0, pretend = 0, frame = 0
 5713              		@ frame_needed = 0, uses_anonymous_args = 0
 5714              		@ link register save eliminated.
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5715              		.loc 1 4606 0
 5716 0000 044A     		ldr	r2, .L530
 5717 0002 1368     		ldr	r3, [r2]
 5718 0004 9869     		ldr	r0, [r3, #24]
 5719              	.LVL519:
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5720              		.loc 1 4610 0
 5721 0006 1368     		ldr	r3, [r2]
 5722 0008 DB6A     		ldr	r3, [r3, #44]
 5723 000a 1268     		ldr	r2, [r2]
 5724 000c C3F10703 		rsb	r3, r3, #7
 5725 0010 9361     		str	r3, [r2, #24]
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 5726              		.loc 1 4613 0
 5727 0012 7047     		bx	lr
 5728              	.L531:
 5729              		.align	2
 5730              	.L530:
 5731 0014 00000000 		.word	.LANCHOR10
 5732              		.cfi_endproc
 5733              	.LFE66:
 5735              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 5736              		.align	1
 5737              		.global	pvTaskIncrementMutexHeldCount
 5738              		.syntax unified
 5739              		.thumb
 5740              		.thumb_func
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 209


 5741              		.fpu fpv4-sp-d16
 5743              	pvTaskIncrementMutexHeldCount:
 5744              	.LFB67:
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 5745              		.loc 1 4619 0
 5746              		.cfi_startproc
 5747              		@ args = 0, pretend = 0, frame = 0
 5748              		@ frame_needed = 0, uses_anonymous_args = 0
 5749              		@ link register save eliminated.
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5750              		.loc 1 4622 0
 5751 0000 054B     		ldr	r3, .L534
 5752 0002 1B68     		ldr	r3, [r3]
 5753 0004 23B1     		cbz	r3, .L533
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5754              		.loc 1 4624 0
 5755 0006 044B     		ldr	r3, .L534
 5756 0008 1A68     		ldr	r2, [r3]
 5757 000a 536D     		ldr	r3, [r2, #84]
 5758 000c 0133     		adds	r3, r3, #1
 5759 000e 5365     		str	r3, [r2, #84]
 5760              	.L533:
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5761              		.loc 1 4627 0
 5762 0010 014B     		ldr	r3, .L534
 5763 0012 1868     		ldr	r0, [r3]
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5764              		.loc 1 4628 0
 5765 0014 7047     		bx	lr
 5766              	.L535:
 5767 0016 00BF     		.align	2
 5768              	.L534:
 5769 0018 00000000 		.word	.LANCHOR10
 5770              		.cfi_endproc
 5771              	.LFE67:
 5773              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 5774              		.align	1
 5775              		.global	ulTaskNotifyTake
 5776              		.syntax unified
 5777              		.thumb
 5778              		.thumb_func
 5779              		.fpu fpv4-sp-d16
 5781              	ulTaskNotifyTake:
 5782              	.LFB68:
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
 5783              		.loc 1 4636 0
 5784              		.cfi_startproc
 5785              		@ args = 0, pretend = 0, frame = 0
 5786              		@ frame_needed = 0, uses_anonymous_args = 0
 5787              	.LVL520:
 5788 0000 38B5     		push	{r3, r4, r5, lr}
 5789              	.LCFI63:
 5790              		.cfi_def_cfa_offset 16
 5791              		.cfi_offset 3, -16
 5792              		.cfi_offset 4, -12
 5793              		.cfi_offset 5, -8
 5794              		.cfi_offset 14, -4
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 210


 5795 0002 0546     		mov	r5, r0
 5796 0004 0C46     		mov	r4, r1
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5797              		.loc 1 4639 0
 5798 0006 FFF7FEFF 		bl	vPortEnterCritical
 5799              	.LVL521:
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5800              		.loc 1 4642 0
 5801 000a 194B     		ldr	r3, .L543
 5802 000c 1B68     		ldr	r3, [r3]
 5803 000e 1B6E     		ldr	r3, [r3, #96]
 5804 0010 2BB9     		cbnz	r3, .L537
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5805              		.loc 1 4645 0
 5806 0012 174B     		ldr	r3, .L543
 5807 0014 1B68     		ldr	r3, [r3]
 5808 0016 0122     		movs	r2, #1
 5809 0018 83F86420 		strb	r2, [r3, #100]
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5810              		.loc 1 4647 0
 5811 001c ACB9     		cbnz	r4, .L541
 5812              	.L537:
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5813              		.loc 1 4668 0
 5814 001e FFF7FEFF 		bl	vPortExitCritical
 5815              	.LVL522:
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5816              		.loc 1 4670 0
 5817 0022 FFF7FEFF 		bl	vPortEnterCritical
 5818              	.LVL523:
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5819              		.loc 1 4673 0
 5820 0026 124B     		ldr	r3, .L543
 5821 0028 1B68     		ldr	r3, [r3]
 5822 002a 1C6E     		ldr	r4, [r3, #96]
 5823              	.LVL524:
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5824              		.loc 1 4675 0
 5825 002c 24B1     		cbz	r4, .L538
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5826              		.loc 1 4677 0
 5827 002e CDB9     		cbnz	r5, .L542
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5828              		.loc 1 4683 0
 5829 0030 0F4B     		ldr	r3, .L543
 5830 0032 1B68     		ldr	r3, [r3]
 5831 0034 621E     		subs	r2, r4, #1
 5832 0036 1A66     		str	r2, [r3, #96]
 5833              	.L538:
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5834              		.loc 1 4691 0
 5835 0038 0D4B     		ldr	r3, .L543
 5836 003a 1B68     		ldr	r3, [r3]
 5837 003c 0022     		movs	r2, #0
 5838 003e 83F86420 		strb	r2, [r3, #100]
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5839              		.loc 1 4693 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 211


 5840 0042 FFF7FEFF 		bl	vPortExitCritical
 5841              	.LVL525:
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5842              		.loc 1 4696 0
 5843 0046 2046     		mov	r0, r4
 5844 0048 38BD     		pop	{r3, r4, r5, pc}
 5845              	.LVL526:
 5846              	.L541:
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 5847              		.loc 1 4649 0
 5848 004a 1146     		mov	r1, r2
 5849 004c 2046     		mov	r0, r4
 5850 004e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 5851              	.LVL527:
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5852              		.loc 1 4656 0
 5853 0052 084B     		ldr	r3, .L543+4
 5854 0054 4FF08052 		mov	r2, #268435456
 5855 0058 1A60     		str	r2, [r3]
 5856              		.syntax unified
 5857              	@ 4656 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5858 005a BFF34F8F 		dsb
 5859              	@ 0 "" 2
 5860              	@ 4656 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5861 005e BFF36F8F 		isb
 5862              	@ 0 "" 2
 5863              		.thumb
 5864              		.syntax unified
 5865 0062 DCE7     		b	.L537
 5866              	.LVL528:
 5867              	.L542:
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5868              		.loc 1 4679 0
 5869 0064 024B     		ldr	r3, .L543
 5870 0066 1B68     		ldr	r3, [r3]
 5871 0068 0022     		movs	r2, #0
 5872 006a 1A66     		str	r2, [r3, #96]
 5873 006c E4E7     		b	.L538
 5874              	.L544:
 5875 006e 00BF     		.align	2
 5876              	.L543:
 5877 0070 00000000 		.word	.LANCHOR10
 5878 0074 04ED00E0 		.word	-536810236
 5879              		.cfi_endproc
 5880              	.LFE68:
 5882              		.section	.text.xTaskNotifyWait,"ax",%progbits
 5883              		.align	1
 5884              		.global	xTaskNotifyWait
 5885              		.syntax unified
 5886              		.thumb
 5887              		.thumb_func
 5888              		.fpu fpv4-sp-d16
 5890              	xTaskNotifyWait:
 5891              	.LFB69:
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 5892              		.loc 1 4704 0
 5893              		.cfi_startproc
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 212


 5894              		@ args = 0, pretend = 0, frame = 0
 5895              		@ frame_needed = 0, uses_anonymous_args = 0
 5896              	.LVL529:
 5897 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5898              	.LCFI64:
 5899              		.cfi_def_cfa_offset 24
 5900              		.cfi_offset 3, -24
 5901              		.cfi_offset 4, -20
 5902              		.cfi_offset 5, -16
 5903              		.cfi_offset 6, -12
 5904              		.cfi_offset 7, -8
 5905              		.cfi_offset 14, -4
 5906 0002 0746     		mov	r7, r0
 5907 0004 0D46     		mov	r5, r1
 5908 0006 1446     		mov	r4, r2
 5909 0008 1E46     		mov	r6, r3
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5910              		.loc 1 4707 0
 5911 000a FFF7FEFF 		bl	vPortEnterCritical
 5912              	.LVL530:
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5913              		.loc 1 4710 0
 5914 000e 204B     		ldr	r3, .L553
 5915 0010 1B68     		ldr	r3, [r3]
 5916 0012 93F86430 		ldrb	r3, [r3, #100]	@ zero_extendqisi2
 5917 0016 DBB2     		uxtb	r3, r3
 5918 0018 022B     		cmp	r3, #2
 5919 001a 0AD0     		beq	.L546
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5920              		.loc 1 4715 0
 5921 001c 1C4B     		ldr	r3, .L553
 5922 001e 1A68     		ldr	r2, [r3]
 5923 0020 106E     		ldr	r0, [r2, #96]
 5924 0022 20EA0700 		bic	r0, r0, r7
 5925 0026 1066     		str	r0, [r2, #96]
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5926              		.loc 1 4718 0
 5927 0028 1B68     		ldr	r3, [r3]
 5928 002a 0122     		movs	r2, #1
 5929 002c 83F86420 		strb	r2, [r3, #100]
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5930              		.loc 1 4720 0
 5931 0030 CEB9     		cbnz	r6, .L551
 5932              	.L546:
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5933              		.loc 1 4741 0
 5934 0032 FFF7FEFF 		bl	vPortExitCritical
 5935              	.LVL531:
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5936              		.loc 1 4743 0
 5937 0036 FFF7FEFF 		bl	vPortEnterCritical
 5938              	.LVL532:
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5939              		.loc 1 4747 0
 5940 003a 1CB1     		cbz	r4, .L547
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5941              		.loc 1 4751 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 213


 5942 003c 144B     		ldr	r3, .L553
 5943 003e 1B68     		ldr	r3, [r3]
 5944 0040 1B6E     		ldr	r3, [r3, #96]
 5945 0042 2360     		str	r3, [r4]
 5946              	.L547:
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5947              		.loc 1 4758 0
 5948 0044 124B     		ldr	r3, .L553
 5949 0046 1B68     		ldr	r3, [r3]
 5950 0048 93F86430 		ldrb	r3, [r3, #100]	@ zero_extendqisi2
 5951 004c DBB2     		uxtb	r3, r3
 5952 004e 022B     		cmp	r3, #2
 5953 0050 16D0     		beq	.L552
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5954              		.loc 1 4761 0
 5955 0052 0024     		movs	r4, #0
 5956              	.LVL533:
 5957              	.L548:
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5958              		.loc 1 4771 0
 5959 0054 0E4B     		ldr	r3, .L553
 5960 0056 1B68     		ldr	r3, [r3]
 5961 0058 0022     		movs	r2, #0
 5962 005a 83F86420 		strb	r2, [r3, #100]
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5963              		.loc 1 4773 0
 5964 005e FFF7FEFF 		bl	vPortExitCritical
 5965              	.LVL534:
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5966              		.loc 1 4776 0
 5967 0062 2046     		mov	r0, r4
 5968 0064 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5969              	.LVL535:
 5970              	.L551:
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 5971              		.loc 1 4722 0
 5972 0066 1146     		mov	r1, r2
 5973 0068 3046     		mov	r0, r6
 5974 006a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 5975              	.LVL536:
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5976              		.loc 1 4729 0
 5977 006e 094B     		ldr	r3, .L553+4
 5978 0070 4FF08052 		mov	r2, #268435456
 5979 0074 1A60     		str	r2, [r3]
 5980              		.syntax unified
 5981              	@ 4729 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5982 0076 BFF34F8F 		dsb
 5983              	@ 0 "" 2
 5984              	@ 4729 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5985 007a BFF36F8F 		isb
 5986              	@ 0 "" 2
 5987              		.thumb
 5988              		.syntax unified
 5989 007e D8E7     		b	.L546
 5990              	.L552:
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 214


 5991              		.loc 1 4767 0
 5992 0080 034B     		ldr	r3, .L553
 5993 0082 1A68     		ldr	r2, [r3]
 5994 0084 136E     		ldr	r3, [r2, #96]
 5995 0086 23EA0505 		bic	r5, r3, r5
 5996              	.LVL537:
 5997 008a 1566     		str	r5, [r2, #96]
 5998              	.LVL538:
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5999              		.loc 1 4768 0
 6000 008c 0124     		movs	r4, #1
 6001              	.LVL539:
 6002 008e E1E7     		b	.L548
 6003              	.L554:
 6004              		.align	2
 6005              	.L553:
 6006 0090 00000000 		.word	.LANCHOR10
 6007 0094 04ED00E0 		.word	-536810236
 6008              		.cfi_endproc
 6009              	.LFE69:
 6011              		.section	.text.xTaskGenericNotify,"ax",%progbits
 6012              		.align	1
 6013              		.global	xTaskGenericNotify
 6014              		.syntax unified
 6015              		.thumb
 6016              		.thumb_func
 6017              		.fpu fpv4-sp-d16
 6019              	xTaskGenericNotify:
 6020              	.LFB70:
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 6021              		.loc 1 4784 0
 6022              		.cfi_startproc
 6023              		@ args = 0, pretend = 0, frame = 0
 6024              		@ frame_needed = 0, uses_anonymous_args = 0
 6025              	.LVL540:
 6026 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 6027              	.LCFI65:
 6028              		.cfi_def_cfa_offset 24
 6029              		.cfi_offset 3, -24
 6030              		.cfi_offset 4, -20
 6031              		.cfi_offset 5, -16
 6032              		.cfi_offset 6, -12
 6033              		.cfi_offset 7, -8
 6034              		.cfi_offset 14, -4
 6035              	.LVL541:
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 6036              		.loc 1 4789 0
 6037 0002 40B9     		cbnz	r0, .L556
 6038              	.LBB224:
 6039              	.LBB225:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6040              		.loc 2 195 0
 6041              		.syntax unified
 6042              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6043 0004 4FF05003 			mov r3, #80												
 6044 0008 83F31188 		msr basepri, r3											
 6045 000c BFF36F8F 		isb														
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 215


 6046 0010 BFF34F8F 		dsb														
 6047              	
 6048              	@ 0 "" 2
 6049              	.LVL542:
 6050              		.thumb
 6051              		.syntax unified
 6052              	.L557:
 6053 0014 FEE7     		b	.L557
 6054              	.LVL543:
 6055              	.L556:
 6056 0016 0446     		mov	r4, r0
 6057 0018 1F46     		mov	r7, r3
 6058 001a 1646     		mov	r6, r2
 6059 001c 0D46     		mov	r5, r1
 6060              	.LVL544:
 6061              	.LBE225:
 6062              	.LBE224:
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 6063              		.loc 1 4792 0
 6064 001e FFF7FEFF 		bl	vPortEnterCritical
 6065              	.LVL545:
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 6066              		.loc 1 4794 0
 6067 0022 0FB1     		cbz	r7, .L558
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 6068              		.loc 1 4796 0
 6069 0024 236E     		ldr	r3, [r4, #96]
 6070 0026 3B60     		str	r3, [r7]
 6071              	.L558:
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6072              		.loc 1 4799 0
 6073 0028 94F86430 		ldrb	r3, [r4, #100]	@ zero_extendqisi2
 6074 002c DBB2     		uxtb	r3, r3
 6075              	.LVL546:
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6076              		.loc 1 4801 0
 6077 002e 0222     		movs	r2, #2
 6078 0030 84F86420 		strb	r2, [r4, #100]
4803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 6079              		.loc 1 4803 0
 6080 0034 042E     		cmp	r6, #4
 6081 0036 1BD8     		bhi	.L559
 6082 0038 DFE806F0 		tbb	[pc, r6]
 6083              	.L561:
 6084 003c 27       		.byte	(.L570-.L561)/2
 6085 003d 03       		.byte	(.L562-.L561)/2
 6086 003e 0D       		.byte	(.L563-.L561)/2
 6087 003f 12       		.byte	(.L564-.L561)/2
 6088 0040 15       		.byte	(.L565-.L561)/2
 6089 0041 00       		.p2align 1
 6090              	.L562:
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 6091              		.loc 1 4806 0
 6092 0042 226E     		ldr	r2, [r4, #96]
 6093 0044 1543     		orrs	r5, r5, r2
 6094              	.LVL547:
 6095 0046 2566     		str	r5, [r4, #96]
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 216


4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 6096              		.loc 1 4786 0
 6097 0048 0125     		movs	r5, #1
 6098              	.L560:
 6099              	.LVL548:
4847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 6100              		.loc 1 4847 0
 6101 004a 012B     		cmp	r3, #1
 6102 004c 23D0     		beq	.L574
 6103              	.LVL549:
 6104              	.L567:
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6105              		.loc 1 4887 0
 6106 004e FFF7FEFF 		bl	vPortExitCritical
 6107              	.LVL550:
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6108              		.loc 1 4890 0
 6109 0052 2846     		mov	r0, r5
 6110 0054 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 6111              	.LVL551:
 6112              	.L563:
4810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 6113              		.loc 1 4810 0
 6114 0056 226E     		ldr	r2, [r4, #96]
 6115 0058 0132     		adds	r2, r2, #1
 6116 005a 2266     		str	r2, [r4, #96]
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 6117              		.loc 1 4786 0
 6118 005c 0125     		movs	r5, #1
 6119              	.LVL552:
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6120              		.loc 1 4811 0
 6121 005e F4E7     		b	.L560
 6122              	.LVL553:
 6123              	.L564:
4814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 6124              		.loc 1 4814 0
 6125 0060 2566     		str	r5, [r4, #96]
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 6126              		.loc 1 4786 0
 6127 0062 0125     		movs	r5, #1
 6128              	.LVL554:
4815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6129              		.loc 1 4815 0
 6130 0064 F1E7     		b	.L560
 6131              	.LVL555:
 6132              	.L565:
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 6133              		.loc 1 4818 0
 6134 0066 022B     		cmp	r3, #2
 6135 0068 11D0     		beq	.L571
4820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 6136              		.loc 1 4820 0
 6137 006a 2566     		str	r5, [r4, #96]
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 6138              		.loc 1 4786 0
 6139 006c 0125     		movs	r5, #1
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 217


 6140              	.LVL556:
 6141 006e ECE7     		b	.L560
 6142              	.LVL557:
 6143              	.L559:
4838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6144              		.loc 1 4838 0
 6145 0070 226E     		ldr	r2, [r4, #96]
 6146 0072 B2F1FF3F 		cmp	r2, #-1
 6147 0076 0CD0     		beq	.L572
 6148              	.LBB226:
 6149              	.LBB227:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6150              		.loc 2 195 0
 6151              		.syntax unified
 6152              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6153 0078 4FF05003 			mov r3, #80												
 6154 007c 83F31188 		msr basepri, r3											
 6155 0080 BFF36F8F 		isb														
 6156 0084 BFF34F8F 		dsb														
 6157              	
 6158              	@ 0 "" 2
 6159              	.LVL558:
 6160              		.thumb
 6161              		.syntax unified
 6162              	.L566:
 6163 0088 FEE7     		b	.L566
 6164              	.LVL559:
 6165              	.L570:
 6166              	.LBE227:
 6167              	.LBE226:
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 6168              		.loc 1 4786 0
 6169 008a 0125     		movs	r5, #1
 6170              	.LVL560:
 6171 008c DDE7     		b	.L560
 6172              	.LVL561:
 6173              	.L571:
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 6174              		.loc 1 4825 0
 6175 008e 0025     		movs	r5, #0
 6176              	.LVL562:
 6177 0090 DBE7     		b	.L560
 6178              	.LVL563:
 6179              	.L572:
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 6180              		.loc 1 4786 0
 6181 0092 0125     		movs	r5, #1
 6182              	.LVL564:
 6183 0094 D9E7     		b	.L560
 6184              	.LVL565:
 6185              	.L574:
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 6186              		.loc 1 4849 0
 6187 0096 261D     		adds	r6, r4, #4
 6188 0098 3046     		mov	r0, r6
 6189 009a FFF7FEFF 		bl	uxListRemove
 6190              	.LVL566:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 218


4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6191              		.loc 1 4850 0
 6192 009e E26A     		ldr	r2, [r4, #44]
 6193 00a0 0123     		movs	r3, #1
 6194 00a2 9340     		lsls	r3, r3, r2
 6195 00a4 1249     		ldr	r1, .L575
 6196 00a6 0868     		ldr	r0, [r1]
 6197 00a8 0343     		orrs	r3, r3, r0
 6198 00aa 0B60     		str	r3, [r1]
 6199 00ac 3146     		mov	r1, r6
 6200 00ae 114B     		ldr	r3, .L575+4
 6201 00b0 1420     		movs	r0, #20
 6202 00b2 00FB0230 		mla	r0, r0, r2, r3
 6203 00b6 FFF7FEFF 		bl	vListInsertEnd
 6204              	.LVL567:
4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6205              		.loc 1 4853 0
 6206 00ba A36A     		ldr	r3, [r4, #40]
 6207 00bc 43B1     		cbz	r3, .L568
 6208              	.LBB228:
 6209              	.LBB229:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6210              		.loc 2 195 0
 6211              		.syntax unified
 6212              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6213 00be 4FF05003 			mov r3, #80												
 6214 00c2 83F31188 		msr basepri, r3											
 6215 00c6 BFF36F8F 		isb														
 6216 00ca BFF34F8F 		dsb														
 6217              	
 6218              	@ 0 "" 2
 6219              	.LVL568:
 6220              		.thumb
 6221              		.syntax unified
 6222              	.L569:
 6223 00ce FEE7     		b	.L569
 6224              	.L568:
 6225              	.LBE229:
 6226              	.LBE228:
4871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 6227              		.loc 1 4871 0
 6228 00d0 E26A     		ldr	r2, [r4, #44]
 6229 00d2 094B     		ldr	r3, .L575+8
 6230 00d4 1B68     		ldr	r3, [r3]
 6231 00d6 DB6A     		ldr	r3, [r3, #44]
 6232 00d8 9A42     		cmp	r2, r3
 6233 00da B8D9     		bls	.L567
4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 6234              		.loc 1 4875 0
 6235 00dc 074B     		ldr	r3, .L575+12
 6236 00de 4FF08052 		mov	r2, #268435456
 6237 00e2 1A60     		str	r2, [r3]
 6238              		.syntax unified
 6239              	@ 4875 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 6240 00e4 BFF34F8F 		dsb
 6241              	@ 0 "" 2
 6242              	@ 4875 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 219


 6243 00e8 BFF36F8F 		isb
 6244              	@ 0 "" 2
 6245              		.thumb
 6246              		.syntax unified
 6247 00ec AFE7     		b	.L567
 6248              	.L576:
 6249 00ee 00BF     		.align	2
 6250              	.L575:
 6251 00f0 00000000 		.word	.LANCHOR13
 6252 00f4 00000000 		.word	.LANCHOR4
 6253 00f8 00000000 		.word	.LANCHOR10
 6254 00fc 04ED00E0 		.word	-536810236
 6255              		.cfi_endproc
 6256              	.LFE70:
 6258              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 6259              		.align	1
 6260              		.global	xTaskGenericNotifyFromISR
 6261              		.syntax unified
 6262              		.thumb
 6263              		.thumb_func
 6264              		.fpu fpv4-sp-d16
 6266              	xTaskGenericNotifyFromISR:
 6267              	.LFB71:
4898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 6268              		.loc 1 4898 0
 6269              		.cfi_startproc
 6270              		@ args = 4, pretend = 0, frame = 0
 6271              		@ frame_needed = 0, uses_anonymous_args = 0
 6272              	.LVL569:
 6273 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 6274              	.LCFI66:
 6275              		.cfi_def_cfa_offset 32
 6276              		.cfi_offset 3, -32
 6277              		.cfi_offset 4, -28
 6278              		.cfi_offset 5, -24
 6279              		.cfi_offset 6, -20
 6280              		.cfi_offset 7, -16
 6281              		.cfi_offset 8, -12
 6282              		.cfi_offset 9, -8
 6283              		.cfi_offset 14, -4
 6284 0004 089E     		ldr	r6, [sp, #32]
 6285              	.LVL570:
4904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6286              		.loc 1 4904 0
 6287 0006 40B9     		cbnz	r0, .L578
 6288              	.LBB230:
 6289              	.LBB231:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6290              		.loc 2 195 0
 6291              		.syntax unified
 6292              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6293 0008 4FF05003 			mov r3, #80												
 6294 000c 83F31188 		msr basepri, r3											
 6295 0010 BFF36F8F 		isb														
 6296 0014 BFF34F8F 		dsb														
 6297              	
 6298              	@ 0 "" 2
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 220


 6299              	.LVL571:
 6300              		.thumb
 6301              		.syntax unified
 6302              	.L579:
 6303 0018 FEE7     		b	.L579
 6304              	.LVL572:
 6305              	.L578:
 6306 001a 0446     		mov	r4, r0
 6307 001c 9946     		mov	r9, r3
 6308 001e 9046     		mov	r8, r2
 6309 0020 0D46     		mov	r5, r1
 6310              	.LBE231:
 6311              	.LBE230:
4922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6312              		.loc 1 4922 0
 6313 0022 FFF7FEFF 		bl	vPortValidateInterruptPriority
 6314              	.LVL573:
 6315              	.LBB232:
 6316              	.LBB233:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6317              		.loc 2 211 0
 6318              		.syntax unified
 6319              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6320 0026 EFF31187 			mrs r7, basepri											
 6321 002a 4FF05003 		mov r3, #80												
 6322 002e 83F31188 		msr basepri, r3											
 6323 0032 BFF36F8F 		isb														
 6324 0036 BFF34F8F 		dsb														
 6325              	
 6326              	@ 0 "" 2
 6327              		.thumb
 6328              		.syntax unified
 6329              	.LBE233:
 6330              	.LBE232:
4928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 6331              		.loc 1 4928 0
 6332 003a B9F1000F 		cmp	r9, #0
 6333 003e 02D0     		beq	.L580
4930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 6334              		.loc 1 4930 0
 6335 0040 236E     		ldr	r3, [r4, #96]
 6336 0042 C9F80030 		str	r3, [r9]
 6337              	.L580:
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 6338              		.loc 1 4933 0
 6339 0046 94F86430 		ldrb	r3, [r4, #100]	@ zero_extendqisi2
 6340 004a DBB2     		uxtb	r3, r3
 6341              	.LVL574:
4934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6342              		.loc 1 4934 0
 6343 004c 0222     		movs	r2, #2
 6344 004e 84F86420 		strb	r2, [r4, #100]
4936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 6345              		.loc 1 4936 0
 6346 0052 B8F1040F 		cmp	r8, #4
 6347 0056 1CD8     		bhi	.L581
 6348 0058 DFE808F0 		tbb	[pc, r8]
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 221


 6349              	.L583:
 6350 005c 28       		.byte	(.L595-.L583)/2
 6351 005d 03       		.byte	(.L584-.L583)/2
 6352 005e 0E       		.byte	(.L585-.L583)/2
 6353 005f 13       		.byte	(.L586-.L583)/2
 6354 0060 16       		.byte	(.L587-.L583)/2
 6355 0061 00       		.p2align 1
 6356              	.L584:
4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 6357              		.loc 1 4939 0
 6358 0062 226E     		ldr	r2, [r4, #96]
 6359 0064 1543     		orrs	r5, r5, r2
 6360              	.LVL575:
 6361 0066 2566     		str	r5, [r4, #96]
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 6362              		.loc 1 4901 0
 6363 0068 0125     		movs	r5, #1
 6364              	.L582:
 6365              	.LVL576:
4979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 6366              		.loc 1 4979 0
 6367 006a 012B     		cmp	r3, #1
 6368 006c 24D0     		beq	.L599
 6369              	.LVL577:
 6370              	.L589:
 6371              	.LBB234:
 6372              	.LBB235:
 6373              		.loc 2 229 0
 6374              		.syntax unified
 6375              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6376 006e 87F31188 			msr basepri, r7	
 6377              	@ 0 "" 2
 6378              	.LVL578:
 6379              		.thumb
 6380              		.syntax unified
 6381              	.LBE235:
 6382              	.LBE234:
5019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6383              		.loc 1 5019 0
 6384 0072 2846     		mov	r0, r5
 6385 0074 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 6386              	.LVL579:
 6387              	.L585:
4943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 6388              		.loc 1 4943 0
 6389 0078 226E     		ldr	r2, [r4, #96]
 6390 007a 0132     		adds	r2, r2, #1
 6391 007c 2266     		str	r2, [r4, #96]
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 6392              		.loc 1 4901 0
 6393 007e 0125     		movs	r5, #1
 6394              	.LVL580:
4944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6395              		.loc 1 4944 0
 6396 0080 F3E7     		b	.L582
 6397              	.LVL581:
 6398              	.L586:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 222


4947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 6399              		.loc 1 4947 0
 6400 0082 2566     		str	r5, [r4, #96]
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 6401              		.loc 1 4901 0
 6402 0084 0125     		movs	r5, #1
 6403              	.LVL582:
4948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6404              		.loc 1 4948 0
 6405 0086 F0E7     		b	.L582
 6406              	.LVL583:
 6407              	.L587:
4951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 6408              		.loc 1 4951 0
 6409 0088 022B     		cmp	r3, #2
 6410 008a 11D0     		beq	.L596
4953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 6411              		.loc 1 4953 0
 6412 008c 2566     		str	r5, [r4, #96]
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 6413              		.loc 1 4901 0
 6414 008e 0125     		movs	r5, #1
 6415              	.LVL584:
 6416 0090 EBE7     		b	.L582
 6417              	.LVL585:
 6418              	.L581:
4971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 6419              		.loc 1 4971 0
 6420 0092 226E     		ldr	r2, [r4, #96]
 6421 0094 B2F1FF3F 		cmp	r2, #-1
 6422 0098 0CD0     		beq	.L597
 6423              	.LBB236:
 6424              	.LBB237:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6425              		.loc 2 195 0
 6426              		.syntax unified
 6427              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6428 009a 4FF05003 			mov r3, #80												
 6429 009e 83F31188 		msr basepri, r3											
 6430 00a2 BFF36F8F 		isb														
 6431 00a6 BFF34F8F 		dsb														
 6432              	
 6433              	@ 0 "" 2
 6434              	.LVL586:
 6435              		.thumb
 6436              		.syntax unified
 6437              	.L588:
 6438 00aa FEE7     		b	.L588
 6439              	.LVL587:
 6440              	.L595:
 6441              	.LBE237:
 6442              	.LBE236:
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 6443              		.loc 1 4901 0
 6444 00ac 0125     		movs	r5, #1
 6445              	.LVL588:
 6446 00ae DCE7     		b	.L582
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 223


 6447              	.LVL589:
 6448              	.L596:
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 6449              		.loc 1 4958 0
 6450 00b0 0025     		movs	r5, #0
 6451              	.LVL590:
 6452 00b2 DAE7     		b	.L582
 6453              	.LVL591:
 6454              	.L597:
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 6455              		.loc 1 4901 0
 6456 00b4 0125     		movs	r5, #1
 6457              	.LVL592:
 6458 00b6 D8E7     		b	.L582
 6459              	.LVL593:
 6460              	.L599:
4982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6461              		.loc 1 4982 0
 6462 00b8 A36A     		ldr	r3, [r4, #40]
 6463              	.LVL594:
 6464 00ba 43B1     		cbz	r3, .L590
 6465              	.LBB238:
 6466              	.LBB239:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6467              		.loc 2 195 0
 6468              		.syntax unified
 6469              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6470 00bc 4FF05003 			mov r3, #80												
 6471 00c0 83F31188 		msr basepri, r3											
 6472 00c4 BFF36F8F 		isb														
 6473 00c8 BFF34F8F 		dsb														
 6474              	
 6475              	@ 0 "" 2
 6476              	.LVL595:
 6477              		.thumb
 6478              		.syntax unified
 6479              	.L591:
 6480 00cc FEE7     		b	.L591
 6481              	.L590:
 6482              	.LBE239:
 6483              	.LBE238:
4984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 6484              		.loc 1 4984 0
 6485 00ce 144B     		ldr	r3, .L600
 6486 00d0 1B68     		ldr	r3, [r3]
 6487 00d2 FBB9     		cbnz	r3, .L592
4986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6488              		.loc 1 4986 0
 6489 00d4 04F10408 		add	r8, r4, #4
 6490 00d8 4046     		mov	r0, r8
 6491 00da FFF7FEFF 		bl	uxListRemove
 6492              	.LVL596:
4987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 6493              		.loc 1 4987 0
 6494 00de E26A     		ldr	r2, [r4, #44]
 6495 00e0 0123     		movs	r3, #1
 6496 00e2 9340     		lsls	r3, r3, r2
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 224


 6497 00e4 0F49     		ldr	r1, .L600+4
 6498 00e6 0868     		ldr	r0, [r1]
 6499 00e8 0343     		orrs	r3, r3, r0
 6500 00ea 0B60     		str	r3, [r1]
 6501 00ec 4146     		mov	r1, r8
 6502 00ee 0E4B     		ldr	r3, .L600+8
 6503 00f0 1420     		movs	r0, #20
 6504 00f2 00FB0230 		mla	r0, r0, r2, r3
 6505 00f6 FFF7FEFF 		bl	vListInsertEnd
 6506              	.LVL597:
 6507              	.L593:
4996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 6508              		.loc 1 4996 0
 6509 00fa E26A     		ldr	r2, [r4, #44]
 6510 00fc 0B4B     		ldr	r3, .L600+12
 6511 00fe 1B68     		ldr	r3, [r3]
 6512 0100 DB6A     		ldr	r3, [r3, #44]
 6513 0102 9A42     		cmp	r2, r3
 6514 0104 B3D9     		bls	.L589
5000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 6515              		.loc 1 5000 0
 6516 0106 0EB1     		cbz	r6, .L594
5002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 6517              		.loc 1 5002 0
 6518 0108 0123     		movs	r3, #1
 6519 010a 3360     		str	r3, [r6]
 6520              	.L594:
5008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 6521              		.loc 1 5008 0
 6522 010c 084B     		ldr	r3, .L600+16
 6523 010e 0122     		movs	r2, #1
 6524 0110 1A60     		str	r2, [r3]
 6525 0112 ACE7     		b	.L589
 6526              	.L592:
4993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 6527              		.loc 1 4993 0
 6528 0114 04F11801 		add	r1, r4, #24
 6529 0118 0648     		ldr	r0, .L600+20
 6530 011a FFF7FEFF 		bl	vListInsertEnd
 6531              	.LVL598:
 6532 011e ECE7     		b	.L593
 6533              	.L601:
 6534              		.align	2
 6535              	.L600:
 6536 0120 00000000 		.word	.LANCHOR16
 6537 0124 00000000 		.word	.LANCHOR13
 6538 0128 00000000 		.word	.LANCHOR4
 6539 012c 00000000 		.word	.LANCHOR10
 6540 0130 00000000 		.word	.LANCHOR18
 6541 0134 00000000 		.word	.LANCHOR1
 6542              		.cfi_endproc
 6543              	.LFE71:
 6545              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 6546              		.align	1
 6547              		.global	vTaskNotifyGiveFromISR
 6548              		.syntax unified
 6549              		.thumb
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 225


 6550              		.thumb_func
 6551              		.fpu fpv4-sp-d16
 6553              	vTaskNotifyGiveFromISR:
 6554              	.LFB72:
5027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 6555              		.loc 1 5027 0
 6556              		.cfi_startproc
 6557              		@ args = 0, pretend = 0, frame = 0
 6558              		@ frame_needed = 0, uses_anonymous_args = 0
 6559              	.LVL599:
 6560 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 6561              	.LCFI67:
 6562              		.cfi_def_cfa_offset 24
 6563              		.cfi_offset 3, -24
 6564              		.cfi_offset 4, -20
 6565              		.cfi_offset 5, -16
 6566              		.cfi_offset 6, -12
 6567              		.cfi_offset 7, -8
 6568              		.cfi_offset 14, -4
5032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6569              		.loc 1 5032 0
 6570 0002 40B9     		cbnz	r0, .L603
 6571              	.LBB240:
 6572              	.LBB241:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6573              		.loc 2 195 0
 6574              		.syntax unified
 6575              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6576 0004 4FF05003 			mov r3, #80												
 6577 0008 83F31188 		msr basepri, r3											
 6578 000c BFF36F8F 		isb														
 6579 0010 BFF34F8F 		dsb														
 6580              	
 6581              	@ 0 "" 2
 6582              	.LVL600:
 6583              		.thumb
 6584              		.syntax unified
 6585              	.L604:
 6586 0014 FEE7     		b	.L604
 6587              	.L603:
 6588 0016 0446     		mov	r4, r0
 6589 0018 0D46     		mov	r5, r1
 6590              	.LBE241:
 6591              	.LBE240:
5050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6592              		.loc 1 5050 0
 6593 001a FFF7FEFF 		bl	vPortValidateInterruptPriority
 6594              	.LVL601:
 6595              	.LBB242:
 6596              	.LBB243:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6597              		.loc 2 211 0
 6598              		.syntax unified
 6599              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6600 001e EFF31186 			mrs r6, basepri											
 6601 0022 4FF05003 		mov r3, #80												
 6602 0026 83F31188 		msr basepri, r3											
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 226


 6603 002a BFF36F8F 		isb														
 6604 002e BFF34F8F 		dsb														
 6605              	
 6606              	@ 0 "" 2
 6607              		.thumb
 6608              		.syntax unified
 6609              	.LBE243:
 6610              	.LBE242:
5056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 6611              		.loc 1 5056 0
 6612 0032 94F86430 		ldrb	r3, [r4, #100]	@ zero_extendqisi2
 6613 0036 DBB2     		uxtb	r3, r3
 6614              	.LVL602:
5057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6615              		.loc 1 5057 0
 6616 0038 0222     		movs	r2, #2
 6617 003a 84F86420 		strb	r2, [r4, #100]
5061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6618              		.loc 1 5061 0
 6619 003e 226E     		ldr	r2, [r4, #96]
 6620 0040 0132     		adds	r2, r2, #1
 6621 0042 2266     		str	r2, [r4, #96]
5067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 6622              		.loc 1 5067 0
 6623 0044 012B     		cmp	r3, #1
 6624 0046 02D0     		beq	.L612
 6625              	.LVL603:
 6626              	.L605:
 6627              	.LBB244:
 6628              	.LBB245:
 6629              		.loc 2 229 0
 6630              		.syntax unified
 6631              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6632 0048 86F31188 			msr basepri, r6	
 6633              	@ 0 "" 2
 6634              	.LVL604:
 6635              		.thumb
 6636              		.syntax unified
 6637              	.LBE245:
 6638              	.LBE244:
5105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6639              		.loc 1 5105 0
 6640 004c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 6641              	.LVL605:
 6642              	.L612:
5070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6643              		.loc 1 5070 0
 6644 004e A36A     		ldr	r3, [r4, #40]
 6645              	.LVL606:
 6646 0050 43B1     		cbz	r3, .L606
 6647              	.LBB246:
 6648              	.LBB247:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6649              		.loc 2 195 0
 6650              		.syntax unified
 6651              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6652 0052 4FF05003 			mov r3, #80												
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 227


 6653 0056 83F31188 		msr basepri, r3											
 6654 005a BFF36F8F 		isb														
 6655 005e BFF34F8F 		dsb														
 6656              	
 6657              	@ 0 "" 2
 6658              	.LVL607:
 6659              		.thumb
 6660              		.syntax unified
 6661              	.L607:
 6662 0062 FEE7     		b	.L607
 6663              	.L606:
 6664              	.LBE247:
 6665              	.LBE246:
5072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 6666              		.loc 1 5072 0
 6667 0064 134B     		ldr	r3, .L613
 6668 0066 1B68     		ldr	r3, [r3]
 6669 0068 F3B9     		cbnz	r3, .L608
5074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6670              		.loc 1 5074 0
 6671 006a 271D     		adds	r7, r4, #4
 6672 006c 3846     		mov	r0, r7
 6673 006e FFF7FEFF 		bl	uxListRemove
 6674              	.LVL608:
5075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 6675              		.loc 1 5075 0
 6676 0072 E26A     		ldr	r2, [r4, #44]
 6677 0074 0123     		movs	r3, #1
 6678 0076 9340     		lsls	r3, r3, r2
 6679 0078 0F49     		ldr	r1, .L613+4
 6680 007a 0868     		ldr	r0, [r1]
 6681 007c 0343     		orrs	r3, r3, r0
 6682 007e 0B60     		str	r3, [r1]
 6683 0080 3946     		mov	r1, r7
 6684 0082 0E4B     		ldr	r3, .L613+8
 6685 0084 1420     		movs	r0, #20
 6686 0086 00FB0230 		mla	r0, r0, r2, r3
 6687 008a FFF7FEFF 		bl	vListInsertEnd
 6688              	.LVL609:
 6689              	.L609:
5084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 6690              		.loc 1 5084 0
 6691 008e E26A     		ldr	r2, [r4, #44]
 6692 0090 0B4B     		ldr	r3, .L613+12
 6693 0092 1B68     		ldr	r3, [r3]
 6694 0094 DB6A     		ldr	r3, [r3, #44]
 6695 0096 9A42     		cmp	r2, r3
 6696 0098 D6D9     		bls	.L605
5088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 6697              		.loc 1 5088 0
 6698 009a 0DB1     		cbz	r5, .L610
5090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 6699              		.loc 1 5090 0
 6700 009c 0123     		movs	r3, #1
 6701 009e 2B60     		str	r3, [r5]
 6702              	.L610:
5096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 228


 6703              		.loc 1 5096 0
 6704 00a0 084B     		ldr	r3, .L613+16
 6705 00a2 0122     		movs	r2, #1
 6706 00a4 1A60     		str	r2, [r3]
 6707 00a6 CFE7     		b	.L605
 6708              	.L608:
5081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 6709              		.loc 1 5081 0
 6710 00a8 04F11801 		add	r1, r4, #24
 6711 00ac 0648     		ldr	r0, .L613+20
 6712 00ae FFF7FEFF 		bl	vListInsertEnd
 6713              	.LVL610:
 6714 00b2 ECE7     		b	.L609
 6715              	.L614:
 6716              		.align	2
 6717              	.L613:
 6718 00b4 00000000 		.word	.LANCHOR16
 6719 00b8 00000000 		.word	.LANCHOR13
 6720 00bc 00000000 		.word	.LANCHOR4
 6721 00c0 00000000 		.word	.LANCHOR10
 6722 00c4 00000000 		.word	.LANCHOR18
 6723 00c8 00000000 		.word	.LANCHOR1
 6724              		.cfi_endproc
 6725              	.LFE72:
 6727              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 6728              		.align	1
 6729              		.global	xTaskNotifyStateClear
 6730              		.syntax unified
 6731              		.thumb
 6732              		.thumb_func
 6733              		.fpu fpv4-sp-d16
 6735              	xTaskNotifyStateClear:
 6736              	.LFB73:
5113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 6737              		.loc 1 5113 0
 6738              		.cfi_startproc
 6739              		@ args = 0, pretend = 0, frame = 0
 6740              		@ frame_needed = 0, uses_anonymous_args = 0
 6741              	.LVL611:
 6742 0000 10B5     		push	{r4, lr}
 6743              	.LCFI68:
 6744              		.cfi_def_cfa_offset 8
 6745              		.cfi_offset 4, -8
 6746              		.cfi_offset 14, -4
5119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6747              		.loc 1 5119 0
 6748 0002 0446     		mov	r4, r0
 6749 0004 58B1     		cbz	r0, .L620
 6750              	.LVL612:
 6751              	.L616:
5121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 6752              		.loc 1 5121 0 discriminator 4
 6753 0006 FFF7FEFF 		bl	vPortEnterCritical
 6754              	.LVL613:
5123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 6755              		.loc 1 5123 0 discriminator 4
 6756 000a 94F86430 		ldrb	r3, [r4, #100]	@ zero_extendqisi2
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 229


 6757 000e DBB2     		uxtb	r3, r3
 6758 0010 022B     		cmp	r3, #2
 6759 0012 07D0     		beq	.L621
5130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 6760              		.loc 1 5130 0
 6761 0014 0024     		movs	r4, #0
 6762              	.LVL614:
 6763              	.L617:
5133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6764              		.loc 1 5133 0
 6765 0016 FFF7FEFF 		bl	vPortExitCritical
 6766              	.LVL615:
5136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6767              		.loc 1 5136 0
 6768 001a 2046     		mov	r0, r4
 6769 001c 10BD     		pop	{r4, pc}
 6770              	.LVL616:
 6771              	.L620:
5119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6772              		.loc 1 5119 0 discriminator 1
 6773 001e 044B     		ldr	r3, .L622
 6774 0020 1C68     		ldr	r4, [r3]
 6775              	.LVL617:
 6776 0022 F0E7     		b	.L616
 6777              	.LVL618:
 6778              	.L621:
5125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 6779              		.loc 1 5125 0
 6780 0024 0023     		movs	r3, #0
 6781 0026 84F86430 		strb	r3, [r4, #100]
 6782              	.LVL619:
5126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 6783              		.loc 1 5126 0
 6784 002a 0124     		movs	r4, #1
 6785              	.LVL620:
 6786 002c F3E7     		b	.L617
 6787              	.L623:
 6788 002e 00BF     		.align	2
 6789              	.L622:
 6790 0030 00000000 		.word	.LANCHOR10
 6791              		.cfi_endproc
 6792              	.LFE73:
 6794              		.section	.text.ulTaskNotifyValueClear,"ax",%progbits
 6795              		.align	1
 6796              		.global	ulTaskNotifyValueClear
 6797              		.syntax unified
 6798              		.thumb
 6799              		.thumb_func
 6800              		.fpu fpv4-sp-d16
 6802              	ulTaskNotifyValueClear:
 6803              	.LFB74:
5144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 6804              		.loc 1 5144 0
 6805              		.cfi_startproc
 6806              		@ args = 0, pretend = 0, frame = 0
 6807              		@ frame_needed = 0, uses_anonymous_args = 0
 6808              	.LVL621:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 230


 6809 0000 70B5     		push	{r4, r5, r6, lr}
 6810              	.LCFI69:
 6811              		.cfi_def_cfa_offset 16
 6812              		.cfi_offset 4, -16
 6813              		.cfi_offset 5, -12
 6814              		.cfi_offset 6, -8
 6815              		.cfi_offset 14, -4
 6816 0002 0E46     		mov	r6, r1
5150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6817              		.loc 1 5150 0
 6818 0004 0446     		mov	r4, r0
 6819 0006 60B1     		cbz	r0, .L627
 6820              	.LVL622:
 6821              	.L625:
5152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 6822              		.loc 1 5152 0 discriminator 4
 6823 0008 FFF7FEFF 		bl	vPortEnterCritical
 6824              	.LVL623:
5156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ulNotifiedValue &= ~ulBitsToClear;
 6825              		.loc 1 5156 0 discriminator 4
 6826 000c 064B     		ldr	r3, .L628
 6827 000e 1B68     		ldr	r3, [r3]
 6828 0010 1D6E     		ldr	r5, [r3, #96]
 6829              	.LVL624:
5157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 6830              		.loc 1 5157 0 discriminator 4
 6831 0012 216E     		ldr	r1, [r4, #96]
 6832 0014 21EA0601 		bic	r1, r1, r6
 6833 0018 2166     		str	r1, [r4, #96]
5159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6834              		.loc 1 5159 0 discriminator 4
 6835 001a FFF7FEFF 		bl	vPortExitCritical
 6836              	.LVL625:
5162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6837              		.loc 1 5162 0 discriminator 4
 6838 001e 2846     		mov	r0, r5
 6839 0020 70BD     		pop	{r4, r5, r6, pc}
 6840              	.LVL626:
 6841              	.L627:
5150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6842              		.loc 1 5150 0 discriminator 1
 6843 0022 014B     		ldr	r3, .L628
 6844 0024 1C68     		ldr	r4, [r3]
 6845              	.LVL627:
 6846 0026 EFE7     		b	.L625
 6847              	.L629:
 6848              		.align	2
 6849              	.L628:
 6850 0028 00000000 		.word	.LANCHOR10
 6851              		.cfi_endproc
 6852              	.LFE74:
 6854              		.global	FreeRTOS_errno
 6855              		.global	pxCurrentTCB
 6856              		.section	.bss.FreeRTOS_errno,"aw",%nobits
 6857              		.align	2
 6858              		.set	.LANCHOR21,. + 0
 6861              	FreeRTOS_errno:
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 231


 6862 0000 00000000 		.space	4
 6863              		.section	.bss.pxCurrentTCB,"aw",%nobits
 6864              		.align	2
 6865              		.set	.LANCHOR10,. + 0
 6868              	pxCurrentTCB:
 6869 0000 00000000 		.space	4
 6870              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 6871              		.align	2
 6872              		.set	.LANCHOR2,. + 0
 6875              	pxDelayedTaskList:
 6876 0000 00000000 		.space	4
 6877              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 6878              		.align	2
 6879              		.set	.LANCHOR8,. + 0
 6882              	pxOverflowDelayedTaskList:
 6883 0000 00000000 		.space	4
 6884              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 6885              		.align	2
 6886              		.set	.LANCHOR4,. + 0
 6889              	pxReadyTasksLists:
 6890 0000 00000000 		.space	140
 6890      00000000 
 6890      00000000 
 6890      00000000 
 6890      00000000 
 6891              		.section	.bss.ulTaskSwitchedInTime,"aw",%nobits
 6892              		.align	2
 6893              		.set	.LANCHOR20,. + 0
 6896              	ulTaskSwitchedInTime:
 6897 0000 00000000 		.space	4
 6898              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 6899              		.align	2
 6900              		.set	.LANCHOR9,. + 0
 6903              	uxCurrentNumberOfTasks:
 6904 0000 00000000 		.space	4
 6905              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 6906              		.align	2
 6907              		.set	.LANCHOR14,. + 0
 6910              	uxDeletedTasksWaitingCleanUp:
 6911 0000 00000000 		.space	4
 6912              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 6913              		.align	2
 6914              		.set	.LANCHOR16,. + 0
 6917              	uxSchedulerSuspended:
 6918 0000 00000000 		.space	4
 6919              		.section	.bss.uxTaskNumber,"aw",%nobits
 6920              		.align	2
 6921              		.set	.LANCHOR12,. + 0
 6924              	uxTaskNumber:
 6925 0000 00000000 		.space	4
 6926              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 6927              		.align	2
 6928              		.set	.LANCHOR13,. + 0
 6931              	uxTopReadyPriority:
 6932 0000 00000000 		.space	4
 6933              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 6934              		.align	2
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 232


 6935              		.set	.LANCHOR5,. + 0
 6938              	xDelayedTaskList1:
 6939 0000 00000000 		.space	20
 6939      00000000 
 6939      00000000 
 6939      00000000 
 6939      00000000 
 6940              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 6941              		.align	2
 6942              		.set	.LANCHOR6,. + 0
 6945              	xDelayedTaskList2:
 6946 0000 00000000 		.space	20
 6946      00000000 
 6946      00000000 
 6946      00000000 
 6946      00000000 
 6947              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 6948              		.align	2
 6949              		.set	.LANCHOR3,. + 0
 6952              	xNextTaskUnblockTime:
 6953 0000 00000000 		.space	4
 6954              		.section	.bss.xNumOfOverflows,"aw",%nobits
 6955              		.align	2
 6956              		.set	.LANCHOR17,. + 0
 6959              	xNumOfOverflows:
 6960 0000 00000000 		.space	4
 6961              		.section	.bss.xPendedTicks,"aw",%nobits
 6962              		.align	2
 6963              		.set	.LANCHOR19,. + 0
 6966              	xPendedTicks:
 6967 0000 00000000 		.space	4
 6968              		.section	.bss.xPendingReadyList,"aw",%nobits
 6969              		.align	2
 6970              		.set	.LANCHOR1,. + 0
 6973              	xPendingReadyList:
 6974 0000 00000000 		.space	20
 6974      00000000 
 6974      00000000 
 6974      00000000 
 6974      00000000 
 6975              		.section	.bss.xSchedulerRunning,"aw",%nobits
 6976              		.align	2
 6977              		.set	.LANCHOR11,. + 0
 6980              	xSchedulerRunning:
 6981 0000 00000000 		.space	4
 6982              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 6983              		.align	2
 6984              		.set	.LANCHOR0,. + 0
 6987              	xSuspendedTaskList:
 6988 0000 00000000 		.space	20
 6988      00000000 
 6988      00000000 
 6988      00000000 
 6988      00000000 
 6989              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 6990              		.align	2
 6991              		.set	.LANCHOR7,. + 0
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 233


 6994              	xTasksWaitingTermination:
 6995 0000 00000000 		.space	20
 6995      00000000 
 6995      00000000 
 6995      00000000 
 6995      00000000 
 6996              		.section	.bss.xTickCount,"aw",%nobits
 6997              		.align	2
 6998              		.set	.LANCHOR15,. + 0
 7001              	xTickCount:
 7002 0000 00000000 		.space	4
 7003              		.section	.bss.xYieldPending,"aw",%nobits
 7004              		.align	2
 7005              		.set	.LANCHOR18,. + 0
 7008              	xYieldPending:
 7009 0000 00000000 		.space	4
 7010              		.section	.rodata.vTaskGetRunTimeStats.str1.4,"aMS",%progbits,1
 7011              		.align	2
 7012              	.LC2:
 7013 0000 09257509 		.ascii	"\011%u\011\011%u%%\015\012\000"
 7013      09257525 
 7013      250D0A00 
 7014              	.LC3:
 7015 000c 09257509 		.ascii	"\011%u\011\011<1%%\015\012\000"
 7015      093C3125 
 7015      250D0A00 
 7016              		.section	.rodata.vTaskList.str1.4,"aMS",%progbits,1
 7017              		.align	2
 7018              	.LC1:
 7019 0000 09256309 		.ascii	"\011%c\011%u\011%u\011%u\015\012\000"
 7019      25750925 
 7019      75092575 
 7019      0D0A00
 7020              		.section	.rodata.vTaskStartScheduler.str1.4,"aMS",%progbits,1
 7021              		.align	2
 7022              	.LC0:
 7023 0000 49444C45 		.ascii	"IDLE\000"
 7023      00
 7024              		.text
 7025              	.Letext0:
 7026              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\lib\\gcc\\arm-none-eab
 7027              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 7028              		.file 5 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 7029              		.file 6 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 7030              		.file 7 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 7031              		.file 8 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 7032              		.file 9 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include
 7033              		.file 10 "Core/Inc/FreeRTOSConfig.h"
 7034              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 7035              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 7036              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 7037              		.file 14 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 7038              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
 7039              		.file 16 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\includ
 7040              		.file 17 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\includ
 7041              		.file 18 "Middlewares/Third_Party/FreeRTOS/Source/include/timers.h"
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 234


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:18     .text.prvTaskIsTaskSuspended:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:24     .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:92     .text.prvTaskIsTaskSuspended:00000038 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:98     .text.prvTaskCheckFreeStackSpace:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:104    .text.prvTaskCheckFreeStackSpace:00000000 prvTaskCheckFreeStackSpace
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:138    .text.prvResetNextTaskUnblockTime:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:144    .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:178    .text.prvResetNextTaskUnblockTime:00000024 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:184    .text.prvInitialiseNewTask:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:190    .text.prvInitialiseNewTask:00000000 prvInitialiseNewTask
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:325    .text.prvInitialiseTaskLists:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:331    .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:398    .text.prvInitialiseTaskLists:00000048 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:410    .text.prvAddNewTaskToReadyList:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:416    .text.prvAddNewTaskToReadyList:00000000 prvAddNewTaskToReadyList
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:526    .text.prvAddNewTaskToReadyList:00000090 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:537    .text.prvDeleteTCB:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:543    .text.prvDeleteTCB:00000000 prvDeleteTCB
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:606    .text.prvCheckTasksWaitingTermination:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:612    .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:679    .text.prvCheckTasksWaitingTermination:00000040 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:686    .text.prvAddCurrentTaskToDelayedList:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:692    .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:793    .text.prvAddCurrentTaskToDelayedList:0000007c $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:804    .text.prvIdleTask:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:810    .text.prvIdleTask:00000000 prvIdleTask
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:857    .text.prvIdleTask:00000028 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:863    .text.prvWriteNameToBuffer:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:869    .text.prvWriteNameToBuffer:00000000 prvWriteNameToBuffer
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:912    .text.xTaskCreateStatic:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:919    .text.xTaskCreateStatic:00000000 xTaskCreateStatic
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:1044   .text.xTaskCreate:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:1051   .text.xTaskCreate:00000000 xTaskCreate
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:1158   .text.vTaskDelete:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:1165   .text.vTaskDelete:00000000 vTaskDelete
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:1317   .text.vTaskDelete:000000b8 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:1331   .text.eTaskGetState:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:1338   .text.eTaskGetState:00000000 eTaskGetState
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:1467   .text.eTaskGetState:0000007c $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:1476   .text.uxTaskPriorityGet:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:1483   .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:1522   .text.uxTaskPriorityGet:0000001c $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:1527   .text.uxTaskPriorityGetFromISR:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:1534   .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:1597   .text.uxTaskPriorityGetFromISR:0000002c $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:1602   .text.vTaskPrioritySet:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:1609   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:1787   .text.vTaskPrioritySet:000000cc $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:1795   .text.vTaskResume:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:1802   .text.vTaskResume:00000000 vTaskResume
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:1905   .text.vTaskResume:00000074 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:1913   .text.xTaskResumeFromISR:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:1920   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:2053   .text.xTaskResumeFromISR:00000090 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:2062   .text.vTaskStartScheduler:00000000 $t
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 235


C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:2069   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:2196   .text.vTaskStartScheduler:00000084 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:2207   .text.vTaskEndScheduler:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:2214   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:2252   .text.vTaskEndScheduler:00000020 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:2257   .text.vTaskSuspendAll:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:2264   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:2282   .text.vTaskSuspendAll:0000000c $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:2287   .text.xTaskGetTickCount:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:2294   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:2310   .text.xTaskGetTickCount:00000008 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:2315   .text.xTaskGetTickCountFromISR:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:2322   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:2345   .text.xTaskGetTickCountFromISR:0000000c $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:2350   .text.uxTaskGetNumberOfTasks:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:2357   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:2372   .text.uxTaskGetNumberOfTasks:00000008 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:2377   .text.pcTaskGetName:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:2384   .text.pcTaskGetName:00000000 pcTaskGetName
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:2430   .text.pcTaskGetName:00000024 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:2437   .text.xTaskIncrementTick:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:2444   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:2652   .text.xTaskIncrementTick:000000ec $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:2667   .text.xTaskResumeAll:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:2674   .text.xTaskResumeAll:00000000 xTaskResumeAll
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:2858   .text.xTaskResumeAll:000000d0 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:2871   .text.vTaskDelay:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:2878   .text.vTaskDelay:00000000 vTaskDelay
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:2951   .text.vTaskDelay:00000044 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:2957   .text.xTaskCatchUpTicks:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:2964   .text.xTaskCatchUpTicks:00000000 xTaskCatchUpTicks
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:3018   .text.xTaskCatchUpTicks:00000030 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:3024   .text.vTaskSetApplicationTaskTag:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:3031   .text.vTaskSetApplicationTaskTag:00000000 vTaskSetApplicationTaskTag
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:3071   .text.vTaskSetApplicationTaskTag:0000001c $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:3076   .text.xTaskGetApplicationTaskTag:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:3083   .text.xTaskGetApplicationTaskTag:00000000 xTaskGetApplicationTaskTag
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:3122   .text.xTaskGetApplicationTaskTag:0000001c $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:3127   .text.xTaskGetApplicationTaskTagFromISR:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:3134   .text.xTaskGetApplicationTaskTagFromISR:00000000 xTaskGetApplicationTaskTagFromISR
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:3189   .text.xTaskGetApplicationTaskTagFromISR:00000028 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:3194   .text.xTaskCallApplicationTaskHook:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:3201   .text.xTaskCallApplicationTaskHook:00000000 xTaskCallApplicationTaskHook
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:3246   .text.xTaskCallApplicationTaskHook:0000001c $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:3251   .text.vTaskSwitchContext:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:3258   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:3421   .text.vTaskSwitchContext:000000c8 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:3434   .text.vTaskSuspend:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:3441   .text.vTaskSuspend:00000000 vTaskSuspend
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:3607   .text.vTaskSuspend:000000cc $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:3619   .text.vTaskPlaceOnEventList:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:3626   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:3679   .text.vTaskPlaceOnEventList:0000002c $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:3684   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:3691   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:3779   .text.vTaskPlaceOnUnorderedEventList:00000054 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:3785   .text.vTaskPlaceOnEventListRestricted:00000000 $t
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 236


C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:3792   .text.vTaskPlaceOnEventListRestricted:00000000 vTaskPlaceOnEventListRestricted
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:3854   .text.vTaskPlaceOnEventListRestricted:00000034 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:3859   .text.xTaskRemoveFromEventList:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:3866   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:3969   .text.xTaskRemoveFromEventList:00000074 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:3979   .text.vTaskRemoveFromUnorderedEventList:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:3986   .text.vTaskRemoveFromUnorderedEventList:00000000 vTaskRemoveFromUnorderedEventList
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:4090   .text.vTaskRemoveFromUnorderedEventList:00000074 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:4101   .text.vTaskSetTimeOutState:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:4108   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:4163   .text.vTaskSetTimeOutState:00000030 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:4169   .text.vTaskInternalSetTimeOutState:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:4176   .text.vTaskInternalSetTimeOutState:00000000 vTaskInternalSetTimeOutState
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:4197   .text.vTaskInternalSetTimeOutState:00000010 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:4203   .text.xTaskCheckForTimeOut:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:4210   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:4342   .text.xTaskCheckForTimeOut:00000078 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:4349   .text.vTaskMissedYield:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:4356   .text.vTaskMissedYield:00000000 vTaskMissedYield
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:4372   .text.vTaskMissedYield:00000008 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:4377   .text.uxTaskGetTaskNumber:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:4384   .text.uxTaskGetTaskNumber:00000000 uxTaskGetTaskNumber
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:4410   .text.vTaskSetTaskNumber:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:4417   .text.vTaskSetTaskNumber:00000000 vTaskSetTaskNumber
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:4438   .text.vTaskGetInfo:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:4445   .text.vTaskGetInfo:00000000 vTaskGetInfo
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:4558   .text.vTaskGetInfo:00000074 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:4563   .text.prvListTasksWithinSingleList:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:4569   .text.prvListTasksWithinSingleList:00000000 prvListTasksWithinSingleList
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:4670   .text.uxTaskGetSystemState:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:4677   .text.uxTaskGetSystemState:00000000 uxTaskGetSystemState
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:4794   .text.uxTaskGetSystemState:00000098 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:4804   .text.uxTaskGetStackHighWaterMark:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:4811   .text.uxTaskGetStackHighWaterMark:00000000 uxTaskGetStackHighWaterMark
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:4844   .text.uxTaskGetStackHighWaterMark:00000014 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:4849   .text.xTaskGetCurrentTaskHandle:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:4856   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:4872   .text.xTaskGetCurrentTaskHandle:00000008 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:4877   .text.xTaskGetSchedulerState:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:4884   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:4916   .text.xTaskGetSchedulerState:00000018 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:4922   .text.xTaskPriorityInherit:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:4929   .text.xTaskPriorityInherit:00000000 xTaskPriorityInherit
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:5061   .text.xTaskPriorityInherit:000000a0 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:5068   .text.xTaskPriorityDisinherit:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:5075   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:5229   .text.xTaskPriorityDisinherit:000000a4 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:5236   .text.vTaskPriorityDisinheritAfterTimeout:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:5243   .text.vTaskPriorityDisinheritAfterTimeout:00000000 vTaskPriorityDisinheritAfterTimeout
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:5396   .text.vTaskPriorityDisinheritAfterTimeout:000000a8 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:5403   .text.vTaskList:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:5410   .text.vTaskList:00000000 vTaskList
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:5535   .text.vTaskList:00000090 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:5540   .text.vTaskList:000000a4 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:5557   .text.vTaskList:000000b0 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:5563   .text.vTaskGetRunTimeStats:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:5570   .text.vTaskGetRunTimeStats:00000000 vTaskGetRunTimeStats
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 237


C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:5693   .text.vTaskGetRunTimeStats:00000088 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:5701   .text.uxTaskResetEventItemValue:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:5708   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:5731   .text.uxTaskResetEventItemValue:00000014 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:5736   .text.pvTaskIncrementMutexHeldCount:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:5743   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:5769   .text.pvTaskIncrementMutexHeldCount:00000018 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:5774   .text.ulTaskNotifyTake:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:5781   .text.ulTaskNotifyTake:00000000 ulTaskNotifyTake
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:5877   .text.ulTaskNotifyTake:00000070 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:5883   .text.xTaskNotifyWait:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:5890   .text.xTaskNotifyWait:00000000 xTaskNotifyWait
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6006   .text.xTaskNotifyWait:00000090 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6012   .text.xTaskGenericNotify:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6019   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6084   .text.xTaskGenericNotify:0000003c $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6251   .text.xTaskGenericNotify:000000f0 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6259   .text.xTaskGenericNotifyFromISR:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6266   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6350   .text.xTaskGenericNotifyFromISR:0000005c $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6536   .text.xTaskGenericNotifyFromISR:00000120 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6546   .text.vTaskNotifyGiveFromISR:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6553   .text.vTaskNotifyGiveFromISR:00000000 vTaskNotifyGiveFromISR
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6718   .text.vTaskNotifyGiveFromISR:000000b4 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6728   .text.xTaskNotifyStateClear:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6735   .text.xTaskNotifyStateClear:00000000 xTaskNotifyStateClear
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6790   .text.xTaskNotifyStateClear:00000030 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6795   .text.ulTaskNotifyValueClear:00000000 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6802   .text.ulTaskNotifyValueClear:00000000 ulTaskNotifyValueClear
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6850   .text.ulTaskNotifyValueClear:00000028 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6861   .bss.FreeRTOS_errno:00000000 FreeRTOS_errno
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6868   .bss.pxCurrentTCB:00000000 pxCurrentTCB
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6857   .bss.FreeRTOS_errno:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6864   .bss.pxCurrentTCB:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6871   .bss.pxDelayedTaskList:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6875   .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6878   .bss.pxOverflowDelayedTaskList:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6882   .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6885   .bss.pxReadyTasksLists:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6889   .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6892   .bss.ulTaskSwitchedInTime:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6896   .bss.ulTaskSwitchedInTime:00000000 ulTaskSwitchedInTime
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6899   .bss.uxCurrentNumberOfTasks:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6903   .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6906   .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6910   .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6913   .bss.uxSchedulerSuspended:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6917   .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6920   .bss.uxTaskNumber:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6924   .bss.uxTaskNumber:00000000 uxTaskNumber
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6927   .bss.uxTopReadyPriority:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6931   .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6934   .bss.xDelayedTaskList1:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6938   .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6941   .bss.xDelayedTaskList2:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6945   .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6948   .bss.xNextTaskUnblockTime:00000000 $d
ARM GAS  C:\Users\82057\AppData\Local\Temp\ccFUypOf.s 			page 238


C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6952   .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6955   .bss.xNumOfOverflows:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6959   .bss.xNumOfOverflows:00000000 xNumOfOverflows
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6962   .bss.xPendedTicks:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6966   .bss.xPendedTicks:00000000 xPendedTicks
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6969   .bss.xPendingReadyList:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6973   .bss.xPendingReadyList:00000000 xPendingReadyList
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6976   .bss.xSchedulerRunning:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6980   .bss.xSchedulerRunning:00000000 xSchedulerRunning
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6983   .bss.xSuspendedTaskList:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6987   .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6990   .bss.xTasksWaitingTermination:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6994   .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6997   .bss.xTickCount:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:7001   .bss.xTickCount:00000000 xTickCount
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:7004   .bss.xYieldPending:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:7008   .bss.xYieldPending:00000000 xYieldPending
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:7011   .rodata.vTaskGetRunTimeStats.str1.4:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:7017   .rodata.vTaskList.str1.4:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:7021   .rodata.vTaskStartScheduler.str1.4:00000000 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6089   .text.xTaskGenericNotify:00000041 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6089   .text.xTaskGenericNotify:00000042 $t
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6355   .text.xTaskGenericNotifyFromISR:00000061 $d
C:\Users\82057\AppData\Local\Temp\ccFUypOf.s:6355   .text.xTaskGenericNotifyFromISR:00000062 $t

UNDEFINED SYMBOLS
memset
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
vListInsertEnd
vPortExitCritical
vPortFree
uxListRemove
vListInsert
vApplicationIdleHook
strcpy
strlen
pvPortMalloc
vPortValidateInterruptPriority
vApplicationGetIdleTaskMemory
xTimerCreateTimerTask
configureTimerForRunTimeStats
xPortStartScheduler
vPortEndScheduler
getRunTimeCounterValue
vApplicationStackOverflowHook
sprintf
